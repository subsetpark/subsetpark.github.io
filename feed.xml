<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title>Subset Park</title>
  <link href="https://blog.zdsmith.com"/>
  <updated>2022-02-19T00:00:00Z</updated>
  <author>
    <name>Z. D. Smith</name>
  </author>
  <id>https://blog.zdsmith.com</id>
  
  <entry>
  <title>A Specification of a Note-Taking Program</title>
  <link href="https://blog.zdsmith.com/posts/a-specification-of-a-note-taking-program.html" />
  <id>https://blog.zdsmith.com/posts/a-specification-of-a-note-taking-program.html</id>
  <updated>2022-02-19T00:00:00.00Z</updated>
  <content><p>I recently watched Conrad Barski’s <a href="https://www.youtube.com/watch?v=4W_m176PIdU">video introducing zek</a>, a program he
wrote to take Zettelkasten-style notes on the command line.</p>
<p>This is the perfect spur to a programming project: another, already perfectly
fine, program that does almost what you want but not exactly. In my case, I was
intrigued by the idea of a Zettelkasten-style note-taking app on the command
line, but the whole line-editor approach seemed to me to be a bridge too far.
So of course I started thinking about how I’d write my <em>own</em>.</p>
<p>I came up with an idea that I like, and that is extremely simple, deferring as
much as possible to my text editor, and could conceivably be written as a
single shell script calling widely-available tools.</p>
<p>I thought about it during a couple showers, and then I wrote a <a href="https://pantagruel-language.com">Pantagruel</a>
spec for what I came up with. I reproduce that here.</p>
<!-- raw HTML omitted -->
<p>module ZK.</p>
<blockquote>
<p>Notes on a note-taking system, inspired by Zettelkasten.</p>
</blockquote>
<p>Line ⇐ String.<br />
Note ⇐ [Line].</p>
<blockquote>
<p>The basic operation we’re describing is <em>indexing</em>: taking all the notes in
our set and updating them with references to other notes. That’s all this
system does; the notes themselves can be written and read with a standard
text editor, and most text editors have a “go to file” procedure, so even
the navigation from note to note can be done within the editor.</p>
</blockquote>
<blockquote>
<p>The only thing it needs help with is finding the connections between notes.</p>
</blockquote>
<p>index notes: [Note].</p>
<hr />
<blockquote>
<p>Indexing does two things:</p>
</blockquote>
<blockquote>
<ol>
<li>It updates each note, in place. All backlinks to each note are placed at
the beginning of it, and all references contained within it are placed at
the end.</li>
</ol>
</blockquote>
<p>all n: notes ⇒<br />
   nʹ = backlinks n + body n + references n<br />
   and name nʹ = name n.</p>
<blockquote>
<ol start="2">
<li>It maintains an Index. Indices aren’t notes - they aren’t affected by
indexing, in particular. They are simply a list of links to each note in the
set, ordered by creation time.</li>
</ol>
</blockquote>
<p>some1 i: Index ⇒<br />
   all n: notesʹ ⇒ ref-note n in i<br />
   and all (n, m): notesʹ ⇒<br />
      created-at n &lt; created-at m → i (ref-note n) &lt; i (ref-note m).</p>
<p>;</p>
<p>Index ⇐ [Line].</p>
<blockquote>
<p>A Reference is a line of text that’s read and written by the system. Both
backlinks and (forward) references are simply collections of References.</p>
</blockquote>
<p>Reference ⇐ Line.<br />
backlinks n: Note ⇒ {Reference}.<br />
references n: Note ⇒ [Reference].</p>
<p>name n: Note ⇒ String.<br />
body n: Note ⇒ [Line].<br />
created-at n: Note ⇒ Date.</p>
<p>ref s: String ⇒ Reference.<br />
ref-note n: Note ⇒ Reference.</p>
<hr />
<blockquote>
<p>To refer to a given name, we simply insert a line with a recognized string
in front of it, followed by the name. For instance: <code>%ref:scifi\ authors</code>.
In particular, it’s important to escape any delimiters in the name; this is
to allow the “go to file under cursor” command to recognize the whole name
rather than the first part, in the case of names with spaces.</p>
</blockquote>
<p>ref s = <code>%ref:</code> + escape s + <code>\n</code>.</p>
<blockquote>
<p>It follows then that a reference to a note is simply a reference to its
filename.</p>
</blockquote>
<p>ref-note n = ref (name n).</p>
<p>body n = [all line: n, ~(line in Reference) ⇒ line].</p>
<blockquote>
<p>As mentioned above, to <em>index</em> a note is to take the note body, prepend all
of the backlinks to that note, and append all the references to other notes
(or other potential notes) contained in the body. A backlink is a reference
to any note that links to this one; a (forward) reference is a reference to
any note which is linked to by this one.</p>
</blockquote>
<p>backlinks n = {all m: Note, (bracketed (name n)) in m ⇒ ref-note m}.<br />
references n = [all s: String, (bracketed s) in n ⇒ ref s].</p>
<blockquote>
<p>It’s worth noting that references can be ordered as they appear in the note
body; but backlinks have no defined order.</p>
</blockquote>
<p>all (r, s): references n ⇒<br />
   n (bracketed (name r)) &lt; n (bracketed (name s)) → references r &lt; references s.</p>
<p>;</p>
<blockquote>
<p>To link to any name, simply enclose it in square brackets in the body of a note.</p>
</blockquote>
<p>escape s: String ⇒ String.<br />
bracketed s: String ⇒ String.</p>
<hr />
<p>bracketed s = <code>[</code> + s + <code>]</code>.</p>
<!-- raw HTML omitted -->
<p>I invite you to read the above; hopefully you like the idea of such a program.
I intend to write it. Hopefully, in fact, you could write it too; hopefully the
spec is descriptive enough that we could write two programs which did the same
thing.</p>
<p>There’s English prose in it, of course, and no doubt you’d refer to that when
you wrote it. And it doesn’t constitute the entire documentation for such a
program; there’s no description of how the thing is intended to be used. And
there’s certainly no description of the rationale for the program or its
values.</p>
<hr />
<p>The rationale is this: I very much like the core idea of the note system, as
it’s presented in <code>zek</code>: a flat directory of text files, linked to other ones
(a Wiki, so far), and comprehensively and automatically <em>backlinked</em> as well
(not so much a Wiki); and a time-ordered index to bind them all together.</p>
<p>But in my mind, vim is already a wonderful tool for writing text. There’s
absolutely no need to reimplement a text editor if text files are your medium
of choice. And with <code>gf</code>, it’s not a half-bad one for navigating the links
either.</p>
<p>What’s left is actually quite small. You simply need a program that will scan
all the text files in a directory, find all the [square brackets references],
create a quasi-organized list of filenames corresponding to those square
brackets as metadata in the files themselves, and create a quasi-organized list
of all the filenames containing references to <em>this</em> file in them too. You can
do all that with awk. The distinctive <code>%ref:</code> syntax is just to make it easy to
filter those lines out when you generate a new generation of the file.</p>
<hr />
<p>Nevertheless, I do think there’s a lot of worth in actually writing a
specification of some sort, as I’ve done above.</p>
<p>One reason is: there’s an entire largely-unpracticed art of <em>describing</em>
programs rather than <em>writing</em> them. The most successful example that comes to
mind is <a href="http://cr.yp.to/redo.html"><code>redo</code></a>, as conceived by the brilliant D.
J. Bernstein. <code>redo</code> is a program that Bernstein didn’t (or we might say,
didn’t bother to) write; he merely described a hypothetical program with enough
clarity that there are <a href="https://github.com/apenwarr/redo">at least</a>
<a href="https://github.com/leahneukirchen/redo-c">two</a> existing implementations of the
system, written by others. I like this idea; it would tickle me pink to see
others write the program that I’ve described and compare it to the program in
my head.</p>
<p>Another, though, is that I maintain there’s enormous worth in thinking
critically and deeply about a program <em>before</em> one writes it. There is an
extent to which idle shower thoughts fulfill this role. But there are other,
deeper ways to think about parts of a program like its core primitives, its
vocabulary, its invariants, its edge cases, its sequence of operations, and so
on, and we rarely as a field avail ourselves of them.</p>
<p>There’s the whole subfield of <a href="https://www.hillelwayne.com/">formal methods</a>, of course, but I
think you’ll agree that the above document is business casual methods at best.
This is Formal Methods Ultralite, and I think it has some worth; in fact I
think part of its worth is how lightweight it is. I knocked that out in an hour.</p>
<hr />
<p>And yet: I understand the program more deeply now than when I wrote it.</p>
<p>The first step is, add the English last. The English is for the reader, but
it’s best written only after one is confident that one fully understands what
they’re about to describe. Otherwise, natural language has a tendency to infect
thought; because we have a name or a phrase to encompass something, we think we
understand it; but natural language is full of ambiguities, pronouns without
clear referents, double meanings, unclear phrasing, and more.</p>
<p>Indeed, the style that Pantagruel encourages is a naturally explanatory one. I
start by describing, quasi-formally, the behaviour of the program in a
“sentence” or two. In doing so, two things happen:</p>
<ol>
<li>
<p>The formality begins to work its magic. Things that are easy to express in
English are harder to express in the sentence structures of first-order
logic, and that’s often because the English thoughts refer to things without
introducing them, and the like. So I have to introduce things and then I
realize I haven’t thought through all of their contours.</p>
</li>
<li>
<p>I introduce some new terminology. To explain my program at a high level, I
necessarily refer to certain other qualities or concepts. When I run <code>pant</code>,
I get this error message:</p>
<pre><code>error: Unglossed symbols:

name, references, created_at, body, backlinks, ref_note, Index
</code></pre>
<p>So, this is the next layer down. These are the concepts I must elaborate on;
left to my own devices, I might have remembered to explain some of them, but
probably not all.</p>
</li>
</ol>
<p>So I introduce a new chapter and continue the process. I recurse, until I hit
the leaves. That is: I run <code>pant</code> and I see no error message. There are no
terms left to explain. I’m sure I don’t need to mention that it is through the
act of explanation that we stumble on every notion we don’t actually
understand, even though we think we did, and are forced to clarify it for
ourselves, and in doing so are often shown exactly which two concepts are
subtly incompatible, which definition is used differently in different places,
and so forth.</p>
<hr />
<p>All of this without writing any code. All, in fact, without even having decided
what language I’ll use to write it. I say this <em>not</em> in the sense of “it’s just
that easy!” I am not a believer in the no-code revolution. I like code. Indeed,
that’s the problem: code is powerful and seductive and has its own gravity.
Putting ideas into code makes them <em>real</em> and gives them an inertia, even if
they’re the wrong ideas. Thinking about things beforehand is a valuable
practice. It’s valuable because it can be a much higher-leverage way to figure
them out than to write a whole program until you realize you didn’t understand
the assignment; it’s also valuable because they <em>remain ideas</em>. And in a
language like Pantagruel, they’re short little sentences, little bits of
pseudo-math. They’re easy to edit. They’re easy to type, to write on a
whiteboard or notebook, and easy to erase and change.</p>
</content>
</entry>
<entry>
  <title>Algorithms I'm Proud Of: Fill</title>
  <link href="https://blog.zdsmith.com/posts/algorithms-im-proud-of-fill.html" />
  <id>https://blog.zdsmith.com/posts/algorithms-im-proud-of-fill.html</id>
  <updated>2021-03-20T00:00:00.00Z</updated>
  <content><blockquote>
<p>Array logic operates by a <code>fill</code> algorithm. Fill the ds with the
smaller rank to the be the same shape as the ds with the larger.</p>
</blockquote>
<p>I recently released—so to speak—a new project that has occupied
the last several weeks of my free time: a calculator program, called
<a href="https://ec-calc.com">EC</a>.</p>
<p>I decided to build it for a few reasons. Probably the first reason is
that it seemed to be a good use-case for the project I had been
working on for the <em>prior</em> few weeks: <a href="https://fugue.soy">Fugue</a>, an object system for
the Janet programming language. I had settled on the basic approach
and feature set, and built a little <a href="https://git.sr.ht/~subsetpark/the-brzozowski-variations">proof of concept</a>, but
obviously if I was going to herald this as the spiritual successor to
<a href="https://lispcookbook.github.io/cl-cookbook/clos.html">CLOS</a> it would behoove me to put it through its paces more
substantially.</p>
<p>A little desk calculator struck me as a nice, mid-sized project, with
enough potential for object-orientation that it could potentially
benefit from what Fugue offers. It’s quite difficult to think of
useful software to write; it’s much easier to think of useful software
libraries, that will help other people make useful software.</p>
<p>After I thought of it, it seemed like I could create a sequel to a
previous project of mine, <a href="https://github.com/subsetpark/ad"><code>ad</code></a><sup class="footnote-ref"><a href="#fn1" id="fnref1">1</a></sup>. I use <code>ad</code> all the
time whenever I need to do one-off arithmetic, so I actually have a
vague sense of what I’d like to add to it.</p>
<h2>Array Math</h2>
<p>The <a href="https://www.jsoftware.com/">J language</a>, of which I am a great admirer, though essentially
hopeless as a practitioner, has a thorough and powerful <em>array orientation</em>.
You can do all kinds of brilliant things with arrays and
matrices, manipulating multi-dimensional groups of numbers just as
though they were individual numbers. Here’s a tiny snippet:</p>
<pre><code class="language-J">   (2 3 $ 3 0 0) + 1
4 1 1
4 1 1
</code></pre>
<p>In the first line, we take the array <code>3 0 0</code> and <em>shape</em> it into the
shape <code>2 3</code>, that is, into a two-dimensional matrix with two rows and
three columns. We then add 1 to that entire matrix, which is
equivalent to adding 1 to each element of the matrix.</p>
<p>In J, there isn’t any need to <em>map</em> a function like <code>(lambda (x) (+ x 1))</code>
over the matrix; the <code>+</code> operator is “matrix-aware” and has a
built-in semantics for how to apply itself to a 2d matrix on the left
side and a single number on the right.<sup class="footnote-ref"><a href="#fn2" id="fnref2">2</a></sup></p>
<p>It would be useful to be able to incorporate this kind of behaviour
into <code>ad</code>‘s successor. EC is still an RPN, stack-based program, and
thus we can’t have J’s pervasive array-orientation; in the J example
we get an array “for free” any time we separate two or more numbers
with a space. We need spaces to separate all tokens in a stack-based
language. Nevertheless, the ability to add, multiply, square,
etc. operands of any dimensions would be very much in keeping for a
desk calculator designed to be powerful and convenient.</p>
<h3>The Fill Algorithm</h3>
<p>When I decided I’d like to build this program, my mind set off on it
and wouldn’t be dissuaded. The quotation at the top of this article is
a text I sent to myself on February 17 at 11:35pm, after a sleepless
hour or so (typo included). Surprisingly, the initial commit is not
until the next day. So I had started entirely conceptually.</p>
<p>In point of fact, I’m quite weak when it comes to algorithmic
thinking. My mind starts swimming and losing track of things very
easily. And I had no idea how you might accomplish this kind of
“dimension-agnostic” logic; it seemed kind of magic the last time I
had played around in the J REPL.</p>
<p>That said, I did come primed with one piece of knowledge: in J, arrays
have a <em>shape</em>, which is itself a 1-dimensional array listing the
length of each dimension of the original array. For instance, as
above, an array with shape <code>2 3</code> is a 2-by-3 matrix; one with <code>2 3 3</code>
is a 3-dimensional, 2-by-3-by-3 one. We can follow that to its logical
conclusion: if a simple list is a 1-dimensional array, its shape
should also be a list, with a single element, which is the length of
the list. Finally, that means that the shape of a simple number should
be the empty list.</p>
<p>The key to the algorithm that occurred to me, like so many of them,
feels kind of like a cheat. I simply can’t conceptualize of a way to
“apply” an array of dimensionality N to an array of dimensionality
M. Addition, to take the simplest operation I can think of, only makes
sense to me when applied to two numbers. And trying to somehow imagine
how to “do the right thing” when one of the operands is a list and the
other is a 4-dimensional matrix just hurts my head. Therefore, let’s
approach that problem from the other direction; instead of figuring
out how to add a list and a matrix, or a matrix and a number, what if
we just made them both the same exact shape? Then you’d have a
one-to-one correspondence between elements and the actual addition
would be trivial.</p>
<p>Again, I can barely conceptualize what it would mean to “resize” a
list into a 4-d matrix. <em>But</em> it’s pretty easy to conceptualize what
resizing <code>1</code> looks like in the example <code>(2 3 $ 3 0 0) + 1</code>. You just
repeat <code>1</code> a bunch of times until you’ve filled out the whole
shape. It seems incredibly wasteful to create all those <code>1</code>s, but
conceptually it’s quite simple.</p>
<p>If we follow that thread, we can start to generalize the concept
without hurting our brains too much. If filling <code>1</code> out to the size of
a 6-element list is simply repeating <code>1</code> 6 times, then filling <code>3 0 0</code>
to a matrix of shape <code>2 3</code> should be simply repeating <code>3 0 0</code>
twice. And indeed it is:</p>
<pre><code class="language-J">   2 3 $ 3 0 0
3 0 0
3 0 0
</code></pre>
<h3>Fills in EC</h3>
<p>At this point we depart from J as a useful model. In fact, J has a
sophisticated and flexible approach to applying dyadic operators
between arrays of differing shapes. It allows the user to select the
“rank” across which they want to apply the operator, so that the
behaviour implemented in EC is only one of the possible solutions to
the problem.</p>
<p>That said, the <em>fill</em> algorithm provides a generalizable approach to
the problem of applying an operation to operands of differing
shape. Given any two vector-or-numbers, fill the smaller-dimensioned
one to the shape of the greater-dimensioned one and then apply the
operation pairwise.</p>
<p>It’s important to note that this imposes a significant constraint: the
shape of the smaller one has to be a suffix of the shape of the
greater one. For instance, a vector of shape <code>3</code> could be filled to a
matrix of shape <code>2 3</code> by repeating it twice; however, a vector of
shape <code>4</code> couldn’t be filled to <code>2 3</code>.</p>
<p>I’m happy with this. It addresses the most important case, that of
operating on a matrix of any arbitrary size and a single number (the
shape of a single number is <code>[]</code>, the empty vector, which is trivially
a suffix of any other shape), and there’s no special-casing for any
specific dimensionality.</p>
<h3><code>fill</code> in Janet</h3>
<p>Once I had that basic conceptual orientation, I actually found myself
articulating the entire algorithm (in prose) in texts to myself. It
may simply be a trick of the mind, but to me there is some proof in
the “rightness” (I hesitate to say “correctness”!) of the algorithm in
the fact that it seemed to unfold naturally, at a conceptual level,
once I had oriented my thinking correctly around the topic. The
resulting code is a very faithful translation of the texts I sent to
myself.<sup class="footnote-ref"><a href="#fn3" id="fnref3">3</a></sup></p>
<p>What leaves me feeling good about this as an approach is that the code
for <code>fill</code> is concise and elegant. Here is the function that, given a
Vector object and a shape to fill it to (expressed as an array of
numbers), returns a new Vector of the original data filled to the new
shape:</p>
<pre><code class="language-lisp">(defmethod fill Vector
  [self shape-to-fill]
  (let [x (array ;(shape self))
        y (array ;shape-to-fill)]

    (while (not (empty? x))
      (let [xi (array/pop x)
            yi (array/pop y)]
        (unless (= xi yi)
          (errorf &quot;Shape error: can't fill vector with shape %q to %q&quot;
                  (shape self) shape-to-fill))))

    (reduce (fn [acc length]
              (let [new-shape (tuple length ;(shape acc))
                    new-data (array/new-filled length acc)]
                (:new Vector new-shape new-data)))
            self
            (reverse y))))
</code></pre>
<p>The algorithm is very short:</p>
<ol>
<li>Start with the shape of the Vector and the shape to be filled into.</li>
<li>Repeatedly pop elements off of both until the Vector’s shape is
consumed; the resulting mutation of the new shape will be the
dimensions to expand the original data into.</li>
<li>Recurse backwards across the dimensions, repeating the accumulator
<code>n</code> times on each step.</li>
</ol>
<h3>EC in Action</h3>
<p>I can now demonstrate the above J behaviour as translated into EC.</p>
<p>EC, it should be noted, is written in RPN notation, rather than J’s
infix notation, so the operations should be read from left to
right. EC Vectors are denoted with square brackets <code>[]</code>, as spaces
separate stack tokens. The value in between the angle brackets <code>&lt;&gt;</code> on
the left side of the prompt show the current top value in the stack.</p>
<pre><code class="language-forth">&lt;&gt; $ [3 0 0] [2 3] fill 
&lt;[[3 0 0] [3 0 0]]&gt; $ 1 +
&lt;[[4 1 1] [4 1 1]]&gt; $ 
</code></pre>
<p>I’ve done the operation in two steps, so you can see the matrix that
<code>1 +</code> is applied against; it can just as easily be written <code>[3 0 0] [2 3] fill 1 +</code>. We see the same sequence as in the J code: you can
<code>fill</code> any data structure to any shape, subject to the suffix
constraint named above; and any two data structures can be applied to
an operator like <code>+</code> as long as the smaller-shaped of the two—in this
case, the number <code>1</code>—is fillable to shape of the larger.</p>
<h2>Addendum: Some Words on Fugue</h2>
<p>We see above an example of the Fugue framework in the form of
<code>defmethod</code>. In the <a href="https://git.sr.ht/~subsetpark/ec/tree/master/item/src/calc.janet">EC code</a>, <code>Vector</code> is a Fugue <em>prototype</em>, and
<code>fill</code> is a method specialized to <code>Vector</code>. Janet’s OO functionality
is built on prototypal inheritance (as opposed to class-based
inheritance), and thus in Fugue one defines prototype hierarchies. In
EC, <code>Vector</code> is a child of <code>Quotation</code>, which is a child of <code>Element</code>.</p>
<p>Fugue offers two ways to define prototype-based behaviour,
corresponding to the two major types of behaviour specialization in
object-oriented systems: <em>methods</em> and <em>multimethods</em>.</p>
<p><em>Methods</em> are functions which are assigned directly to prototype
objects (in prototypal inheritance, there are no distinct classes,
only objects which other objects designate as their prototypes), and
which are therefore inherited by any descendant object of the
prototype. Janet provides a native way of calling these assigned
functions; syntax like <code>(:foo bar baz)</code>, where <code>:foo</code> is a keyword
instead of a regular symbol, translates to <code>((get bar :foo) bar baz)</code>.</p>
<p>In EC, we implement <code>fill</code> as a method on <code>Number</code> and <code>Vector</code>, so a
call like <code>(:fill (:new Integer 4) [2])</code> will be
prototype-aware. (<code>Integer</code>, is a child of <code>Number</code>, of course!)</p>
<p>The <code>defmethod</code> macro also defines <code>fill</code> as a function that calls
<code>:fill</code>, for added convenience.</p>
<p><em>Multimethods</em> can be specialized against the types (or prototypes) of
<em>all</em> of their arguments. Instead of being defined for some prototype
(and inserted as a method in that prototype table, to be inherited by
its descendants), any individual multimethod instance is defined for
the type of each of its arguments. Thus, for instance, a multimethod
might be defined separately against <code>[Quotation Number]</code> and <code>[Vector Number]</code>.<sup class="footnote-ref"><a href="#fn4" id="fnref4">4</a></sup> <sup class="footnote-ref"><a href="#fn5" id="fnref5">5</a></sup></p>
<p>EC has turned out to be an excellent testbed for developing and
testing Fugue; it offered some natural opportunities to use almost all
of Fugue’s features, and over the course of developing EC I hit a
bunch of new problems that suggested natural extensions of the
existing feature set. By the time I was finished, I felt quite
comfortable defining the feature set of Fugue 1.0 as “that which is
sufficient to build EC”.</p>
<section class="footnotes">
<ol>
<li id="fn1">
<p><code>ad</code> is so-called because it comes after <code>bc</code>, the
venerable calculator program. My partner suggested <code>ce</code> as further
development of the naming scheme, which I think is quite
good. Somewhere, however, between that suggestion and my creating
the repo, I unconsciously transposed the letters, and didn’t
notice until a little while later. <a href="#fnref1" class="footnote-backref">↩</a></p>
</li>
<li id="fn2">
<p>In fact (unsurprisingly), the array behaviours of J are
far, far richer than in this example, and far richer than what
will be demonstrated in the rest of the post. While it’s possible
that we might be able to incrementally increase the power of
shaping and filling in EC, we will certainly not take a language
as powerful and subtle as J as our point of comparison. <a href="#fnref2" class="footnote-backref">↩</a></p>
</li>
<li id="fn3">
<ul>
<li>Call them x and y<br />
Feb 17 11:35pm</li>
<li>Take shape x and shape y<br />
Feb 17 11:35pm</li>
<li>Reverse both<br />
Feb 17 11:35pm</li>
<li>Assert that sx is a prefix of sy. Else: shape error<br />
Feb 17 11:36pm</li>
<li>Consume the prefix of sy. Reduce over the remainder with x as the accumulator.<br />
Feb 17 11:37pm</li>
<li>At each iteration , call the shape level sy1 sy2 … syn, (cycle acc syn)<br />
Feb 17 11:38pm</li>
</ul>
<a href="#fnref3" class="footnote-backref">↩</a>
</li>
<li id="fn4">
<p>I think of this as operating along the horizontal axis rather
than the vertical; multimethods trade the ability to exploit
inheritance (a vertical orientation) in dispatch for the ability to
dispatch across the entire (horizontal) sequence of argument types
together. <a href="#fnref4" class="footnote-backref">↩</a></p>
</li>
<li id="fn5">
<p>For completeness’s sake, I’ll mention that
multimethods come in two flavors in Fugue: <em>closed</em> and
<em>open</em>. Closed multimethods are defined within a single module and
can’t be extended by other callers; thus, they’re roughly
analogous to a multi-function-head, pattern-matching system like
what you get in Erlang and Elixir.</p>
<p>Open multimethods, on the other hand, are declared once and then
can be extended with new cases from anywhere in the
codebase. They’re thus closer to what are sometimes known as
<em>protocols</em>, in that they provide a way to extend the behaviour of
a function with respect to data types that didn’t exist when the
function was declared.</p>
<p>In EC there are examples of both: pretty-printing terms is defined
as a multimethod, while the <code>push</code> function (which handles pushing
some term to the stack) is an open multimethod that picks up new
definitions as new data types are developed. <a href="#fnref5" class="footnote-backref">↩</a></p>
</li>
</ol>
</section>
</content>
</entry>
<entry>
  <title>Bagatto, a New Static Site Generator</title>
  <link href="https://blog.zdsmith.com/posts/bagatto-a-new-static-site-generator.html" />
  <id>https://blog.zdsmith.com/posts/bagatto-a-new-static-site-generator.html</id>
  <updated>2020-12-10T00:00:00.00Z</updated>
  <content><p>The last few weeks I’ve been in a bit of a ferment of inspiration. The
output of my fermentation has been <a href="https://bagatto.co/">Bagatto</a>, a static site
generator written in the Lisp <a href="https://janet-lang.org/">Janet</a>.</p>
<p>To the uninitiated: an SSG is a program for building websites. You
maintain a bunch of source files—blog posts written in Markdown, for
instance—and run your SSG to create a bunch of HTML out of them. You
upload the html somewhere and that’s the website.</p>
<p>Here’s the source of this blog: <a href="https://git.sr.ht/~subsetpark/subsetpark">https://git.sr.ht/~subsetpark/subsetpark</a></p>
<h2>Background</h2>
<p>Before it occurred to me to do this I was using <a href="https://github.com/gar1t/lambdapad">LambdaPad</a>, an
SSG written in Erlang. The idea with LambdaPad is, you maintain an
Erlang source file, <code>index.erl</code>, that defines your
site in terms of a couple simple data structures. When you run
LambdaPad, it will evaluate your index file and interpret the values
it defines as instructions for generating your site. For the truly
interested, you can view the LambdaPad version of this same site
<a href="https://chiselapp.com/user/subsetpark/repository/subsetpark/tree?ci=47dd2022bc408b8a">here</a>.</p>
<p>This is a very appealing model to me, for two main reasons: 1) you
<em>don’t</em> need to learn a new configuration language, 2) you <em>do</em> get to
take advantage of a whole programming language in defining your site.</p>
<p>To take literally the first example that springs to mind, if we look
at the quickstart for <a href="https://gohugo.io/getting-started/quick-start/">Hugo</a>, a very popular program in Go for
doing much the same thing, we see that one does not actually write
much Go when defining a site. This sort of thing has always struck me
as a bit odd; Hugo is identified very much with the language its
written in—and generally SSGs are: Jekyll for Ruby, Pelican for
Python, et cetera—and yet the process of building a site in Hugo
involves writing to a <code>config.toml</code> file and running <code>hugo new</code>
commands.</p>
<p>There’s nothing inherently wrong with this approach. Hugo is no doubt
a robust and reliable program, and anyone who doesn’t know a
programming language, or doesn’t want to do programming when they
build their website, will benefit greatly from its design. I simply
don’t fall into that camp. I hate writing config files, I like
programming, but more importantly, I <em>really</em> like the fact that I can
use a programming language to make it <em>easier</em> to write a website that
does what I want.</p>
<p>The <a href="../notes/index.html">notes</a> section of this website, for instance, is also
statically generated from source Markdown. But it goes through a layer
of processing in the journey from Markdown to HTML, with notes being
collated and cross-referenced to other notes based on their
contents. In Erlang, this is accomplished by running some regexps on
the note text and replacing the content strings with other Markdown
links. In other words, a little basic programming.</p>
<p>Nevertheless, there were a few itches that had grown over my time
using LambdaPad. What’s interesting is that they all derived from the
same sort of thing I’m discussing above. Even though LambdaPad is much
more code-oriented than config-oriented, it still relies on <em>indirect action</em>
in a number of places. Each of these places offers a degree of convenience
and simplicity, but eventually became a stumbling block.</p>
<p>LambdaPad, for instance, looks for a file called <code>index.erl</code> in the
current directory. This is convenient because you can simply run
<code>lpad-gen</code> in the current directory to build
everything. Unfortunately, it presents an artificial constraint on
organizing your code. If you want to manage your source files with
<a href="https://github.com/erlang/rebar3">rebar3</a> you’ll want to have your Erlang source in <code>src/</code>, which
means rebar3 and LambdaPad are in conflict.</p>
<p>Similarly, we can see that the data specification in my LambdaPad
index consists of lines like this:</p>
<pre><code class="language-erl">      notes =&gt; {markdown, &quot;notes/*.md&quot;},
</code></pre>
<p>That’s a key-value pair mapping an atom to a tuple of an atom and
string. This is concise and easy to write. But it also doesn’t
actually <em>do</em> anything; it’s just a couple literal terms. The actual
mechanism of loading source files exists entirely inside of the
LambdaPad package. I pass it a tagged value, giving the name of the
data loader I want it to use, and everything else happens under the
covers.</p>
<p>Thus, the moment that I was reading on Lobsters about <a href="https://asciidoc.org/">AsciiDoc</a>
and wanted to look into how much lift it would be to use that instead
of Markdown. As it happens, I couldn’t, really. The output of the
<code>data/1</code> function in a LambdaPad module is not the source data to
generate the site; it’s a DSL constituting instructions for generating
that source data.</p>
<h2>Principles for a new SSG</h2>
<p>A philosophical orientation is beginning to form here. If we’re going
to write <a href="https://erikwinter.nl/articles/2020/why-i-built-my-own-shitty-static-site-generator/">yet another Static Site
Generator</a>—and
god knows, there are <a href="https://jamstack.org/generators/"><em>so many of
them</em></a>—can we orient ourselves
around a pervasive sense of <strong>transparency</strong>? That is, to the greatest
extent, how can we expose to a site author a programming environment
where the inputs and the outputs of the system as a whole, and of each
individual step, are entirely inspectable, observable, and extensible?</p>
<p>Arguably, to do so, we need to develop some sort of theory of what the
inputs and the outputs of an SSG are. So let’s say:</p>
<ul>
<li>
<p>The inputs to an SSG are a heterogeneous collection of source data
files. Many of these will be long-form posts or articles, but even
those are a special case of a more general bag of attributes (like a
JSON file containing the title and author’s name of your site).</p>
</li>
<li>
<p>The output of an SSG is a list of files to be generated. A
file-to-be-generated consists of exactly two things: the path of the
new file, and the contents of the new file. This is an important and
pleasing simplification: in a website, there are no such things as
posts, or pages, or indices. There are only <code>(file path, file contents)</code> pairs. If the domain model of your site can’t be reduced
to one of those, it won’t exist in your website.</p>
</li>
</ul>
<h3>Functions</h3>
<p>At this point the way forward feels pretty clear. We have two
phases—the input phase and the output phase—and we know what kind
of data each one should contain. If I want to provide that data as a
site author, in a way that allows me to conveniently inspect and
arbitrarily transform what I’m providing, the simplest method is with
ordinary functions.</p>
<p>This is the departure from the model I had been using in
LambdaPad. Even though my <code>index.erl</code> is an Erlang file, if I were to
open it in the Erlang shell and invoke my <code>data/1</code> function, I’d just
get some dead terms out. On the other hand, if the terms in my
<code>data/1</code> were functions which output the actual site data, then at any
point I could run just those functions and see exactly what the
outputs would be. And I could trivially wrap those functions in any
other business logic to arbitrarily transform them as I needed.</p>
<p>The same principle goes for the output phase. If the return value of
my <code>site/1</code> function<sup class="footnote-ref"><a href="#fn1" id="fnref1">1</a></sup> is atom and tuple values constituting
a configuration language, describing which built-in file-generation
tools should be called and with what inputs, then the actual output of
those tools is obscured from me until it shows up in my file tree. But
passing in callable, wrappable functions means that there’s no part of
the process that’s off-limits.</p>
<p>In other words: instead of providing a configuration language, we
should provide a <em>standard library</em>. A collection of functions with a
few well-defined signatures that can be easily composed and
extended. And we should ensure that the signatures are transparent and
simple enough that it’s trivial to write new ones that do new things.</p>
<p>As an example: we saw above how to specify input files and their
parsers in LambdaPad: <code>{markdown, &quot;notes/*.md&quot;}</code>. We are locked out
from adding an <code>asciidoc</code> parser.</p>
<p>On the other hand, if we imagine that the Markdown parser were a
function, specified directly, that looked like this:</p>
<pre><code class="language-erl">parse_markdown(Contents, Attributes) -&gt;
    Metadata = read_front_matter(Contents),
    maps:merge(Attributes, Metadata).
</code></pre>
<p>And were specified like this:</p>
<pre><code class="language-erl">notes =&gt; {loader =&gt; load_glob(&quot;notes/*&quot;),
          parser =&gt; fun parse_markdown/2},
</code></pre>
<p>Then we could write a new AsciiDoc parser which ran <a href="https://asciidoctor.org/">Asciidoctor</a>
on <code>Contents</code> and merged the resulting metadata, and specify that
directly as the value for <code>parser</code>.</p>
<h2>Bagatto</h2>
<p>This is the basic approach I’ve taken when building Bagatto: a new
Static Site Generator written in Janet, which interprets a Janet file
much in the same way that LambdaPad interprets Erlang.</p>
<p>For instance, here’s the equivalent specification for the Notes
section of this blog:</p>
<pre><code class="language-clj">:notes {:src (bagatto/slurp-* &quot;notes/*.md&quot;)
        :attrs notes/parse-note
        :transform (bagatto/attr-sorter &quot;topic&quot;)}
</code></pre>
<p><code>notes/parse-note</code> is a function. <code>bagatto/slurp-*</code> and
<code>bagatto/attr-sorter</code> are both provided as a part of the Bagatto
“standard library”, but they themselves are higher-order-functions
which return other functions. So any of these values can be directly
evaluated and inspected in a REPL, or wrapped to transform their
output.</p>
<h3>On Lisp</h3>
<p>I find Janet to be tremendously well-suited to the task at hand. There
are a couple reasons. Maybe the simplest is speed: unlike Erlang,
there’s no heavy VM or runtime to load, so Bagatto starts up very
quickly. Important for a command-line application.</p>
<p>But Janet is also a Lisp, and Lisps tend to be very good at
interpreting themselves without having to do too much
sleight-of-hand. So it’s a natural fit for any application model where
you write a program to make it run, and the application itself becomes
a slightly specialized interpreter.</p>
<p>It was very important to me that the author be able to assume, in the
greatest number of cases, that their Janet index file would behave
identically to a normal Janet program under interpretation. This
extends to things like being able to manage external dependencies with
<a href="https://janet-lang.org/docs/jpm.html"><code>jpm</code></a>, and structure one’s
modules as one would structure any other Janet package. The inherent
availability of the compilation apparatus at all times makes this much
more feasible.</p>
<h3>Temple, the Janet template language</h3>
<p>At first I was a bit disappointed to see the state of HTML templating
in Janet. I had rather hoped to be able to use something like Jinja or
Django templates, as that is what I’d used in the past and I wanted
Bagatto to be transparent and agnostic, and not to ipose its own
conventions or DSLs on a site author. However, those aren’t really
available in a native way. There’s <a href="https://github.com/pyrmont/musty/">musty</a>, which is a partial
version of <a href="http://mustache.github.io/">Mustache</a>, and there’s <a href="https://git.sr.ht/~bakpakin/temple">Temple</a>, which is Janet
specific.</p>
<h4>Django templates, Jinja, ERB, EEX</h4>
<p>However, here’s the thing about something Django templates or Jinja:
they’re actually awful. Here’s an example of a Django template I was
using for notes:</p>
<pre><code class="language-html">      &lt;h1&gt;{{ note.topic }}&lt;/h1&gt;
      {{ note|with_hyperlinks:all_notes|markdown_to_html }}
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;hr&gt;
    {% related_notes note all_notes %}
</code></pre>
<p><code>with_hyperlinks</code> and <code>related_notes</code> are functions I defined in my
<code>index.erl</code>, so it’s tremendously useful to be able to call your
native code from the template. But what’s with the syntax there? Pipes
I understand, though obviously that’s a shell-ism that has little to
do with Erlang or HTML. But why does <code>with_hyperlinks</code> take an
argument with a <code>:</code> while <code>related_notes</code> takes arguments with spaces?
Maybe something to do with <code>{{ }}</code> vs <code>{% %}</code>? Truly I don’t
know. Every Django template I’ve ever written has been write-once. And
of course, being able to call native functions is not the same as
having native syntax; Django templates, or Jinja templates for that
matter, expose their own limited control flow primitives, <code>for</code> and
suchlike. This is another element that I have found both underpowered
and nearly impossible to remember.</p>
<p>An alternative approach is presented by template languages like
<a href="https://puppet.com/docs/puppet/5.5/lang_template_erb.html">ERB</a> (I’m more familiar with the Elixir version, but it’s clearly a
descendent of ERB, so I’ll refer to that one instead). Here’s a snippet:</p>
<pre><code>&lt;% unless @keys_trusted.empty? -%&gt;
trustedkey &lt;%= @keys_trusted.join(' ') %&gt;
&lt;% end -%&gt;
</code></pre>
<p>Unlike Django templates, ERB <em>does</em> expose the full syntactic power of
Ruby in your template. This is wonderful. On the other hand, this
additional power and intermingling of syntaxes means that the escaping
language becomes much more complex.</p>
<p>Now, again: I have been writing EEX (which operates along similar
principles) off-and-on for more than two years. I <em>barely</em> understand
the difference between <code>&lt;% %&gt;</code> and <code>&lt;%= %&gt;</code>. The latter inserts text
into the template and the former doesn’t, but that understanding
doesn’t prevent me from constantly failing to understand what my
templates are doing. I lay much of the blame for this on the shoulders
of this family’s intermingling of escaped and plaintext within a
<em>single syntactic construct</em>. You can see that above: even though
<code>unless</code> and <code>end</code> form the two ends of a single syntax block, they
are both contained in separate angle-brackets tags and there’s both
untemplated text as well as a separate template tag between them. This
sort of thing makes my head hurt.</p>
<h4>Temple</h4>
<p>So when I realized that Temple works differently, I was excited. The
requirement to learn a new template language is well worth it because
this one is much better than those.</p>
<p>Here’s the equivalent to the notes snippet above in my Temple version:</p>
<pre><code class="language-clj">&lt;div class=&quot;row&quot;&gt;
  &lt;div class=&quot;col-md-7&quot;&gt;
    &lt;h1&gt;{{ (get-in args [:_item &quot;title&quot;]) }}&lt;/h1&gt;
    {- (-&gt; (get-in args [:_item]) 
           (with-hyperlinks (args :notes)) 
           (bagatto/mmarkdown-&gt;html)) -}
  &lt;/div&gt;
&lt;/div&gt;
{% (def related-notes (all-related (args :notes) (args :_item)))
   (unless (empty? related-notes) (print &quot;&lt;hr&gt;&quot;))
   (print-related related-notes (args :_item) (args :root)) %}
</code></pre>
<p>We can see that the <code>&lt;h1&gt;</code> tag has the same simple <code>{{ }}</code>
interpolation. The value of the expression between the curly braces is
interpolated directly into the HTML. However, we get to use the exact
same Janet syntax rather than this quasi-Python-syle interloper.</p>
<p>However. Let’s turn to the bottom of the template where we have a more
complicated piece of logic. It too uses native Janet syntax. But it is
crucially different from ERB. In this piece of Janet, <em>everything</em> is
contained within a single <code>{% %}</code> delimiter. Syntactically it is whole
and easy to read. You could copy it out of this file and into the
interpreter and it would parse perfectly. That’s because Temple
doesn’t need to constantly flip back and forth from tag to text in
order to interpolate text from within Janet code. It simply uses
<code>print</code>.</p>
<p><code>print</code>! When Temple evaluates a template, it inserts everything into
the template that’s written out to stdio! What a brilliant idea! I
immediately understand what is being output and what isn’t. And I
don’t need to break up my syntax into unconnected blocks.</p>
<p>What a pleasure. Having rewritten all my Django templates into Temple,
I have such a greater degree of confidence in them. I can update them
much more easily. I wish I could do the same for my EEX templates, but
I think my coworkers would object.</p>
<h2>Transparent, extensible</h2>
<p>I hope I’ve done a good enough job of communicating the values and
philosophy of Bagatto. I feel quite good about it. I feel more
productive using it, and I feel that it is a faithful expression of
the rationale that I’ve laid out here. Perhaps you might feel the
same.</p>
<section class="footnotes">
<ol>
<li id="fn1">
<p>LambdaPad expects the presence of two functions in your
<code>index.erl</code>: <code>data/1</code> and <code>site/1</code>. These are expected to return,
respectively, the specifications for the input to the site
generation phase and the output of the site generation phase (ie,
the generated files and their contents). <a href="#fnref1" class="footnote-backref">↩</a></p>
</li>
</ol>
</section>
</content>
</entry>
<entry>
  <title>A Regular Simplification of Offenbacher Schrift</title>
  <link href="https://blog.zdsmith.com/posts/a-regular-simplification-of-offenbacher-schrift.html" />
  <id>https://blog.zdsmith.com/posts/a-regular-simplification-of-offenbacher-schrift.html</id>
  <updated>2020-11-22T00:00:00.00Z</updated>
  <content><p><img src="../images/offenbacher.jpg" alt="The Offenbacher Schrift Alphabet" /></p>
<p>Above is a sample of <em>Offenbacher Schrift</em>, a style of handwriting
designed by the type designer (and, regrettably, enthusiastic German
nationalist), <a href="https://en.wikipedia.org/wiki/Rudolf_Koch">Rudolf
Koch</a>. Offenbacher Schrift
was arguably the final incarnation of the venerable German handwriting
style known as <a href="https://en.wikipedia.org/wiki/Kurrent">Kurrent</a>, a
tradition particular to German-speaking areas for hundreds of years,
up until the Nazis fucked it up in some historically interesting
ways. It’s closely related also to
<a href="https://en.wikipedia.org/wiki/S%C3%BCtterlin">Sütterlin</a>, which was
the dominant form of Kurrent in its final flowering.</p>
<p>One of the attractive and interesting qualities of the Kurrent
scripts, especially in comparison to English cursive, is their
abhorrence of re-crossing and overlapping lines. For instance, the
lower-case <em>c</em>: <a href="https://loopsandtails.com/cursive/cc/">in English cursive</a>, the pen, starting
from the lower-left, slopes up to the top part of the c, and then
doubles back along the same line to make the bottom part. This is
studiously avoided in the Sütterlinschrift, which opts for the single
<a href="https://en.wikipedia.org/wiki/Minim_(palaeography)">minim</a>.</p>
<p>It’s also this quality that is responsible for Offenbacher’s most
extravagant peculiarities. There’s a lot that’s attractive about it
(I’m someone who also has a lot of difficulty with those parts of the
letter that have to cross over each other; when writing in cursive, I
usually pick up the pen and start again when I have to write an <em>a</em>,
<em>c</em>, <em>d</em>, <em>g</em>—in other words, when I have to cross from the bottom
left to the upper right in order to start a letter), but unmodified,
Kurrent is a little too eccentric to the Anglophone eye.</p>
<p>Let’s take a look at the eccentrics, <em>a</em> <em>g</em> <em>q</em>:</p>
<p><img src="../images/offenbacher-agq.png" alt="Offenbacher: a, g, q" /></p>
<p>And <em>r</em> <em>v</em> <em>w</em> <em>y</em>:</p>
<p><img src="../images/offenbacher-rvwy.png" alt="Offenbacher: r, v, w, y" /></p>
<p>We can see what’s happening here. In each case, the letter has
acquired a little gap in it: in the top row, it bows downwards, and in
the bottom row, it bows upwards, but in each case, the hand needs to
establish a bit of distance between a straight stroke and a curve in
order to ensure they don’t abut each other.</p>
<p><img src="../images/offenbacher-agq-arrows.png" alt="Offenbacher: a, g, q" />
<img src="../images/offenbacher-rvwy-arrows.png" alt="Offenbacher: r, v, w, y" /></p>
<p>For my needs, this is the mania against the intermingling of lines
taken to an unhealthy extreme. I want to avoid having to pass over a
letter’s body in order to start it; on other hand, I’m perfectly
comfortable with the round bit and the straight bit of my <em>y</em> rubbing
up against each other. It’s the year 2020, after all.</p>
<p>Luckily for us, the regular construction of the script means we can
apply an equally regular simplification. We can simply eliminate the
gap in each of the above cases, and the regularity of it guarantees
that we won’t end up with a mangled or inconsistent script.</p>
<p><img src="../images/offenbacher-all-letters.png" alt="Offenbacher, before and after" /></p>
<p>This strikes me as a very fine compromise, having kept a lot of the
regularity and cleanliness that I like out of Kurrent while making the
letters generally a little simpler and more recognizable.</p>
<p>Here’s an example of the whole thing put together:</p>
<p><img src="../images/offenbacher-pangram.png" alt="An Offenbacher pangram" /></p>
<h3>POSTSCRIPTUM</h3>
<p>I’d like to offer one alternate rendering:</p>
<p>Arguably, the one outlier in the above is the treatment of <em>r</em>. It’s
not necessarily that I don’t think the principle applies—I think
that the short, bowed stroke on the bottom is a gap inserted to avoid
the downstroke and the upstroke intermingling, and I think it can be
eliminated in exactly the same way as the others are—it’s just that
the <em>r</em> character is so minimal that, by accident or not, the
gap-stroke is much more prominent in that letter than in the
others. Especially when you consider that the last stroke, the curving
one after the upstroke, will be the connector to the next letter (if
the <em>r</em> isn’t last), one could make the argument that, visually
speaking, the gap-stroke of the <em>r</em> becomes the dominant graphical
feature of the letter and to eliminate it is to fundamentally alter
its character.</p>
<p>In the spirit of that possible objection, I want to offer an
alternative in the form of the <em><a href="https://www.vhmmlschool.org/latin-insular">insular r</a></em>, ꞃ, which I have
plucked out of its Irish origin and found to be a good match:</p>
<p><img src="../images/offenbacher-insular-r.png" alt="Offenbacher with the insular r" /></p>
<p>It works very well because its construction is almost identical to
that of the Kurrent <em>e</em>, with its two upright strokes and its
connecting stroke beginning midway-or-greater up the first one<sup class="footnote-ref"><a href="#fn1" id="fnref1">1</a></sup>. In
the case of the insular r, we simply give the first stroke a
descender. The degree to which the two share a character—while being
very clearly distinguishable—tells me that the substitution is quite
a natural one.</p>
<section class="footnotes">
<ol>
<li id="fn1">
<p>Of course, it’s important that the connector starts midway up,
and not at the bottom, because otherwise it would be shaped just
like an <em>n</em>. <a href="#fnref1" class="footnote-backref">↩</a></p>
</li>
</ol>
</section>
</content>
</entry>
<entry>
  <title>Mariglia</title>
  <link href="https://blog.zdsmith.com/posts/mariglia.html" />
  <id>https://blog.zdsmith.com/posts/mariglia.html</id>
  <updated>2020-08-20T00:00:00.00Z</updated>
  <content><p>Recently it occurred to me to do some light research about the
indigenous card games of Sardinia. There isn’t much available on the
topic in English (quite a lot about Italy, but nothing about Sardinia
in particular), but in Italian there are actually several sources for
games I’ve never heard of, claimed to be unique to the island.</p>
<p>Below I offer a description of one of them, <em>Mariglia</em>. This
description was begun by translating the available Italian sources and
attempting to piece together a consistent account of the game through
them. No source was exhaustive; however, I’ve had the good fortune to
make contact with a number of sources who play the game and have been
generous with their time as I have tried to fill in the gaps in my
understanding.</p>
<hr />
<p>I’m very grateful to Nicola Setta, <em>/u/bainjio</em> on Reddit, and Antonio
Camarda for their time and patience.</p>
<p>I’m also extremely grateful to John McLeod, proprietor of
<a href="https://pagat.com">Pagat</a>, who has been kind enough to offer his own
researches and guide me with a few key observations.</p>
<hr />
<h1>Overview</h1>
<p>Mariglia is a member of the <a href="https://www.pagat.com/manille/">Manille</a>
group, and clearly shares an etymology with the members of that group:
Manille, Manillen, Malilla, et cetera. It is known, at least according to some
of the popular literature, in Sardinia as <em>Sardinian Bridge</em>.<sup class="footnote-ref"><a href="#fn1" id="fnref1">1</a></sup>
It is by far at its most popular in the North of the island, in and
around Sassari. Also in the North, it’s attested in Olbia and Nuoro.</p>
<p>The game is played with a standard Italian 40-card deck. The game is,
or has been, commonly played with either the <em>sarde</em> (Sardinian) style
deck or the <em>genovesi</em> (Genoese) pack<sup class="footnote-ref"><a href="#fn2" id="fnref2">2</a></sup>; the Genoese, however,
seems more common, especially at the tournament level. It’s played by
four, in two fixed teams.</p>
<p>Mariglia is a fairly straight-forward example of the Manille family
and exhibits most of the characteristics common to that
family. Players score points by taking tricks containing valuable
cards. The two teams play until one team has reached an agreed-upon
final score.</p>
<h1>Structure</h1>
<p>Each hand of Mariglia consists of ten tricks. A single game of
Mariglia consists of a series of hands until one team reaches an
agreed-upon score.</p>
<p>There are conventionally a few options for structuring a session of play:</p>
<ul>
<li>two games to 35;</li>
<li>one game to 45;</li>
<li>one game to 70.</li>
</ul>
<p>In a tournament setting, these might be combined; for instance,</p>
<blockquote>
<p>Le partite si disputano al meglio di tre partite: 2 da 35 punti e la
bella da 45 punti.</p>
</blockquote>
<p>—<a href="https://olimpiadirionali.files.wordpress.com/2012/07/mariglia.pdf">REGOLAMENTO TORNEO DI MARIGLIA</a></p>
<p>trans.:</p>
<blockquote>
<p>Sessions are played best of three: 2 to 35 and a tiebreaker [if each
team wins one game] to 45 points.</p>
</blockquote>
<p>These values are not arbitrary. As is established below, the total
amount of points in a single hand is 35; thus, it’s possible to win a
game to 35 in a single hand while a game to 45 will require at least
two or more.</p>
<p>In any case, a single game will be conducted over a series of one
or more deals. The teams maintain a score sheet of two columns,
tracking their respective scores over the course of the
game. The sheet is added to on two occasions:</p>
<ul>
<li>when the dealer reveals the <em>trionfo</em> (see <em>Il Trionfo</em>, below);</li>
<li>when a hand of ten tricks is finished.</li>
</ul>
<h1>Cards</h1>
<p>The card values are as follows:</p>
<table>
<thead>
<tr>
<th>card</th>
<th>value</th>
</tr>
</thead>
<tbody>
<tr>
<td>7</td>
<td>5</td>
</tr>
<tr>
<td>Ace</td>
<td>4</td>
</tr>
<tr>
<td>King</td>
<td>3</td>
</tr>
<tr>
<td>Jack (or Queen)<sup class="footnote-ref"><a href="#fn3" id="fnref3">3</a></sup></td>
<td>2</td>
</tr>
<tr>
<td>Queen (or Jack)<sup class="footnote-ref"><a href="#fn3" id="fnref3">3</a></sup></td>
<td>1</td>
</tr>
<tr>
<td>6</td>
<td>0</td>
</tr>
<tr>
<td>5</td>
<td>0</td>
</tr>
<tr>
<td>4</td>
<td>0</td>
</tr>
<tr>
<td>3</td>
<td>0</td>
</tr>
<tr>
<td>2</td>
<td>0</td>
</tr>
</tbody>
</table>
<p>The sevens are called <em>Mariglia</em> (plural <em>Mariglie</em>) and the number
cards, which are not worth any points, are called <em>frillo</em> (plural <em>frilli</em>).</p>
<h1>The Deal</h1>
<p>There are two conventions for how the cards are dealt. Far from being
mathematically equivalent (though they end up with the same number of
cards to the same players), they can have quite an impact on the game;
therefore it should be determined ahead of time which convention is
being followed. I’ll refer to them as the <em>orthodox</em> and <em>scoperto</em> conventions.</p>
<p>I’ll omit details about cutting the deck and how specifically to
distribute the cards unless they’re mathematically material to the play.</p>
<p>The dealer deals to their right, proceeding counterclockwise.</p>
<h2>Orthodox Dealing</h2>
<p>The dealer deals 10 cards to each player.</p>
<p>The dealer then turns over their last card for all to see; it is known
as <em>il trionfo</em> and its suit will be trumps.</p>
<h2><em>Scoperto</em> Dealing</h2>
<p>Before dealing, the dealer exposes the bottom card of the deck for all
to see; it is known as <em>il trionfo</em> and its suit will be trumps. It’s
also understood that this will be the last card dealt and thus will
always end up in the dealer’s hand.</p>
<p>The dealer now has to distribute 10 cards to each player, in packets
of 5; thus, there will be two rounds of dealing until all the cards
are distributed.</p>
<p>Let the dealer be South, dealer’s partner be North, and opponents be
East and West.</p>
<p>The dealer has the option to deal the first card, in either of the two
rounds, face-up to either opponent, both opponents, or neither
opponent. If they do so, they need to do the same for the next player
(who will be a member of the dealer’s own team; either their partner
or the dealer themselves). In other words, the dealer can decide to
deal face-up to East &amp; North, to West &amp; South, to all, or to none.</p>
<p>If the card which was dealt face-up is trumps, the dealer will
continue to deal face-up until the exposed card is <em>not</em> trumps. In
this way, each player gets a potentially variable number of face-up cards.[^face-up]</p>
<p>The face-up cards are left on the table until the dealer has completed
the deal. As mentioned above, the dealer can freely decide when to
deal face-up, provided that each team has been dealt to face-up an
equal number of times and each player is dealt face-up at most
once. The dealer doesn’t need to decide this ahead of time; they may
even want to use the value of the <em>trionfo</em> to inform their decision.</p>
<h2>Il Trionfo</h2>
<p>In both cases, the bottom card in the deck, which will be the last
card the dealer deals to themselves, is known as the <em>trionfo</em>, and it
has two purposes:</p>
<ol>
<li>it determines trumps for that hand;</li>
<li>the dealer’s team scores a one-time bonus to their score sheet
equal to its value.</li>
</ol>
<p>For example, if the turned card is the K♠, then spades will be trumps
for the hand, and the dealer’s team immediately scores themselves 3
points on the score sheet.</p>
<p>If that puts them above the agreed-upon match score, their team wins
immediately without playing the hand. If the card is a <em>frillo</em>, their
team adds nothing to the score sheet.</p>
<h1>The Play</h1>
<p>After the deal, the cards are played out in tricks; one card from each
player per trick. The first trick is led by the player to the dealer’s right.</p>
<p>The first player to a trick may lead any card; the winner of a trick
captures the cards for their team and leads to the next.</p>
<p>Subsequent players must follow the suit led if possible. The trick is
taken by the highest trump card played to the trick, and the highest
card of the suit led if no trump was played.</p>
<p>Mariglia is in line with the other members of its family in observing
a single additional rule of play:</p>
<blockquote>
<p>If the card that is currently winning the trick was played by an
opponent, you must beat this card if possible (subject to the
requirement to follow suit).</p>
</blockquote>
<p>—<a href="https://www.pagat.com/manille/malilla.html#play">Malilla</a></p>
<p>This includes, of course, trumping if possible. If the trick is
currently headed by the player’s partner, the player doesn’t need to
beat the high card. If they can follow suit, they can play under; if
they can’t, they can discard.</p>
<h1>The Count</h1>
<p>After all ten tricks have been played, each team counts their points.</p>
<p>Tricks should be kept together after being won, for easy scoring. Each
team counts the value of the cards taken in their tricks according to
the table above; they also score one point for each trick
taken.<sup class="footnote-ref"><a href="#fn4" id="fnref4">4</a></sup> Thus, as the cards in a deck add up to 60 and there
are 10 tricks, there is a total of 70 points to be won in each hand.</p>
<p>To determine their game score, the team which scored more points
subtracts 35 from their card points and adds that to their game
total.<sup class="footnote-ref"><a href="#fn5" id="fnref5">5</a></sup></p>
<h1>Communication</h1>
<p>Though conventions once again vary and should be determined
beforehand, in general Mariglia offers a fairly wide leeway for
teammates to confer during play. There is one rule which absolutely
must be observed: any information given by one partner to another must
be understood equally by their opponents. In other words, information
can’t be conveyed by code or previously agreed-upon sign without
letting the opponents in on it.</p>
<p>Secondarily—and even this is subject to differing conventions—
if a player asks their partner for some information about
that player’s holding, they must answer truthfully<sup class="footnote-ref"><a href="#fn6" id="fnref6">6</a></sup>.</p>
<p>There are mutually exclusive conventions governing which team
has the right to speak at a given time:</p>
<ul>
<li>
<p>only the “leading” team—that is, the player who will lead to a
trick and that player’s partner—may speak. Their opponents may not
speak during the play of that trick.</p>
</li>
<li>
<p>the right to speak starts off with the team that leads to the trick;
however, if the defenders play over the leaders (by trumping or
otherwise), they also win the right to confer.</p>
</li>
</ul>
<p>Commonly, if their team is able to speak, the player who is about lead
will ask about their partner’s holdings in order to decide what to play.</p>
<p>There generally don’t seem to be any hard and fast rules about what a
player is <em>allowed</em> to ask their partner. Some examples I’ve seen:</p>
<ul>
<li>asking how many of a certain suit they hold;</li>
<li>asking how many of a certain rank they hold;</li>
<li>asking about how many points are contained in their hand.</li>
</ul>
<p>Finally, it is often advantageous for partners to work out, at the
start of play, which of them should direct the play—to gather
information from the other and instruct the other in which card to
play, when. John McLeod adds that this</p>
<blockquote>
<p>is a normal tactic in games that allow
this sort of communication. The partner with stronger cards does not
reveal their own strength but asks questions and directs the play.</p>
</blockquote>
<p>In general, as can be seen above, every detail of the convention and
obligations around communication within a team is subject to extreme
variation, both regional and according to the seriousness and rigor of
the environment.</p>
<hr />
<p>A full list of online sources can be found
<a href="https://pinboard.in/u:crux/t:mariglia/">here</a>, the information found
therein being significantly enriched by conversations with the
above-named individuals.</p>
<section class="footnotes">
<ol>
<li id="fn1">
<p>Mariglia, especially in what I refer to as its “orthodox”
or “classical” form, is considered by its players to be an
intellectual game of skill and strategy; it’s reasonable to
presume that the allusion to Bridge is along these lines. <a href="#fnref1" class="footnote-backref">↩</a></p>
</li>
<li id="fn2">
<p>The specific style, of course, doesn’t affect the play. Any
40-card deck will do, as will a 52-card deck with 8s, 9s and 10s
removed. <a href="#fnref2" class="footnote-backref">↩</a></p>
</li>
<li id="fn3">
<p>By some conventions, Jacks are treated as 2 points and Queens as 1
(ie, reversed from the Anglo-French ordering); other groups play with
the more familiar ordering.</p>
<p>Of course, it doesn’t affect the gameplay as long as whatever
convention is used is stuck to throughout a session. But it’s best
to establish the ordering at the start of play. <a href="#fnref3" class="footnote-backref">↩</a></p>
</li>
<li id="fn4">
<p>Interestingly, though this is the mathematical reality of
the game, it’s not the conventional scoring method. Instead,
players determine points like this:</p>
<p>a) if a trick contains 1, 2, 3 or 4 <em>frilli</em>, those are all worth
1 point in total (which is added to the value of the rest of the cards).</p>
<p>b) if a trick contains no <em>frilli</em>, then the values of all the
cards are added together, and then 1 point, called the <em>punto di fase</em>,
is added. <a href="#fnref4" class="footnote-backref">↩</a></p>
</li>
<li id="fn5">
<p>The team which took fewer points will have necessarily
taken less than 35 points and thus scores nothing for that hand. <a href="#fnref5" class="footnote-backref">↩</a></p>
</li>
<li id="fn6">
<p>At least one source calls out a single, notable
exception to this rule: the respondent may conceal the fact that
they hold the <em>mariglia</em> of trumps. For example, if asked how
many <em>mariglie</em> they have, and they hold the 7 of trumps along
with one other 7, they may legally respond “one”.</p>
<p>Needless to say, this is exactly the sort of convention that
should be established beforehand! <a href="#fnref6" class="footnote-backref">↩</a></p>
</li>
</ol>
</section>
</content>
</entry>
<entry>
  <title>Some Preliminary Thoughts About a New Card Game Website</title>
  <link href="https://blog.zdsmith.com/posts/some-preliminary-thoughts-about-a-new-card-game-website.html" />
  <id>https://blog.zdsmith.com/posts/some-preliminary-thoughts-about-a-new-card-game-website.html</id>
  <updated>2020-08-16T00:00:00.00Z</updated>
  <content><p>For the past month and a half or so, I’ve been working on a new
software system for playing card games online. If you’d like to follow
along it’s being hosted on <a href="https://sr.ht/~subsetpark/tamerlane/">sourcehut</a>.</p>
<p>The idea came to me when I was talking with a friend who shares two
notable characteristics with me: 1) he is a computer programmer;
2) he’s an enthusiast of obscure traditional card games. He was
implementing a new card game on <a href="https://boardgamearena.com/">Board Game
Arena</a>, which is more or less the best
that you can currently do if you want to build a new card game that
can be played online and don’t want to implement the entire site from
scratch. It’s a generic board games/card games site which has a
“studio” feature, where developers can upload their own logic which
describes a new game. It’s also, from where I sit, a pretty poor
experience: you need to write your game in PHP, and you need to upload
it by FTP. It’s a little antiquated, in other words.</p>
<p>Hearing about the developer experience I had the sudden inspiration of
a site that worked on the Slack installable apps model instead: one
that exposed the generic bones of interaction with a deck of cards,
but where you as the developer wrote a simple JSON API to describe the
actual game, and installed the game simply by pointing the site at
your callback URL. In other words, you could write the game itself in
whatever language you liked, and only had to spin up a new web server
rather than using anyone’s crufty old library.</p>
<p>I called it Tamerlane, being the first word that popped into my head.
The viability and suitability of this model as a product aside<sup class="footnote-ref"><a href="#fn1" id="fnref1">1</a></sup>, I
thought I’d go into some detail about how I’ve been building it.</p>
<p>In the Tamerlane model, there’s a central <strong>game server</strong>,
which all users interact with, and which maintains the state of all
users and ongoing games. It in turn has entries for some number of
heterogeneous independent <strong>rules servers</strong>. In particular, every
ongoing game is pointed at a single rules server, which acts as the
source of truth for the transformations of game state for that game.</p>
<p>The game, at any point, consists of a blob of state, for example:</p>
<pre><code class="language-clj">{:meta {:high_bid {:player &quot;North&quot; :bid {...}}
	    :not_passed @{:North true :South true :East true :West true}}
 :phase &quot;bid&quot;}
</code></pre>
<p>At any given moment—and I think we can make this assumption for any
card game—the game state is static and waiting for the next <strong>player action</strong>.
This could be making a bid, discarding a card, playing a card. The
entire function of any rules server is to accept a POST request to a
single endpoint—let’s call it <code>/next</code>—with a description of the
game state, and the player action, and to return the updated game
state. The only thing left required to drive the game engine is to
also specify any <strong>side effects</strong> that need to happen as a result of
game state changes. This includes things like updating player
information displays, showing user prompts, and ultimately ending the
game.</p>
<p>This leads to an interaction model like the following:</p>
<pre><code class="language-plain">+---------+                +-------+                             +-------+
| Player  |                | Game  |                             | Rules |
+---------+                +-------+                             +-------+
     |                         |                                     |
     | Start new game          |                                     |
     |------------------------&gt;|                                     |
     |                         |                                     |
     |                         | GET /init?players=North,South       |
     |                         |------------------------------------&gt;|
     |                         |                                     |
     |                         |{&quot;phase&quot;: &quot;draw&quot;,                    |
     |                         | &quot;effects&quot;: [{&quot;event&quot;: &quot;prompt_draw&quot;,|
     |                         |              &quot;player&quot;: &quot;North&quot;}]}   |
     |                         |&lt;------------------------------------|
     |                         |                                     |
     | &lt;render draw modal&gt;     |                                     |
     |&lt;------------------------|                                     |
     |                         |                                     |
     | &lt;select a card&gt;         |                                     |
     |------------------------&gt;|                                     |
     |                         |                                     |
     |                         | POST /next                          |
     |                         |   {&quot;phase&quot;: &quot;draw&quot;,                 |
     |                         |    &quot;action&quot;: {&quot;name&quot;: &quot;draw&quot;,       |
     |                         |               &quot;player&quot;: &quot;North&quot;,    |
     |                         |               &quot;value&quot;: {&quot;rank&quot;: 1, &quot;suit&quot;: &quot;hearts&quot;}}}
     |                         |------------------------------------&gt;|
     |                         |                                     |
</code></pre>
<p>In other words, the rules server is entirely stateless. It expects
everything it needs in order to calculate game state is included in
the <code>POST</code> to <code>/next</code>. Secondarily, the meat of the game interaction
will be in the effects system: it’s up to the game server to expose an
inventory of effects that:</p>
<ol>
<li>is small enough to be obvious to a rules developer;</li>
<li>can be mapped to rich user experience effects so that the game
server can expose an enjoyable and suggestive UI;</li>
<li>can cover all, or nearly all, of the types of actions and effects
that actually happen during the play of a game of cards.</li>
</ol>
<p>It’s fairly obvious that this system will live or die on the strength
of the rules callback API it exposes. We need to design a DSL that
rules developers can express both game state and game effects in that
is expressive, simple, and elegant.</p>
<p>To that end I started by writing a rules server, and thinking about
the most natural way that I, as a rules developer, would want to
statelessly implement the rules of an entire card game. That server is
<a href="https://git.sr.ht/~subsetpark/whist">part of the Sourcehut project</a>
and implements (at time of writing, nearly all of) the game of <a href="https://www.pagat.com/auctionwhist/bidwhist.html">Bid
Whist</a>. Part of the developer proposition of this system is that
you can write a rules engine in whatever language you like, so this
server is written in the LISP <a href="https://janet-lang.org/">Janet</a>. It’s
been an effective way to work out what the most expressive and simple
DSL would be for communicating everything that goes on in a card game,
and hopefully when it’s all finished will also be a useful reference
implementation of a rules server.</p>
<p>I’d like, obviously, to have as few types of things as possible. Thus,
here’s my current ontology; all of the entities you can describe and
manipulate in order to drive any kind of card game:</p>
<ul>
<li><em>cards</em>: objects recognized by the system as cards, with suit and rank.</li>
<li><em>players</em>: entities that correspond to users and can be referred to
by ID.</li>
<li><em>hands</em>: ordered lists of cards, one for each player.</li>
<li><em>stacks</em>: named places on the table that can hold one or more
cards. For instance, in Bid Whist there’s only a single stack,
called <code>trick</code>, which is where players play to.</li>
<li><em>infos</em>: named infoboxes which each track an individual piece of
information that make up the game’s state. For instance, in Bid
Whist there’s an infobox for each team’s score, as well as one for
the number of tricks that each player has taken during the current
hand. These would more naturally be called <em>counters</em> if they only
held numerical information, which they might end up doing.</li>
<li><em>decorations</em>: arbitrary named pieces of text which the rules server
can set on each player. For instance, in Bid Whist these are used to
display which player is bidding, what each player’s most recent bid
is, and so on.</li>
<li><em>prompts</em>: objects representing which player are allowed to move at
any point and what their options are. For instance, in Bid Whist,
during bidding, each player is prompted in turn to select one of
the set of bids which is higher than the current bid, or to pass.</li>
<li><em>actions</em>: the result of a player responding to a prompt. Every call
to <code>/next</code> involves a single action, and thus the response always
describes the results of that action.</li>
</ul>
<p>The <strong>game state</strong> consists of the stacks and the infoboxes; it’s
provided to the rules server in a call to <code>/next</code> and whatever the
rules server includes at <code>&quot;state&quot;</code> in its response will be the new
state.</p>
<p>It’s important to note that the total contents of the game state,
however, is completely up to the rules developer. For instance, in the
Bid Whist implementation, the rules server sets and maintains a <code>meta</code>
attribute that it uses to keep track of the current highest bid, or
what contract was selected.</p>
<p>In addition to the game state, the only other content in the rules
server response is the game <strong>effects</strong>. This essentially covers the
specialized areas of interaction with the game that would be onerous
to maintain in a giant state blob. Therefore, effects include:</p>
<ul>
<li>setting a player decoration</li>
<li>clearing a player decoration</li>
<li>setting a player prompt</li>
<li>describing player actions like drawing and discarding</li>
</ul>
<p>In particular, treating player draws and discards as effects means
that the rules server doesn’t need to keep track of the contents of
the deck, make sure the cards have been shuffled, specify the contents
of player hands, and so on. This is making the bet that there is a
sufficiently general definition of drawing and discarding that can be
relied on by the majority of games.</p>
<p>On the other hand, it doesn’t seem that there is <em>any</em> sufficiently
general definition of <em>points</em> that can be relied on in the same
way. Bid Whist, for instance, involves two fixed teams, tracking the
tricks taken over the course of a single hand, the outcome of which
impacts the team scores tracked over the course of multiple
hands. Slovenian Tarok, on the other hand, has four individual
players, who sometimes (but not always) form teams for the duration of
a single hand, and track the number of points captured within that
hand which then impact the individual scores tracked over the course
of multiple hands. It doesn’t seem that there’s some concept of teams,
tricks, card points or game points which is generalizable at all. Thus
the specific arrangement of scores is a part of the state—the infoboxes—and is
managed directly by the rules engine however the developer sees fit.</p>
<p>The other program which currently exists is the <strong>game server</strong>. That
is, the program which you will ultimately interact with when you go to
<code>https://toulemonde.cards</code>; the server which you’ll have an account
on, create tables on, invite your friends to, and so on.</p>
<p>This so far takes the form of an Elixir application which currently
does little aside from interact directly with the only rules server it
knows about. It can spin up a new GenServer and maintain game state
by conveying user input to the rules server and interpreting the
response. The key, of course, is that it needs to be completely
agnostic of what it’s passing back and forth; it needs to understand
the business of card playing well enough to render a compelling user
interface to a human player, but simultaneously encode no assumptions
whatsoever about how any particular card game works.</p>
<p>To this end I’ve found it surprisingly useful to simply write a simple
<code>Mix.Task</code> CLI that prompts for user input and passes it back to the
rules server. Even just the task of rendering a compelling text-based
view of the game board<sup class="footnote-ref"><a href="#fn2" id="fnref2">2</a></sup> is a fairly good test of the primitives and
effects system.</p>
<p>Here’s a sample of the system as it stands:</p>
<pre><code class="language-plain">code-src/tamerlane [trunk] ⊕ mix cli
Compiling 2 files (.ex)
=================
North draws 12 cards.
[North] Hand: %{
  &quot;clubs&quot; =&gt; [#Card&lt;5♣&gt;, #Card&lt;9♣&gt;],
  &quot;diamonds&quot; =&gt; [#Card&lt;6♦&gt;, #Card&lt;T♦&gt;],
  &quot;hearts&quot; =&gt; [#Card&lt;3♥&gt;, #Card&lt;4♥&gt;, #Card&lt;7♥&gt;, #Card&lt;T♥&gt;, #Card&lt;K♥&gt;],
  &quot;spades&quot; =&gt; [#Card&lt;2♠&gt;, #Card&lt;9♠&gt;, #Card&lt;T♠&gt;]
}
South draws 12 cards.
...
West draws 12 cards.
...
East draws 12 cards.
...
Setting Decoration for North: bid_action

[North] Please select 1 of [&quot;3 Uptown&quot;, &quot;3 Downtown&quot;, &quot;3 No-Trumps&quot;, &quot;4 Uptown&quot;, &quot;4 Downtown&quot;,
 &quot;4 No-Trumps&quot;, &quot;5 Uptown&quot;, &quot;5 Downtown&quot;, &quot;5 No-Trumps&quot;, &quot;6 Uptown&quot;,
 &quot;6 Downtown&quot;, &quot;6 No-Trumps&quot;, &quot;7 Uptown&quot;, &quot;7 Downtown&quot;, &quot;7 No-Trumps&quot;, &quot;Pass&quot;] as bid.

North:
  bid_action: bidding
Phase: bid
East/West:
  0
North/South:
  0
Player [North]:  &lt;User input: &lt;ENTER&gt;&gt;
%{
  &quot;clubs&quot; =&gt; [#Card&lt;5♣&gt;, #Card&lt;9♣&gt;],
  &quot;diamonds&quot; =&gt; [#Card&lt;6♦&gt;, #Card&lt;T♦&gt;],
  &quot;hearts&quot; =&gt; [#Card&lt;3♥&gt;, #Card&lt;4♥&gt;, #Card&lt;7♥&gt;, #Card&lt;T♥&gt;, #Card&lt;K♥&gt;],
  &quot;spades&quot; =&gt; [#Card&lt;2♠&gt;, #Card&lt;9♠&gt;, #Card&lt;T♠&gt;]
}
Action: &lt;User input: &quot;3 Uptown&quot;&gt;
=================
Setting Decoration for North: bid_action

Setting Decoration for North: bid

Setting Decoration for South: bid_action

[South] Please select 1 of [&quot;3 No-Trumps&quot;, &quot;4 Uptown&quot;, &quot;4 Downtown&quot;, &quot;4 No-Trumps&quot;, &quot;5 Uptown&quot;,
 &quot;5 Downtown&quot;, &quot;5 No-Trumps&quot;, &quot;6 Uptown&quot;, &quot;6 Downtown&quot;, &quot;6 No-Trumps&quot;,
 &quot;7 Uptown&quot;, &quot;7 Downtown&quot;, &quot;7 No-Trumps&quot;, &quot;Pass&quot;] as bid.

North:
  bid: 3 Uptown
  bid_action: declarer
South:
  bid_action: bidding
Phase: bid
East/West:
  0
North/South:
  0
Player [South]: ▌
</code></pre>
<p>If you squint, you can imagine how this same information could be
rendered by an interface which knows nothing about Bid Whist itself
into a fairly generic but snappy user interface, with your hand at the
bottom, a pile of cards in the middle, and all the rest.</p>
<p>I’d like to finish both the Whist implementation as well as the
command line interface. At that point there are two dimensions I need
to expand in: on the one hand, I need to build out the whole website,
including the frontend, and there will be all of the challenges and
problems of web development that will need to be solved along the
way. On the other, I need to build engines for a couple other games
that are sufficiently different from bid whist. I need to actually
test, in other words, that the DSL I’m putting together is
sufficiently generic that it can be relied on by different games and
still be understood by the central server, and sufficiently expressive
that those games still resemble themselves by the time they’re
actually rendered on the page.</p>
<section class="footnotes">
<ol>
<li id="fn1">
<p>And there are some significant issues, to be sure. As my partner
put it: <em>Isn’t it a problem that your site relies on a bunch of different other websites to be up and working in order for people to be able to play any games?</em> Yes, yes it is. <a href="#fnref1" class="footnote-backref">↩</a></p>
</li>
<li id="fn2">
<p>It will, of course, ultimately be a rich Javascript interface on
a website; I’m planning on using Phoenix LiveView since I’m an
awful frontend developer. <a href="#fnref2" class="footnote-backref">↩</a></p>
</li>
</ol>
</section>
</content>
</entry>
<entry>
  <title>The Card Player's Guide to Lockdown</title>
  <link href="https://blog.zdsmith.com/posts/the-card-players-guide-to-lockdown.html" />
  <id>https://blog.zdsmith.com/posts/the-card-players-guide-to-lockdown.html</id>
  <updated>2020-06-07T00:00:00.00Z</updated>
  <content><p>Card-playing, as a pastime, depends on the ability of people to gather
freely, in close quarters, and handle the same objects in turn. It is not,
however, utterly reliant. Playing cards together can migrate to Zoom;
it just takes a bit of legwork.</p>
<p>Generally speaking, when it comes to choice of medium, there are two main
options: on the one hand there are online a few different generic card
or board game engines, where players can all join a room and manipulate
some set of objects (say, a deck of cards and a few score counters). You
only need a few primitives to simulate pretty much any card game in this
way: the ability to draw cards, turn them over, split them into piles,
and bring them into a player’s hand. On the other hand, there are
websites or native apps that directly simulate some specific game:
a Poker app, a Euchre app, et cetera. These expose to the player the
actions of the game itself, as well as encode its rules; for instance,
they will prevent a player from playing an illegal card.</p>
<p>After a bit of experimentation, I strongly prefer the latter. The promise
of the former is lovely and it’s nice to have something to fall back to,
but it will almost always be an order of magnitude faster and more fluid
to play a dedicated app than to manipulate on-screen objects as though
they were cards.</p>
<p>In general, what one looks for is speed, fluidity, and
unobtrusiveness. Even if, in general, computer games benefit from a
degree of interface richness and delight, in this case we do not expect
to dedicate any more attention to the actual interface than we must. To
replicate a weekly dinner table card game, we’ll be on Zoom or Facetime,
and if we have two monitors we’d like to have our opponents’ faces in
video on the other screen; so as we select games to play we’ll be looking
for a system that exposes the mechanics of the game to us with a minimum
of fuss.</p>
<p>I’ll offer a brief survey of where to play what. I’ll organize these
entries by <em>number of players</em> and <em>complexity level</em>; hopefully you
can find an entry that suits your needs.</p>
<p>We’ll be looking out for websites or apps that have smooth, unobtrusive
and stable interfaces. On the web, modern HTML and Javascript will be
preferred to Flash or Java; for mobile apps, we’ll prefer those that allow
iOS and Android players to play together. Free games are good, but
equally good (in my view) are games which require a one-time purchase;
games which require or offer a regular subscription fee are still to be
preferred over those which require you to watch videos and buy in-game
currency in order to play at all. Finally, we will prefer those sites
which offer the option to play in English.</p>
<h1>Games For 2 Players</h1>
<h2>Schnapsen on Playok</h2>
<p>Schnapsen: a game that is quite uncomplicated, in its way, but brutally
unforgiving. There are a few interesting wrinkles that might give pause
to a brand-new cards player, but most offputting is the degree to which
it drains the blood, silences casual conversation, and induces a grim,
white-knuckled concentration in the two players. This is not <em>not</em>
an endorsement.</p>
<p>Playok is entirely free of adornment; to the untrained eye, it looks
half-built, but in fact it means that one can get to the actual play
with a minimum of distraction. They also have Skat and Euchre, if you
want to embrace the minimalism.</p>
<h1>Games For 3 Players</h1>
<h2>Sergeant Major on CardzMania</h2>
<p>Sergeant Major: I’m not an old hand at this one quite yet, but I
appreciate it for what it is. The gameplay is very firmly in the
traditional whist mold; the twist is that each player receives a quota
for each round, and if they miss their quota then they get all their
best cards taken on the next one. The result is a slow but inevitable
slide into marginalization and defeat, which all feels very British.</p>
<p>CardzMania mostly has its name against it; unlike the implication of
any name that unnecessarily inserts Zs where they don’t belong, play is
generally on the level and bullshit free.</p>
<p>Link: <a href="https://www.cardzmania.com/games/SergeantMajor">CardzMania</a></p>
<h2>Skat on Skat Palast</h2>
<p>Skat: a complex, rewarding game of the point-trick variety. Very popular
in Germany. A high learning curve: the bidding system is imposing and
requires no little bit of memorization and mental arithmetic to be able
to participate.</p>
<p>The first couple pages are in German, but once you sign up the interface
is fully English. There is an in-game currency, as well as a premium
subscription, but players can play normally without paying. The site is
very active and pretty bug-free.</p>
<p>Link: <a href="https://www.skat-palast.de/online-skat-spielen.html">Skat Palast</a></p>
<h2>Slovenian Tarok on Valat.si</h2>
<p>Slovenian Tarok: quite possibly my favorite game. More obscure than
Skat, but for my money slightly more exciting and dramatic. Arguably, it
doesn’t require the same mental fortitude and discipline that Skat does;
unfortunately, the elaborate bidding system, novel partner selection
mechanism, positive and negative contracts, extra bonuses, and of course
the fact that it’s played with tarot cards make for an imposing and
utterly unfamiliar package.</p>
<p>Valat.si is always thronging with Slovenians who are very good at this
game, except at 9pm EST when the entire server restarts and every game
crashes. The interface is mostly in English, though not entirely, and
of course that’s only if you click <em>English</em>, which is easy to
overlook—then you’re stuck in Slovenian for the rest of the game
(‘naprej’ means ‘skip’, or ‘next’; that’s all I’ve picked up). Despite
all this the actual gameplay is extremely smooth and
fast-paced; for a game with some interesting and unusual complexities,
that’s no mean feat.</p>
<p>Link: <a href="https://valat.si/tarok">Valat.si</a></p>
<h1>Games For 4 Players</h1>
<h2>Euchre on Euchre 3D</h2>
<p>Euchre: A very popular and relatively simple game. Almost no bidding
and a short deck, so games are fast. Much of the American Midwest is
fanatical and new players are very easily inducted, though it can feel
a bit simplistic to those used to more elaborate bidding systems.</p>
<p>Euchre 3D is more or less the standard; Euchre is one of the few
card games with a substantial English-speaking community online, and
when people discuss games online it’s almost always assumed they’ll be
playing on Euchre 3D. Why a card game would need to be in 3D is beyond
me, but it doesn’t end up getting in the way. Apps available for both
iOS and Android.</p>
<p>Links:</p>
<ul>
<li><a href="https://play.google.com/store/apps/details?id=com.astarsoftware.euchre&amp;hl=en_US0">Google Play</a></li>
<li><a href="https://apps.apple.com/us/app/euchre-3d/id364909474">App Store</a></li>
</ul>
<h2>Manillen on Manillen Online</h2>
<p>Manillen: completely unknown in the US, but apparently very popular
in Flanders (that’s in Belgium). Related to Belote and other Jass
games. Despite its obscurity, it’s a compact and simple game. Very
little bidding to speak of (only slightly more than Euchre) and fewer
elaborations than other members of the family; dare we say it’s the
Euchre of the point-trick world?<sup class="footnote-ref"><a href="#fn1" id="fnref1">1</a></sup></p>
<p>As online interfaces go, Manillen Online is right up my alley. Essentially
no visual decoration, a snappy interface, with full English coverage. A
donation link covers expenses; no chips, bonuses or otherwise in sight.</p>
<p>Link: <a href="https://manillen.online/app/en/rules">Manillen Online</a></p>
<h2>Bid Whist on CardzMania</h2>
<p>Bid Whist: a game with simple rules and a pretty healthy player base,
but that affords a lot of skill and strategy, especially through the
bidding system. A close relative to Bridge, though arguably much more
inviting to new players.</p>
<p>The name is awful but the interface is actually quite smooth and
unobtrusive. There are some annoying “rewards” like Stars, Bonuses, Chips:
I have no idea what any of them are for but at least at the level of
casual play they don’t seem to be necessary to actually play the game.</p>
<p>Link: <a href="https://www.cardzmania.com/games/Whist">CardzMania</a> (be sure to select ‘Bid
Whist’, this site also offers ‘Classic’ whist which is really quite dull)</p>
<h2>Belote on EryodSoft French Belote</h2>
<p>Belote: an excellent and perhaps the ideally balanced member of the
expansive Jass family. Like Manillen, but with more moving parts, and
thus a little more interest in the long term. The point-trick factor,
odd ordering and the promotion of the Jack and 9 in the trump suit will
all raise some eyebrows for those of us raised on a diet of Hearts and
Spades; but hey, at least it’s still a “normal” deck of cards.</p>
<p>EryodSoft makes quite a few apps, which are of uniformly high
quality. Lots of rule variations and a robust interface; English
translation is good. There are Belote versions for both iOS and Android;
unfortunately, only iOS can actually play online.</p>
<p>Link: <a href="http://www.eryodsoft.com/en/games/belote">EryodSoft</a></p>
<h2>Slovenian Tarok on Valat.si</h2>
<p>(See under 3 player games; the game for 4 players is more fun, for my
money, though the game for 3 affords more opportunities for skillful play)</p>
<h1>Generic Card Game Engines</h1>
<p>If all fails, there are apps that allow you to play your own games by
giving you the raw materials.</p>
<p>For our purposes, we actually want the absolute minimally functional
interface: the fancier, richer apps lend themselves to a wide variety of
board games, card games, commercial games, by exposing realistic physics
and 3d models. We don’t need any of that, and the more there is the more
unnecessary actions are likely to be in the way.</p>
<p>To that end, the best generic engine I’ve found is PlayingCards.io,
insofar as it simply offers you the fewest things you can do. As I note,
I still have a lot more fun playing a dedicated app; nevertheless, it’s
worth trying this out if you have some favorite game that you can’t find
anywhere else.</p>
<p>Link: <a href="http://playingcards.io/">PlayingCards.io</a></p>
<section class="footnotes">
<ol>
<li id="fn1">
<p>Obviously not; that honor goes to
<a href="https://en.wikipedia.org/wiki/R%C3%A9union_(card_game)">Reunion</a>,
which I do not believe you can play online. <a href="#fnref1" class="footnote-backref">↩</a></p>
</li>
</ol>
</section>
</content>
</entry>
<entry>
  <title>A Curriculum of Current Phonetic Shorthand</title>
  <link href="https://blog.zdsmith.com/posts/a-curriculum-of-current-phonetic-shorthand.html" />
  <id>https://blog.zdsmith.com/posts/a-curriculum-of-current-phonetic-shorthand.html</id>
  <updated>2020-04-05T00:00:00.00Z</updated>
  <content><p>Henry Sweet’s <a href="https://en.wikipedia.org/wiki/Current_Shorthand">Current Shorthand</a><sup class="footnote-ref"><a href="#fn1" id="fnref1">1</a></sup> is a historical curiosity
twice over: once because very few people today need to learn shorthand
at all or even know what it is; twice because as shorthands go, it’s
completely obscure. I learned about it because the surprisingly active
and enjoyable <a href="https://www.reddit.com/r/shorthand/">Shorthand Subreddit</a> is populated by people who
seem to really enjoy spelunking in digital archives for self-published
books from the late 19th century, the heyday of shorthand, when there
was actual money in designing and publicising a shorthand system of
one’s own.</p>
<p>Nevertheless, insofar as one is already interested in learning a
shorthand<sup class="footnote-ref"><a href="#fn2" id="fnref2">2</a></sup>, it’s quite worth taking a look at. I think it has a
combination of qualities that make it very recommendable:</p>
<ul>
<li>it is <em>efficient</em>, compressing quite a bit of writing into a small
number of strokes;</li>
<li>it is (relatively) <em>cursive</em>, visually and mechanically resembling
longhand writing more than simple ellipses or geometrical shapes;</li>
<li>by means of the second fact, it is, visually, fairly resistent to
ambiguity <a href="https://blog.zdsmith.com/posts/three-shorthands.html">(I’ve talked about this before)</a>.</li>
</ul>
<p>It’s also got some marks against it. In addition to being very complex
(or at least involved, or at least <em>deep</em>), it is doubly inaccessible:
once because the only extant text that I know about is a <a href="https://cdm15457.contentdm.oclc.org/digital/collection/p15457coll1/id/105">scanned PDF
of Sweet’s own handwritten (!) manual from 1892</a>, and twice due
to the fact that the manual is, frankly, not well-laid out.</p>
<p>Part of it is that Sweet was a phonetician before phonetics was a thing;
his vocabulary around different sounds is not the same as we would
use. More difficult is that the signs are actually quite systematic
but Sweet often <em>leaves the system implicit</em>; there are a few places
that his choice of symbol names in fact obscures their relationships to
other symbols.</p>
<p>I’d like to try to lay out some of the same information contained in the
manual in a more systematic and searchable way. Let’s see if it works out.</p>
<h1>Some preliminary remarks</h1>
<p>Like other phonetic shorthands, the basic principle of Current is
to represent spoken or written language with a sequence of written
symbols. The symbols are more numerous, and each one simpler, than the
letters of the alphabet, so that more can be written, more quickly,
than if you spelled the equivalent language out. The symbols making
up a single word (or sometimes group of words) are written together,
without taking the pen off the page (as in cursive writing), as that
speeds things up as well.</p>
<p>Generally speaking, especially at first, Current can be approached
word-by-word. And since we’re dealing with the <em>phonetic</em> variant,
the outline for a word can be the symbols for all of its sounds written
together.</p>
<p>Finally, to write more quickly, a number of other techniques will be used. These include:</p>
<ul>
<li>leaving out certain sounds;</li>
<li>using distinct symbols for common sequences of more than one sound;</li>
<li>using distinct symbols for common words.</li>
</ul>
<p>We’ll start with the most basic part of the symbol inventory: the symbols
that make up the basic sounds of spoken English<sup class="footnote-ref"><a href="#fn3" id="fnref3">3</a></sup>. Anyone who knows them all
will be able write (and read back) any English whatsoever; everything that
comes afterwards will simply make the process of writing more efficient.</p>
<p>The basic sounds can, of course, be divided into consonants and vowels.</p>
<h1>Consonants</h1>
<p>Consonants, generally, are represented by full-letter-sized symbols.</p>
<h2>Heights</h2>
<p>Full symbols have four heights:</p>
<ul>
<li><em>short</em>, as in the height of a lower-case <code>x</code>;</li>
<li><em>high</em>, as in the height of a lower-case <code>l</code> or upper-case <code>I</code>;</li>
<li><em>low</em>, as in the height of a lower-case <code>y</code>;</li>
<li><em>tall</em>, which extends from the top of an <code>l</code> to the bottom of a <code>y</code>.<sup class="footnote-ref"><a href="#fn4" id="fnref4">4</a></sup></li>
</ul>
<h2>Stroke Consonants</h2>
<p>The atom of current shorthand is the <em><a href="https://en.wikipedia.org/wiki/Minim_(palaeography)">connected vertical
downstroke</a></em>. Because Current mimics normal handwriting, it’s
pretty tolerant of different degrees of slant, so “vertical” here is a
relative rather than absolute term.</p>
<p>A vertical stroke is connected by the upward stroke that leads into it
and the upward stroke that leads from it. There are two ways to connect
into those strokes: with a curve, and with a sharp angle.</p>
<p>\[2 \text{ points of connection} × 2 \text{ ways to connect} = 4 \text{ styles of stroke:}\]</p>
<table>
<thead>
<tr>
<th></th>
<th>starting from an angle</th>
<th>starting from a curve</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>leading into an angle</strong></td>
<td><img src="../images/current/short-stroke.png" alt="" /></td>
<td><img src="../images/current/short-curve-stroke.png" alt="" /></td>
</tr>
<tr>
<td><strong>leading into a curve</strong></td>
<td><img src="../images/current/short-stroke-curve.png" alt="" /></td>
<td><img src="../images/current/short-swing.png" alt="" /></td>
</tr>
</tbody>
</table>
<p>Constructing a matrix of heights and styles gives us the most basic strokes.</p>
<p>\[4 \text{ styles of stroke} × 4 \text{ heights} = 16 \text{ strokes:}\]</p>
<table>
<thead>
<tr>
<th></th>
<th>stroke</th>
<th>curve-stroke</th>
<th>stroke-curve</th>
<th>curve-stroke-curve</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>short</strong></td>
<td><img src="../images/current/short-stroke.png" alt="" /> <em>t</em></td>
<td><img src="../images/current/short-curve-stroke.png" alt="" /> <em>d</em></td>
<td><img src="../images/current/short-stroke-curve.png" alt="" /> <em>n</em></td>
<td><img src="../images/current/short-swing.png" alt="" /> <em>r</em></td>
</tr>
<tr>
<td><strong>high</strong></td>
<td><img src="../images/current/high-stroke.png" alt="" /> <em>p</em></td>
<td><img src="../images/current/high-curve-stroke.png" alt="" /> <em>b</em></td>
<td><img src="../images/current/high-stroke-curve.png" alt="" /> <em>m</em></td>
<td><img src="../images/current/high-double-hook.png" alt="" /> <em>kw</em></td>
</tr>
<tr>
<td><strong>low</strong></td>
<td><img src="../images/current/low-stroke.png" alt="" /> <em>k</em></td>
<td><img src="../images/current/low-curve-stroke.png" alt="" /> <em>g</em></td>
<td><img src="../images/current/low-stroke-curve.png" alt="" /> <em>ng</em></td>
<td><img src="../images/current/low-double-hook.png" alt="" /> <em>ly</em></td>
</tr>
<tr>
<td><strong>tall</strong></td>
<td><img src="../images/current/tall-stroke.png" alt="" /> <em>tsh</em></td>
<td><img src="../images/current/tall-curve-stroke.png" alt="" /> <em>dzh</em></td>
<td><img src="../images/current/tall-stroke-curve.png" alt="" /> <em>ny</em></td>
<td><img src="../images/current/tall-double-hook.png" alt="" /> <em>ry</em></td>
</tr>
</tbody>
</table>
<p>Arranged thus it’s hopefully evident that there’s an order to what sign
goes with what sound. Sweet is particularly hot on the correspondence
between where <em>in the mouth</em> a sound is articulated and where it’s placed,
vertically, on the page (the man was a phonetician), which I think is
less helpful; however, especially in the upper-left of the matrix,
it hangs together ok.</p>
<p>The basic strokes stand for <em>unvoiced</em> sounds, and the curve-strokes
stand for their <em>voiced</em> counterparts. It’s hopefully useful and intuitive
that /t/ goes with /d/, /k/ with /g/, and so forth.</p>
<p>Similarly, /tsh/ (usually written “ch”, like “cheer” and “cheek”) and
/dzh/ (one of the sounds made by “g” or “j”, as in “George”) go together.</p>
<p>The third column is the <em>nasals</em>; in English there isn’t a voiced/unvoiced
distinction for them.</p>
<p>The fourth column hangs together less cleanly. A short
<em>curve-stroke-curve</em> stands for /r/, which is obviously very common
in English; the rest of the column is left over for certain consonants
followed by glide vowels.</p>
<p>So we can give a rough phonetic reading of the same matrix:</p>
<table>
<thead>
<tr>
<th></th>
<th>unvoiced</th>
<th>voiced</th>
<th>nasal</th>
<th>liquid</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>dental</strong></td>
<td><img src="../images/current/short-stroke.png" alt="" /> <em>t</em></td>
<td><img src="../images/current/short-curve-stroke.png" alt="" /> <em>d</em></td>
<td><img src="../images/current/short-stroke-curve.png" alt="" /> <em>n</em></td>
<td><img src="../images/current/short-swing.png" alt="" /> <em>r</em></td>
</tr>
<tr>
<td><strong>labial</strong></td>
<td><img src="../images/current/high-stroke.png" alt="" /> <em>p</em></td>
<td><img src="../images/current/high-curve-stroke.png" alt="" /> <em>b</em></td>
<td><img src="../images/current/high-stroke-curve.png" alt="" /> <em>m</em></td>
<td><img src="../images/current/high-double-hook.png" alt="" /> <em>kw</em></td>
</tr>
<tr>
<td><strong>velar</strong></td>
<td><img src="../images/current/low-stroke.png" alt="" /> <em>k</em></td>
<td><img src="../images/current/low-curve-stroke.png" alt="" /> <em>g</em></td>
<td><img src="../images/current/low-stroke-curve.png" alt="" /> <em>ng</em></td>
<td><img src="../images/current/low-double-hook.png" alt="" /> <em>ly</em></td>
</tr>
<tr>
<td><strong>palatal</strong></td>
<td><img src="../images/current/tall-stroke.png" alt="" /> <em>tsh</em></td>
<td><img src="../images/current/tall-curve-stroke.png" alt="" /> <em>dzh</em></td>
<td><img src="../images/current/tall-stroke-curve.png" alt="" /> <em>ny</em></td>
<td><img src="../images/current/tall-double-hook.png" alt="" /> <em>ry</em></td>
</tr>
</tbody>
</table>
<h2>Loop Consonants</h2>
<p>The second basic element of the vocabulary is the <em>loop</em>, which as a
term is hopefully self-explanatory.</p>
<p>Loops can have the same heights as strokes; however, there are only <em>two</em> types of loop:</p>
<ul>
<li><em>regular</em>, where the pen starts from the bottom-left, forms a loop,
and continues to the bottom-right: <img src="../images/current/short-loop.png" alt="" /></li>
<li><em>inverted</em>, where the pen starts from the upper-left,
forms a loop downwards, and continues to the upper-right:
<img src="../images/current/short-inverted-loop.png" alt="" /></li>
</ul>
<p>\[2 \text{ styles of loop} × 4 \text{ heights} = 8 \text{ loops:}\]</p>
<table>
<thead>
<tr>
<th></th>
<th>loop</th>
<th>inverted loop</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>short</strong></td>
<td><img src="../images/current/short-loop.png" alt="" /> <em>s</em></td>
<td><img src="../images/current/short-inverted-loop.png" alt="" /> <em>z</em></td>
</tr>
<tr>
<td><strong>high</strong></td>
<td><img src="../images/current/high-loop.png" alt="" /> <em>f</em></td>
<td><img src="../images/current/high-inverted-loop.png" alt="" /> <em>v</em></td>
</tr>
<tr>
<td><strong>low</strong></td>
<td><img src="../images/current/low-loop.png" alt="" /> <em>zh</em></td>
<td><img src="../images/current/low-inverted-loop.png" alt="" /> <em>sh</em></td>
</tr>
<tr>
<td><strong>tall</strong></td>
<td><img src="../images/current/tall-loop.png" alt="" /> <em>nzh</em></td>
<td><img src="../images/current/tall-inverted-loop.png" alt="" /> <em>nsh</em></td>
</tr>
</tbody>
</table>
<p>The loops are used for what Sweet calls <em>hiss</em> sounds but what we’d call
<em>fricatives</em>, and mostly <em>sibilants</em>. The voiced/unvoiced relationship
of orientation is in place, which is very helpful.</p>
<p>Less helpful is the fact that it <em>swaps</em> midway through. In the first
two rows, the left side is unvoiced and the right side is voiced. In
the bottom two, we swap over. Sweet’s rationale for this is that /sh/
is more common, and that the low inverted loop is easier to write. I’m
sure he’s right, but I don’t know if it’s worth the added cognitive load.</p>
<p>The tall loops are left for blends involving /n/ + /the sound made by their
low counterparts/. These are more useful than they seem at first glance,
since in practice /nsh/ also works for /ntsh/ (as in “inch”) and /nzh/
also works for /ndzh/ (as in “change”).</p>
<h2>Rings</h2>
<p>We’ve covered nearly all the consonants under the above two theories,
but there are a few stragglers that don’t fit neatly.</p>
<p>The “canonical” form of /h/, so to speak, is an elongated low ring.</p>
<p>There are two sounds, voiced /th/ and unvoiced /dh/, represented by
“th”. They are both short.</p>
<p>All three are written starting from the top.</p>
<table>
<thead>
<tr>
<th></th>
<th>ring</th>
<th>half ring</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>short</strong></td>
<td><img src="../images/current/short-ring.png" alt="" /> <em>th</em></td>
<td><img src="../images/current/short-half-ring.png" alt="" /> <em>dh</em></td>
</tr>
<tr>
<td><strong>low</strong></td>
<td><img src="../images/current/low-ring.png" alt="" /> <em>h</em></td>
<td></td>
</tr>
</tbody>
</table>
<p>It’s important to note, however, that /h/ is much more commonly written
as a long diagonal stroke beginning below the line of writing, like so:
<img src="../images/current/long-stroke.png" alt="" /></p>
<h2>Semivowels</h2>
<p>The semivowels (or glides) are both written with what Sweet calls the
“flat curve”: <img src="../images/current/low-flat-curve.png" alt="" /></p>
<p>These are also started from the top.</p>
<table>
<thead>
<tr>
<th></th>
<th>flat curve</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>high</strong></td>
<td><img src="../images/current/high-flat-curve.png" alt="" /> <em>w</em></td>
</tr>
<tr>
<td><strong>low</strong></td>
<td><img src="../images/current/low-flat-curve.png" alt="" /> <em>y</em></td>
</tr>
</tbody>
</table>
<p>As we’ve already seen, though, there are some blends with /w/ and /y/
that are useful to know as these symbols are a bit awkward to write in
the middle of a word.</p>
<h2>Wave</h2>
<p>The final consonant to cover is /l/, which is written with a “wave”, or what
we might now call a <em>tilde</em>: <img src="../images/current/wave.png" alt="" />. It’s hard
to classify it by height, though I suppose technically it’s <em>short</em>. But
in reality it’s the only consonant whose overall height is less than
that of an <code>x</code>.</p>
<p>One result of this is that it can be comfortably written <em>on the line</em>
or at around <code>x</code> height. The former generally is used when /l/ is not
preceded by a vowel, while the latter is generally used when it is.</p>
<h1>Vowels</h1>
<p>The vowels of Current are… numerous. The principle of their general
use is the same as most other phonetic shorthands: in writing, leave
them out whenever possible. A word written like <code>fnctshn</code> or <code>cmptr</code>
is often completely intelligible, especially written in context.</p>
<p>This principle is particularly important in light of one of Sweet’s
basic principles of writing vowels: “medially, all weak vowels are
expressed by the stroke.” That is, the short upward connecting stroke
between two consonants should be the standard way of representing an
unstressed vowel in the middle of a word.</p>
<p>This is perfectly sensible and more-or-less the default, as I say;
however, some of the more finicky elements of the shorthand arise when
Sweet tries to ensure that principle’s inverse: the <em>presence</em> of a
short, connecting stroke should imply the presence of an unstressed
vowel in the middle of a word. This would require that we strictly draw
two consonants without any intervening stroke if there’s no vowel (or
otherwise use a consonant blend, which are very plentiful and pretty
crucial in practice). I say good luck: in order to make your outlines
intelligible, you’ll sometimes have to have <em>some</em> space between two
consonants even if there’s no vowel between them. Don’t sweat it.</p>
<p>This is an area where there won’t be a very satisfactory way of
representing the sounds: Sweet’s notation for vowels is pretty
straightforward but archaic; but then again, it’s not very practical to
require the interested reader to know IPA as well. I’m going to try to
represent them with words that obviously demonstrate them, after <a href="https://en.wikipedia.org/wiki/Lexical_set">John C. Wells</a>.</p>
<h2>Positions</h2>
<p>While consonants are some kind of letter-form of at least <code>x</code> height,
vowels are generally smaller: roughly half <code>x</code>-height. Ordinarily,
all vowels live within the <code>x</code> space, and therefore have two positions:</p>
<ul>
<li>“low-mid”, which sits at the baseline of writing: <img src="../images/current/low-up-hook.png" alt="" />;</li>
<li>“high-mid”, which sits at the top of the <code>x</code>: <img src="../images/current/high-up-hook.png" alt="" />.</li>
</ul>
<h2>Hooks</h2>
<p>The most basic form of vowel sign is the <em>hook</em>, which is just a single
horizontal curve: <img src="../images/current/high-up-hook.png" alt="" />.</p>
<p>Hooks have two <em>orientations</em>:</p>
<ul>
<li>up, with the two ends of the curve pointing up: <img src="../images/current/high-up-hook.png" alt="" /></li>
<li>down, with the two ends of the curve pointing down: <img src="../images/current/high-down-hook.png" alt="" /></li>
</ul>
<p>Hooks have two <em>lengths</em>:</p>
<ul>
<li>short, about half the width of an <code>x</code>: <img src="../images/current/high-up-hook.png" alt="" /></li>
<li>long, about the full width of an <code>x</code> (or longer, as is useful): <img src="../images/current/high-up-hook-long.png" alt="" /></li>
</ul>
<p>Generally speaking, the long versions of the symbols are the “longer”
of the pair.</p>
<p>\[2 \text{ positions} × 2 \text{ orientations} × 2 \text{ lengths} = 8 \text{ hooks:}\]</p>
<h3>low-mid hooks</h3>
<table>
<thead>
<tr>
<th></th>
<th>hook</th>
<th>long hook</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>up</strong></td>
<td><img src="../images/current/low-up-hook.png" alt="" /> <em>PRICE</em><sup class="footnote-ref"><a href="#fn5" id="fnref5">5</a></sup></td>
<td><img src="../images/current/low-up-hook-long.png" alt="" /> <em>PALM</em></td>
</tr>
<tr>
<td><strong>down</strong></td>
<td><img src="../images/current/low-down-hook.png" alt="" /> <em>TRAP</em></td>
<td></td>
</tr>
</tbody>
</table>
<h3>high-mid hooks</h3>
<table>
<thead>
<tr>
<th></th>
<th>hook</th>
<th>long hook</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>up</strong></td>
<td><img src="../images/current/high-up-hook.png" alt="" /> <em>KIT</em><sup class="footnote-ref"><a href="#fn5" id="fnref5">5</a></sup></td>
<td><img src="../images/current/high-up-hook-long.png" alt="" /> <em>FLEECE</em><sup class="footnote-ref"><a href="#fn5" id="fnref5">5</a></sup></td>
</tr>
<tr>
<td><strong>down</strong></td>
<td><img src="../images/current/high-down-hook.png" alt="" /> <em>DRESS</em><sup class="footnote-ref"><a href="#fn6" id="fnref6">6</a></sup></td>
<td><img src="../images/current/high-down-hook-long.png" alt="" /> <em>FACE</em><sup class="footnote-ref"><a href="#fn6" id="fnref6">6</a></sup></td>
</tr>
</tbody>
</table>
<h2>Double Hooks</h2>
<p>Double hooks can vary along all the same dimensions as single hooks;
they just consist of two curves written together.</p>
<p>\[2 \text{ positions} × 2 \text{ orientations} × 2 \text{ lengths} = 8 \text{ double hooks:}\]</p>
<h3>low-mid double hooks</h3>
<table>
<thead>
<tr>
<th></th>
<th>double</th>
<th>long double</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>up</strong></td>
<td><img src="../images/current/low-double-up-hook.png" alt="" /> <em>FOOT</em></td>
<td><img src="../images/current/low-double-up-hook-long.png" alt="" /> <em>GOOSE</em></td>
</tr>
<tr>
<td><strong>down</strong></td>
<td><img src="../images/current/low-double-down-hook.png" alt="" /> <em>POOR</em></td>
<td></td>
</tr>
</tbody>
</table>
<h3>high-mid double hooks</h3>
<table>
<thead>
<tr>
<th></th>
<th>double hook</th>
<th>long double hook</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>up</strong></td>
<td><img src="../images/current/high-double-up-hook.png" alt="" /> <em><strong>UN</strong>ITE</em></td>
<td><img src="../images/current/high-double-up-hook-long.png" alt="" /> <em>USE</em></td>
</tr>
<tr>
<td><strong>down</strong></td>
<td><img src="../images/current/high-double-down-hook.png" alt="" /> <em>FUEL</em></td>
<td></td>
</tr>
</tbody>
</table>
<p>Both the <em>down</em> and the <em>high-mid</em> versions deserve a little explanation:</p>
<ul>
<li><em>double down-hooks</em> represent the same sound as their up-hook counterparts, but with a schwa /ə/ at the end.<sup class="footnote-ref"><a href="#fn7" id="fnref7">7</a></sup></li>
<li><em>high-mid double hooks</em> represent a /u/ sound, just like the low-mid ones, but with a /y/ in front.</li>
</ul>
<p>The distinction between the short /yu/, like the first vowel in “unite”,
and the long /yuu/, like the vowel in “use”, is often subtle enough to
be disregarded when writing.</p>
<h2>Vowel loops</h2>
<p>The next class of vowel symbol is the <em>(little) loop</em>. It’s about the
size of an up- or down-hook; however, instead of a horizontal curve it’s
a completed circle.</p>
<p>Just as with their full-size consontantal counterparts, loops can be
<em>regular</em> or <em>inverted</em>. To help distinguish them from the bigger versions we will say:</p>
<ul>
<li><em>up</em>, where the pen starts from the bottom-left, forms a loop,
and continues to the bottom-right: <img src="../images/current/high-up-loop.png" alt="" /></li>
<li><em>down</em>, where the pen starts from the upper-left,
forms a loop downwards, and continues to the upper-right:
<img src="../images/current/high-down-loop.png" alt="" /></li>
</ul>
<p>If a loop is the first symbol in an outline, we need to be able to
distinguish <em>up</em> from <em>down</em> since obviously there will be no connecting
stroke to connect from. Therefore up loops are
not closed if they’re the first part of any outline:
<img src="../images/current/high-up-loop-initial.png" alt="" />. This principle will
hold for any of the up-loop variants.</p>
<p>\[2 \text{ positions} × 2 \text{ orientations} × 2 \text{ lengths} = 8 \text{ loops:}\]</p>
<h3>low-mid loops</h3>
<table>
<thead>
<tr>
<th></th>
<th>loop</th>
<th>long loop</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>up</strong></td>
<td><img src="../images/current/low-up-loop.png" alt="" /> <em>MOUTH</em><sup class="footnote-ref"><a href="#fn5" id="fnref5">5</a></sup></td>
<td><img src="../images/current/low-up-loop-long.png" alt="" /> <em>GOAT</em><sup class="footnote-ref"><a href="#fn5" id="fnref5">5</a></sup></td>
</tr>
<tr>
<td><strong>down</strong></td>
<td><img src="../images/current/low-down-loop.png" alt="" /> <em>STRUT</em></td>
<td><img src="../images/current/low-down-loop-long.png" alt="" /> <em>SQUARE</em></td>
</tr>
</tbody>
</table>
<h3>high-mid loops</h3>
<table>
<thead>
<tr>
<th></th>
<th>loop</th>
<th>long loop</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>up</strong></td>
<td><img src="../images/current/high-up-loop.png" alt="" /> <em>CLOTH</em><sup class="footnote-ref"><a href="#fn5" id="fnref5">5</a></sup></td>
<td><img src="../images/current/high-up-loop-long.png" alt="" /> <em>THOUGHT</em><sup class="footnote-ref"><a href="#fn5" id="fnref5">5</a></sup></td>
</tr>
<tr>
<td><strong>down</strong></td>
<td><img src="../images/current/high-down-loop.png" alt="" /> <em>A</em>(ROUND)<sup class="footnote-ref"><a href="#fn6" id="fnref6">6</a></sup></td>
<td><img src="../images/current/high-down-loop-long.png" alt="" /> <em>NURSE</em></td>
</tr>
</tbody>
</table>
<h1>To come: Arbitraries, Consonant Groups, Rising Consonants, Finals, Implied Characters, Contraction, Word Omission, Limbs, Signs</h1>
<p>The foregoing, insofar as curricula go, is demonstrably not much of a
curriculum at all. For one thing, there are no samples of full outlines
at all. This document is at very best a supplement to Sweet’s original
manual. Hopefully it presents a more <em>systematic</em> introduction to the core
elements, which are themselves the most systematic of the overall theory.</p>
<p>Needless to say, there are many elements in the latter part of the section
that are arranged systematically and demonstrate productive principles
(rather than just being bags of arbitrarily drawn words). In time I hope
to get those together too.</p>
<hr />
<p><em>this article has been amended based on feedback from the kind folks at <a href="https://www.reddit.com/r/shorthand/comments/fvnr50/blog_post_a_curriculum_of_phonetic_current/">r/shorthand</a></em>.</p>
<section class="footnotes">
<ol>
<li id="fn1">
<p>Current comprises two separate but simpilar systems: <em>Orthographic</em>,
which represents spelling; and <em>Phonetic</em>, which represents sound. I
think that he imagined a practitioner would learn both. I haven’t, and I
don’t think you need to either. I learned Phonetic; an interested reader
can probably choose either one. <a href="#fnref1" class="footnote-backref">↩</a></p>
</li>
<li id="fn2">
<p>I will assume in this article that the reader has already passed that threshold. <a href="#fnref2" class="footnote-backref">↩</a></p>
</li>
<li id="fn3">
<p>It’s at this point that an uncomfortable truth must be outed:
Sweet was English, spoke in Received Pronunciation, and designed his
system to reflect that fact. This is particularly pertinent when it comes
to the vowels: in RP British English, of course, “r” after a vowel is
usually not pronounced as a consonant. Sometimes it is omitted entirely;
sometimes it lengthens a preceding /a/ into PALM vowel; sometimes it’s
realized as a schwa.</p>
<p>Current reflects this fact and, frankly, is at its best from a
phonetic perspective when the phonetics in question are RP rather than
American. As an example: it’s quite awkward indeed to write an /r/
sound after most vowels. It’s easier by far to write out how it would
sound in your best British accent. In practice, this becomes quite
natural. <a href="#fnref3" class="footnote-backref">↩</a></p>
</li>
<li id="fn4">
<p><em>tall</em> is a bad name, unnecessarily confusable with
<em>high</em>. <em>Full</em> would be more appropriate. <a href="#fnref4" class="footnote-backref">↩</a></p>
</li>
<li id="fn5">
<p>Any of these vowels can have a small up-loop
added after them, without any ambiguity, to indicate that vowel followed
by a schwa. This, along with the special double-down-hook forms for the
/u/ vowels, provides a way to follow every possible vowel by a schwa.</p>
<p>The utility of this is a little more obvious in light of the fact that the
phonetics in question is British Received Pronunciation. In nearly every
occasion that one would follow a vowel by an “r”—examples Sweet gives
include “carrier”, “career”, shower”, “follower”—it would be realized
in pronunciation as a schwa. <a href="#fnref5" class="footnote-backref">↩</a></p>
</li>
<li id="fn6">
<p>The DRESS, FACE, and schwa vowels, in particular, are usually
not necessary to write out with their full canonical symbols. The DRESS
and schwa vowels can usually be written with the <em>short stroke</em>, and the
<em>long stroke</em>, written from the baseline (as opposed from below it),
is a more convenient synonym for the FACE vowel. These symbols only
usually come into play when used in contractions or word signs. <a href="#fnref6" class="footnote-backref">↩</a></p>
</li>
<li id="fn7">
<p>This, along with the <sup class="footnote-ref"><a href="#fnschwaable" id="fnrefschwaable">schwaable</a></sup> vowels, completes an inventory
of vowels followed by a schwa. This is, as previously noted, particularly
important in a phonetic system based on Received Pronunciation, where
segments that an American would pronounce as the r-colored vowel /ɚ/
or as a schwa followed by an r /ər/ would instead be pronounced as a
bare schwa /ə/. <a href="#fnref7" class="footnote-backref">↩</a></p>
</li>
</ol>
</section>
</content>
</entry>
<entry>
  <title>A Curriculum of Vira</title>
  <link href="https://blog.zdsmith.com/posts/a-curriculum-of-vira.html" />
  <id>https://blog.zdsmith.com/posts/a-curriculum-of-vira.html</id>
  <updated>2019-12-27T00:00:00.00Z</updated>
  <content><p>We often find when learning card games that they consist of what could be
called <em>first-order rules</em>, which are the core rules of a game, or the
ones that lend it its distinctive flavor, a <em>second-order</em> ones, which
probably arose as correctives or adjustments to styles of play under the
first order<sup class="footnote-ref"><a href="#fn1" id="fnref1">1</a></sup>. This sort of thing is particularly difficult for those
of us who learn our card games out of books; whereas, in a traditional
folk setting, a new player would presumably start out at a simplified
level and additional dimensions would be introduced as they got a handle
on the rules, we get the whole thing dumped on us at once. Reading an
entire section like ‘bidding’ or ‘bonuses’, the bits that make up the
point of the game and the correctives and elaborations that have been
layered upon them are freely intermingled. For very few games—Bridge is
an exception that comes to mind—has there been documented a treatment
of the game for learners that increases gradually in complexity.</p>
<p>The distinction between first- and second-order rules, and the usefulness
in being able to differentiate, seems particularly strong in the Swedish
plain-trick game Vira. Vira is famous (among certain types) for its
complexity; I would argue it’s not nearly as complex as presented,
but it’s also not an <em>elegant</em> game. It has lots of elaborations on
elaborations, the sort of additional wrinkles that would only really
make sense to an already-seasoned player. The point of Vira seems to
be to take a standard three-person whist game and absolutely maximize
the number of biddable hands. In fact the actual card play is extremely
simple and regular; all the effort and complexity, at least that which
is not purely incidental (like what denominations of scoring chips you
need and what shape they take), has gone into presenting a variety of
ways to turn one’s hand into a contender to succeed at that play.</p>
<p>The effort manifests itself in the form of 40 different bids that players
can make<sup class="footnote-ref"><a href="#fn2" id="fnref2">2</a></sup>. In addition, some of these bids have some odd one-off
rules around them so that everything is kept competitive. Finally, each
one can have a few different values based on how exactly the bid was
made. But things like what levels you can bid at, and exactly how many
chips you make or lose, are incidental. It would be useful to introduce
the core concepts of the game, keeping a couple printed tables at
hand. If we adopted an incremental strategy it might be quite simple to
learn indeed.</p>
<p>This article consists of a series of versions of the game of Vira. The
intention is for each version to be fully playable and coherent; at
the same time, for each version to build logically upon the concepts
in place in the previous one, in a way that demonstrably provides for
a greater degree of variety and skill.</p>
<h1>Basic Vira</h1>
<h2>The deal</h2>
<p>Vira is played with a normal 52-card deck. 3 players a hand; four players
can play, with the dealer sitting out each turn. Dealer rotates clockwise.</p>
<p>The dealer will deal 13 cards to each player, leaving a stock of 13 on
the table. Then bidding begins to the dealer’s left.</p>
<h2>Bidding</h2>
<p>Players take turns bidding in order. Each player can either bid a higher
bid than the current bid, or pass. Since earlier players always have
precedence, an earlier player can “hold” a later player’s bid. When
two players have passed, the current bid wins and that player becomes
the declarer.</p>
<h2>Play</h2>
<p>Forehand always leads. Trick play is exactly like whist, plain-trick with
a trump suit; players must follow suit if they can, and if not they can
decide whether to trump or discard. The declarer plays against the other
two, and tries to take a certain number of tricks with their choice of
trump suit.</p>
<h2>Bids</h2>
<p>Many bids involve opponents exchanging cards with the stock. While the
procedure for the declarer exchanging cards is different depending on
the bid, the procedure for the opponents is always the same: the first
opponent discards and draws between 0 and however remain after the
declarer’s exchange, and then the last opponent can do the same with
however many the first opponent left.</p>
<h3>Game (6-9)</h3>
<p>This is the most basic bid. Bid at levels 6 through 9, where each number
is the number of tricks the declarer must make in order to make the
bid. Aside from the number of tricks, the levels are identical:</p>
<ol>
<li>Declarer names their trump suit;</li>
<li>Declarer discards any number of cards and draws the same number from the stock;</li>
<li>Opponents exchange.</li>
</ol>
<h3>Turn-one (6-8)</h3>
<p>This bid is just like a normal <em>game</em>, except instead of declaring
trumps the declarer turns the top card of the stock, and that card’s
suit becomes the trump suit. When the declarer exchanges, they must
exchange <em>at least</em> 1 card, which will be the card they turned.</p>
<h3>Turn-two (6-8)</h3>
<p>Just like <em>turn-one</em>, except the declarer turns the top 2 cards and chooses
among them for the trump suit. They must exchange at least two cards,
starting with the two they turned up.</p>
<h3>Turn-three (9)</h3>
<p>Just like <em>turn-two</em>, but with 3.</p>
<h2>Bid precedence</h2>
<table>
<thead>
<tr>
<th>bid</th>
</tr>
</thead>
<tbody>
<tr>
<td>Game 6</td>
</tr>
<tr>
<td>Turn-one 6</td>
</tr>
<tr>
<td>Game 7</td>
</tr>
<tr>
<td>Turn-two 6</td>
</tr>
<tr>
<td>Turn-one 7</td>
</tr>
<tr>
<td>Game 8</td>
</tr>
<tr>
<td>Turn-two 7</td>
</tr>
<tr>
<td>Turn-one 8</td>
</tr>
<tr>
<td>Turn-two 8</td>
</tr>
<tr>
<td>Game 9</td>
</tr>
<tr>
<td>Turn-three 9</td>
</tr>
</tbody>
</table>
<h1>Vira with preference</h1>
<p>We can increase the number of possible bids by naming a single suit
as <em>the suit of preference</em>. It doesn’t matter which one; it can be
determined before every hand, or named once for the whole game. For these
instructions we’ll assume that ♥ is always preference, in analogy to
other games with the same feature, such as Russian Preferans.</p>
<p>Every bid can now be outbid <em>either</em> by bidding a higher <em>contract</em>—for
instance, outbidding <em>Game 6</em> with <em>Game 7</em>—or by bidding a higher
<em>suit</em> in the same contract.</p>
<p>There are three suits: <em>plain</em>, <em>in color</em>, and <em>in preference</em>. Each one
determines what suits the bidder can name as trumps if that bid succeeds.</p>
<h2>Plain</h2>
<p>If the bid succeeds, the declarer can name any suit as trumps; ♠, ♣, ♦, ♥.</p>
<h2>In color</h2>
<p>If the bid succeeds the declarer can only name the suit of preference <em>or</em>
the suit of the same color as trumps; in our example, ♦ or ♥.</p>
<h2>In preference</h2>
<p>If the bid succeeds the declarer can only name the suit of preference
as trumps.</p>
<h1>Vira with payments</h1>
<p>We’ll keep score by adding a payment system for successful and
unsuccessful bids. We’ll use <em>points</em> as our unit of currency; this is
best represented by chips or tokens that can be passed between players and
put into the pot. As all payments into the central pool are in multiples
of 8, it’s useful to have a denomination of chip that stands for 8 points.</p>
<h2>Pool payments</h2>
<p>There’s a central pool that all players pay into and draw from. Each
bid has a certain value in points that players win if they make a bid,
and a certain value they have to pay into the pool if they lose.</p>
<table>
<thead>
<tr>
<th>bid</th>
<th>win</th>
<th>loss</th>
</tr>
</thead>
<tbody>
<tr>
<td>Game 6</td>
<td>8</td>
<td>8</td>
</tr>
<tr>
<td>Turn-one 6</td>
<td>8</td>
<td>8</td>
</tr>
<tr>
<td>Game 7</td>
<td>8</td>
<td>8</td>
</tr>
<tr>
<td>Turn-two 6</td>
<td>8</td>
<td>16</td>
</tr>
<tr>
<td>Turn-one 7</td>
<td>8</td>
<td>8</td>
</tr>
<tr>
<td>Game 8</td>
<td>8</td>
<td>8</td>
</tr>
<tr>
<td>Turn-two 7</td>
<td>8</td>
<td>16</td>
</tr>
<tr>
<td>Turn-one 8</td>
<td>16</td>
<td>8</td>
</tr>
<tr>
<td>Turn-two 8</td>
<td>16</td>
<td>16</td>
</tr>
<tr>
<td>Game 9</td>
<td>8</td>
<td>8</td>
</tr>
<tr>
<td>Turn-three 9</td>
<td>24</td>
<td>24</td>
</tr>
</tbody>
</table>
<p>We can see that the payments are generally the same. The turn- bids are
known as “gambling” bids because they have higher stakes.</p>
<h2>Player payments</h2>
<p>In addition to paying out to the pool, bids can also have a value
associated with them that are paid directly by each opponent to the
declarer in the case of a win, or by the declarer to each opponent in
the case of a loss.</p>
<p>The amount paid here is determined by the suit level of the bid: there
are amounts for a plain bid, a bid in color, and a bid in preference. It’s
the same for a win or a loss.</p>
<table>
<thead>
<tr>
<th>bid</th>
<th>plain</th>
<th>in color</th>
<th>in preference</th>
</tr>
</thead>
<tbody>
<tr>
<td>Game 6</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>Turn-one 6</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>Game 7</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>Turn-two 6</td>
<td>0</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>Turn-one 7</td>
<td>0</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>Game 8</td>
<td>0</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>Turn-two 7</td>
<td>1</td>
<td>1</td>
<td>3</td>
</tr>
<tr>
<td>Turn-one 8</td>
<td>1</td>
<td>1</td>
<td>3</td>
</tr>
<tr>
<td>Turn-two 8</td>
<td>1</td>
<td>3</td>
<td>5</td>
</tr>
<tr>
<td>Game 9</td>
<td>1</td>
<td>1</td>
<td>3</td>
</tr>
<tr>
<td>Turn-three 9</td>
<td>3</td>
<td>5</td>
<td>11</td>
</tr>
</tbody>
</table>
<h1>Vira with codille</h1>
<p>We can increase the stakes and skill level by penalizing players who badly
fail to make their bids. Any time the declarer fails to make their bid by
1 trick, we’ll call it a <em>simple</em> loss. If they fail by 2 or more tricks,
they’ve lost by <em>codille</em>.</p>
<p>If a player loses by codille, they have to pay a greater amount to
the pool.</p>
<table>
<thead>
<tr>
<th>bid</th>
<th>win</th>
<th>loss</th>
<th>codille</th>
</tr>
</thead>
<tbody>
<tr>
<td>Game 6</td>
<td>8</td>
<td>8</td>
<td>16</td>
</tr>
<tr>
<td>Turn-one 6</td>
<td>8</td>
<td>8</td>
<td>16</td>
</tr>
<tr>
<td>Game 7</td>
<td>8</td>
<td>8</td>
<td>16</td>
</tr>
<tr>
<td>Turn-two 6</td>
<td>8</td>
<td>16</td>
<td>32</td>
</tr>
<tr>
<td>Turn-one 7</td>
<td>8</td>
<td>8</td>
<td>16</td>
</tr>
<tr>
<td>Game 8</td>
<td>8</td>
<td>8</td>
<td>16</td>
</tr>
<tr>
<td>Turn-two 7</td>
<td>8</td>
<td>16</td>
<td>32</td>
</tr>
<tr>
<td>Turn-one 8</td>
<td>16</td>
<td>8</td>
<td>16</td>
</tr>
<tr>
<td>Turn-two 8</td>
<td>16</td>
<td>16</td>
<td>32</td>
</tr>
<tr>
<td>Game 9</td>
<td>8</td>
<td>8</td>
<td>16</td>
</tr>
<tr>
<td>Turn-three 9</td>
<td>24</td>
<td>24</td>
<td>48</td>
</tr>
</tbody>
</table>
<h1>Vira with folding</h1>
<p>Now that it’s particularly costly to lose badly, players might want
to fold rather than play if it means they can pay for a simple loss,
rather than a codille. In any bid, after the declarer exchanges, they
can choose to fold rather than keep playing. The process is now:</p>
<ol>
<li>Declarer names their trump suit;</li>
<li>Declarer discards any number of cards and draws the same number from the stock;</li>
<li>Declarer decides to fold or continue;</li>
<li>(if declarer continues) Opponents exchange.</li>
</ol>
<h1>Vira with a second exchange</h1>
<p>We can provide a second way for a declarer to cut their losses if, after
their exchange, they think that they won’t be able to make their
bid. After their exchange, if they haven’t used up the whole stock,
they can actually exchange <em>a second time</em>. This obviously provides a
much better shot at making a bid, and therefore will actually, usually,
amount to a net loss. However, the overall loss when winning on the
second exchange will be less than losing by codille on the first.</p>
<p>The order for the declarer now looks like this:</p>
<ol>
<li>Declarer names their trump suit;</li>
<li>Declarer discards any number of cards and draws the same number from the stock;</li>
<li>Declarer decides to fold, exchange again, or continue;</li>
<li>(if declarer continues) Opponents exchange.</li>
</ol>
<p>If the declarer decides to exchange again they must pay their opponents
as though they’ve lost. They don’t have to pay the pool.</p>
<p>In addition to the payment to their opponents, the win/lose/codille
values are different for a declarer who’s exchanged twice:</p>
<table>
<thead>
<tr>
<th>bid</th>
<th>w</th>
<th>l</th>
<th>c</th>
<th>2nd exch.</th>
<th>w</th>
<th>l</th>
<th>c</th>
</tr>
</thead>
<tbody>
<tr>
<td>Game 6</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>0</td>
<td>24</td>
<td>40</td>
</tr>
<tr>
<td>Turn-one 6</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>0</td>
<td>24</td>
<td>40</td>
</tr>
<tr>
<td>Game 7</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>0</td>
<td>24</td>
<td>40</td>
</tr>
<tr>
<td>Turn-two 6</td>
<td>8</td>
<td>16</td>
<td>32</td>
<td></td>
<td>0</td>
<td>48</td>
<td>80</td>
</tr>
<tr>
<td>Turn-one 7</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>0</td>
<td>24</td>
<td>40</td>
</tr>
<tr>
<td>Game 8</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>0</td>
<td>24</td>
<td>40</td>
</tr>
<tr>
<td>Turn-two 7</td>
<td>8</td>
<td>16</td>
<td>32</td>
<td></td>
<td>0</td>
<td>48</td>
<td>80</td>
</tr>
<tr>
<td>Turn-one 8</td>
<td>16</td>
<td>8</td>
<td>16</td>
<td></td>
<td>0</td>
<td>24</td>
<td>40</td>
</tr>
<tr>
<td>Turn-two 8</td>
<td>16</td>
<td>16</td>
<td>32</td>
<td></td>
<td>0</td>
<td>48</td>
<td>80</td>
</tr>
<tr>
<td>Game 9</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>0</td>
<td>24</td>
<td>40</td>
</tr>
<tr>
<td>Turn-three 9</td>
<td>24</td>
<td>24</td>
<td>48</td>
<td></td>
<td>8</td>
<td>72</td>
<td>120</td>
</tr>
</tbody>
</table>
<h1>Vira with misère</h1>
<p>All of the features of the game are now in place. What remains is
introduce the rest of the bids.</p>
<p>The main point as we develop the game is to increase the number of
biddable hands. That is, to introduce different types of bids that favor
other hands so that any player might have a chance at making a bid if
they’re lucky.</p>
<p>The basic bids obviously favor <em>strong</em> hands; the declarer makes their
bid by making a certain number of tricks, and the bids are ordered by
the number of tricks, so the bidder with the strongest hand will win
their bid. We can introduce <em>misère</em> bids, where the aim is to <em>lose all the tricks</em>,
in order to give players with very <em>weak</em> hands an equal opportunity to bid.</p>
<p>Rules for play at misère are identical to normal play: players must
follow suit and the high card takes the trick. The one difference is
that all misère games are played at <em>no trump</em>: the declarer doesn’t
declare a trump suit, and no card can take a trick if it isn’t of the
the suit that was led. If the declarer takes a single trick, they <em>lose</em>
the bid; if they take 2 or more tricks, they lose by <em>codille</em>.</p>
<h2>Bids</h2>
<h3>Gök</h3>
<p>The simplest and easiest misère bid is <em>gök</em>. It proceeds as follows:</p>
<ol>
<li>Declarer takes the whole stock;</li>
<li>Declarer discards 13 cards;</li>
<li>Declarer decides to fold or continue;</li>
<li>Declarer turns their hand face-up.</li>
</ol>
<p>As usual, forehand leads and the declarer then attempts to lose all
13 tricks.</p>
<h3>Misère (1-6)</h3>
<p>There are standard misère bids played at levels 1-6. The aim is always
to lose all the tricks; in this case, the levels determine how many
cards are exchanged. The procedure is:</p>
<ol>
<li>Declarer discards the number of cards equal to their bid;</li>
<li>Declarer draws the same number from the stock;</li>
<li>Declarer decides to fold, exchange again, or continue;</li>
<li>(if declarer continues) Opponents exchange.</li>
</ol>
<p>Before playing, declarer also discards some additional cards.</p>
<ul>
<li>(level 1): declarer discards 2 cards.</li>
<li>(level 2-6): declarer discards 1 card.</li>
</ul>
<p>The declarer will therefore have fewer cards than the opponents. When
they’ve played all their cards, the hand is over. Unlike at Gök, the
declarer plays closed.</p>
<h2>Pool payments</h2>
<p>Since Gök involves taking the whole stock, no second exchange is
possible.</p>
<table>
<thead>
<tr>
<th>bid</th>
<th>w</th>
<th>l</th>
<th>c</th>
<th>2nd exch.</th>
<th>w</th>
<th>l</th>
<th>c</th>
</tr>
</thead>
<tbody>
<tr>
<td>Game 6</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>0</td>
<td>24</td>
<td>40</td>
</tr>
<tr>
<td>Turn-one 6</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>0</td>
<td>24</td>
<td>40</td>
</tr>
<tr>
<td>Game 7</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>0</td>
<td>24</td>
<td>40</td>
</tr>
<tr>
<td>Turn-two 6</td>
<td>8</td>
<td>16</td>
<td>32</td>
<td></td>
<td>0</td>
<td>48</td>
<td>80</td>
</tr>
<tr>
<td>Gök</td>
<td>8</td>
<td>16</td>
<td>32</td>
<td></td>
<td>-</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Turn-one 7</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>0</td>
<td>24</td>
<td>40</td>
</tr>
<tr>
<td>Misère 1</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>0</td>
<td>24</td>
<td>40</td>
</tr>
<tr>
<td>Game 8</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>0</td>
<td>24</td>
<td>40</td>
</tr>
<tr>
<td>Turn-two 7</td>
<td>8</td>
<td>16</td>
<td>32</td>
<td></td>
<td>0</td>
<td>48</td>
<td>80</td>
</tr>
<tr>
<td>Turn-one 8</td>
<td>16</td>
<td>8</td>
<td>16</td>
<td></td>
<td>0</td>
<td>24</td>
<td>40</td>
</tr>
<tr>
<td>Misère 2</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>0</td>
<td>24</td>
<td>40</td>
</tr>
<tr>
<td>Turn-two 8</td>
<td>16</td>
<td>16</td>
<td>32</td>
<td></td>
<td>0</td>
<td>48</td>
<td>80</td>
</tr>
<tr>
<td>Misère 3</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>0</td>
<td>24</td>
<td>40</td>
</tr>
<tr>
<td>Game 9</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>0</td>
<td>24</td>
<td>40</td>
</tr>
<tr>
<td>Misère 4</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>0</td>
<td>24</td>
<td>40</td>
</tr>
<tr>
<td>Turn-three 9</td>
<td>24</td>
<td>24</td>
<td>48</td>
<td></td>
<td>8</td>
<td>72</td>
<td>120</td>
</tr>
<tr>
<td>Misère 5</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>0</td>
<td>24</td>
<td>40</td>
</tr>
<tr>
<td>Misère 6</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>0</td>
<td>24</td>
<td>40</td>
</tr>
</tbody>
</table>
<h2>Player payments</h2>
<p>Since all misère bids are at no-trumps, “in color” and “in preference”
don’t apply.</p>
<table>
<thead>
<tr>
<th>bid</th>
<th>*</th>
<th>c</th>
<th>p</th>
</tr>
</thead>
<tbody>
<tr>
<td>Game 6</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>Turn-one 6</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>Game 7</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>Turn-two 6</td>
<td>0</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>Gök</td>
<td>0</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Turn-one 7</td>
<td>0</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>Misère 1</td>
<td>0</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Game 8</td>
<td>0</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>Turn-two 7</td>
<td>1</td>
<td>1</td>
<td>3</td>
</tr>
<tr>
<td>Turn-one 8</td>
<td>1</td>
<td>1</td>
<td>3</td>
</tr>
<tr>
<td>Misère 2</td>
<td>0</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Turn-two 8</td>
<td>1</td>
<td>3</td>
<td>5</td>
</tr>
<tr>
<td>Misère 3</td>
<td>0</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Game 9</td>
<td>1</td>
<td>1</td>
<td>3</td>
</tr>
<tr>
<td>Misère 4</td>
<td>1</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Turn-three 9</td>
<td>3</td>
<td>5</td>
<td>11</td>
</tr>
<tr>
<td>Misère 5</td>
<td>1</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Misère 6</td>
<td>1</td>
<td>-</td>
<td>-</td>
</tr>
</tbody>
</table>
<h1>Vira with choice bids</h1>
<p>The final type of “low” bid is <em>gask</em>, which allows the declarer to
<em>choose</em> after the exchange whether they want to play a trumps game or
at misère.</p>
<h2>Gask (0-5)</h2>
<p>Gask is also bid at different levels. Here each level corresponds directly
to the number of cards the player <em>keeps</em> when exchanging. If they decide
to play a positive game, the level will also determine how many tricks
they need to take.</p>
<p>The procedure to play a gask contract is as follows:</p>
<ol>
<li>Declarer discards (13 - the level of their bid) cards;</li>
<li>Declarer takes the entire stock;</li>
<li>Declarer discards a number of cards equal to the level of their bid (back down to 13);</li>
<li>Declarer decides to fold or continue;</li>
<li>(if declarer continues) depending on the level of the bid:
<ul>
<li>level 0: the declarer may:
<ol>
<li>name a trump suit; play to win 7 tricks;</li>
<li>discard an additional 2 cards; play misère.</li>
</ol>
</li>
<li>level 1: the declarer may:
<ol>
<li>name a trump suit; play to win 8 tricks;</li>
<li>discard an additional card; play misère.</li>
</ol>
</li>
<li>level 2: the declarer may:
<ol>
<li>name a trump suit; play to win 9 tricks;</li>
<li>discard 0 cards; play misère.</li>
</ol>
</li>
<li>level 3: the declarer may:
<ol>
<li>name a trump suit; play to win 10 tricks;</li>
<li>discard an additional card; turn hand face-up; play misère.</li>
</ol>
</li>
<li>level 4: the declarer may:
<ol>
<li>name a trump suit; play to win 11 tricks;</li>
<li>discard no cards; turn hand face-up; play misère.</li>
</ol>
</li>
<li>level 5, level 6: declarer names a trump suit; plays to win 12 tricks.</li>
</ul>
</li>
</ol>
<p>Gask <em>may</em> be bid <em>in color</em> and <em>in preference</em>; however, such a bid
forces the declarer to play a positive game.</p>
<h2>Pool payments</h2>
<p>Since Gask involves taking the entire stock, there is no possibility
for a second exchange. Gask 5 is ranked <em>higher</em> than Gask 6.</p>
<table>
<thead>
<tr>
<th>bid</th>
<th>w</th>
<th>l</th>
<th>c</th>
<th>2nd exch.</th>
<th>w</th>
<th>l</th>
<th>c</th>
</tr>
</thead>
<tbody>
<tr>
<td>Game 6</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>0</td>
<td>24</td>
<td>40</td>
</tr>
<tr>
<td>Turn-one 6</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>0</td>
<td>24</td>
<td>40</td>
</tr>
<tr>
<td>Game 7</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>0</td>
<td>24</td>
<td>40</td>
</tr>
<tr>
<td>Turn-two 6</td>
<td>8</td>
<td>16</td>
<td>32</td>
<td></td>
<td>0</td>
<td>48</td>
<td>80</td>
</tr>
<tr>
<td>Gask 0</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>-</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Gök</td>
<td>8</td>
<td>16</td>
<td>32</td>
<td></td>
<td>-</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Turn-one 7</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>0</td>
<td>24</td>
<td>40</td>
</tr>
<tr>
<td>Misère 1</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>0</td>
<td>24</td>
<td>40</td>
</tr>
<tr>
<td>Gask 1</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>-</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Game 8</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>0</td>
<td>24</td>
<td>40</td>
</tr>
<tr>
<td>Turn-two 7</td>
<td>8</td>
<td>16</td>
<td>32</td>
<td></td>
<td>0</td>
<td>48</td>
<td>80</td>
</tr>
<tr>
<td>Turn-one 8</td>
<td>16</td>
<td>8</td>
<td>16</td>
<td></td>
<td>0</td>
<td>24</td>
<td>40</td>
</tr>
<tr>
<td>Misère 2</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>0</td>
<td>24</td>
<td>40</td>
</tr>
<tr>
<td>Gask 2</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>-</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Turn-two 8</td>
<td>16</td>
<td>16</td>
<td>32</td>
<td></td>
<td>0</td>
<td>48</td>
<td>80</td>
</tr>
<tr>
<td>Misère 3</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>0</td>
<td>24</td>
<td>40</td>
</tr>
<tr>
<td>Gask 3</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>-</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Game 9</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>0</td>
<td>24</td>
<td>40</td>
</tr>
<tr>
<td>Misère 4</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>0</td>
<td>24</td>
<td>40</td>
</tr>
<tr>
<td>Gask 4</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>-</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Turn-three 9</td>
<td>24</td>
<td>24</td>
<td>48</td>
<td></td>
<td>8</td>
<td>72</td>
<td>120</td>
</tr>
<tr>
<td>Misère 5</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>0</td>
<td>24</td>
<td>40</td>
</tr>
<tr>
<td>Gask 6</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>-</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Misère 6</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>0</td>
<td>24</td>
<td>40</td>
</tr>
<tr>
<td>Gask 5</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>-</td>
<td>-</td>
<td>-</td>
</tr>
</tbody>
</table>
<h2>Player payments</h2>
<table>
<thead>
<tr>
<th>bid</th>
<th>*</th>
<th>c</th>
<th>p</th>
</tr>
</thead>
<tbody>
<tr>
<td>Game 6</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>Turn-one 6</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>Game 7</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>Turn-two 6</td>
<td>0</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>Gask 0</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>Gök</td>
<td>0</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Turn-one 7</td>
<td>0</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>Misère 1</td>
<td>0</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Gask 1</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>Game 8</td>
<td>0</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>Turn-two 7</td>
<td>1</td>
<td>1</td>
<td>3</td>
</tr>
<tr>
<td>Turn-one 8</td>
<td>1</td>
<td>1</td>
<td>3</td>
</tr>
<tr>
<td>Misère 2</td>
<td>0</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Gask 2</td>
<td>0</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>Turn-two 8</td>
<td>1</td>
<td>3</td>
<td>5</td>
</tr>
<tr>
<td>Misère 3</td>
<td>0</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Gask 3</td>
<td>0</td>
<td>1</td>
<td>2</td>
</tr>
<tr>
<td>Game 9</td>
<td>1</td>
<td>1</td>
<td>3</td>
</tr>
<tr>
<td>Misère 4</td>
<td>1</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Gask 4</td>
<td>1</td>
<td>1</td>
<td>3</td>
</tr>
<tr>
<td>Turn-three 9</td>
<td>3</td>
<td>5</td>
<td>11</td>
</tr>
<tr>
<td>Misère 5</td>
<td>1</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Gask 6</td>
<td>1</td>
<td>2</td>
<td>4</td>
</tr>
<tr>
<td>Misère 6</td>
<td>1</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Gask 5</td>
<td>1</td>
<td>3</td>
<td>5</td>
</tr>
</tbody>
</table>
<h1>Vira with gök conventions</h1>
<p>Gök is an odd-man-out contract and has some unique characteristics. Chief
among them is that gök is the only bid which has an established rule
around <em>passing</em>: if a player bids gök, their opponents may <em>not</em>
pass unless they hold certain cards.</p>
<p>In particular, the opponent after the declarer must hold at least 2 <em>low guards</em>.
If they pass, then the third opponent must have at least 1 <em>low guard</em>
in order to pass.</p>
<p>If a player passes on this bid without the required cards and the declarer
ends up making their bid, that player must pay an additional penalty of
8 points into the pool.</p>
<h2>Low guards</h2>
<p>A low guard is the low equivalent of a “stop”; that is, a combination
of cards that guarantee the holder will lose at least one trick. They are,
within any single suit, any of the following:</p>
<ul>
<li>any 2</li>
<li>4-3</li>
<li>6-5-4</li>
<li>6-5-3</li>
<li>8-7-6-5</li>
<li>8-7-6-4</li>
<li>8-7-6-3</li>
<li>8-7-5-4</li>
<li>8-7-5-3</li>
</ul>
<h1>Vira with advanced bids</h1>
<p>We can introduce some varsity-level bids now to reward highly-skilled
players, or at least stacked hands. We can add to the table a series of
more challenging bids, where the declarer lacks the advantage of the draw,
or has to take many more tricks, or both.</p>
<h2>Bids</h2>
<h3>Solo (6-13)</h3>
<p><em>Solo</em> is directly comparable to a standard game bid, with the difference
that the declarer does <em>not</em> exchange. It has the same level dynamic,
where the level indicates the number of tricks to be taken.</p>
<ol>
<li>Declarer names their trump suit;</li>
<li>Declarer decides to fold or continue;</li>
<li>(if declarer continues) Opponents exchange.</li>
</ol>
<h3>Vira</h3>
<p>On the other hand, the eponymous <em>vira</em> is a positive analog to
gök. Instead of playing <em>misère ouverte</em>, the declarer plays closed
and attempts to take all 13 tricks.</p>
<ol>
<li>Declarer takes the whole stock;</li>
<li>Declarer discards 13 cards;</li>
<li>Declarer decides to fold or continue;</li>
<li>Declarer names their trump suit.</li>
</ol>
<h2>Pool payments</h2>
<p>In solo the declarer doesn’t exchange, and in vira the declarer exchanges
the entire talon, so neither one can perform a second exchange.</p>
<table>
<thead>
<tr>
<th>bid</th>
<th>w</th>
<th>l</th>
<th>c</th>
<th>2nd exch.</th>
<th>w</th>
<th>l</th>
<th>c</th>
</tr>
</thead>
<tbody>
<tr>
<td>Game 6</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>0</td>
<td>24</td>
<td>40</td>
</tr>
<tr>
<td>Turn-one 6</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>0</td>
<td>24</td>
<td>40</td>
</tr>
<tr>
<td>Game 7</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>0</td>
<td>24</td>
<td>40</td>
</tr>
<tr>
<td>Turn-two 6</td>
<td>8</td>
<td>16</td>
<td>32</td>
<td></td>
<td>0</td>
<td>48</td>
<td>80</td>
</tr>
<tr>
<td>Gask 0</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>-</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Gök</td>
<td>8</td>
<td>16</td>
<td>32</td>
<td></td>
<td>-</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Turn-one 7</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>0</td>
<td>24</td>
<td>40</td>
</tr>
<tr>
<td>Misère 1</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>0</td>
<td>24</td>
<td>40</td>
</tr>
<tr>
<td>Gask 1</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>-</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Game 8</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>0</td>
<td>24</td>
<td>40</td>
</tr>
<tr>
<td>Turn-two 7</td>
<td>8</td>
<td>16</td>
<td>32</td>
<td></td>
<td>0</td>
<td>48</td>
<td>80</td>
</tr>
<tr>
<td>Turn-one 8</td>
<td>16</td>
<td>8</td>
<td>16</td>
<td></td>
<td>0</td>
<td>24</td>
<td>40</td>
</tr>
<tr>
<td>Misère 2</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>0</td>
<td>24</td>
<td>40</td>
</tr>
<tr>
<td>Gask 2</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>-</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Solo 6</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>-</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Turn-two 8</td>
<td>16</td>
<td>16</td>
<td>32</td>
<td></td>
<td>0</td>
<td>48</td>
<td>80</td>
</tr>
<tr>
<td>Misère 3</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>0</td>
<td>24</td>
<td>40</td>
</tr>
<tr>
<td>Gask 3</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>-</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Game 9</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>0</td>
<td>24</td>
<td>40</td>
</tr>
<tr>
<td>Misère 4</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>0</td>
<td>24</td>
<td>40</td>
</tr>
<tr>
<td>Gask 4</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>-</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Turn-three 9</td>
<td>24</td>
<td>24</td>
<td>48</td>
<td></td>
<td>8</td>
<td>72</td>
<td>120</td>
</tr>
<tr>
<td>Misère 5</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>0</td>
<td>24</td>
<td>40</td>
</tr>
<tr>
<td>Gask 6</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>-</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Solo 7</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>-</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Misère 6</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>0</td>
<td>24</td>
<td>40</td>
</tr>
<tr>
<td>Gask 5</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>-</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Solo 8</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>-</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Vira</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>-</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Solo 9</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>-</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Solo 10</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>-</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Solo 11</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>-</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Solo 12</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>-</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Solo 13</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>-</td>
<td>-</td>
<td>-</td>
</tr>
</tbody>
</table>
<h2>Player payments</h2>
<table>
<thead>
<tr>
<th>bid</th>
<th>*</th>
<th>c</th>
<th>p</th>
</tr>
</thead>
<tbody>
<tr>
<td>Game 6</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>Turn-one 6</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>Game 7</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>Turn-two 6</td>
<td>0</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>Gask 0</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>Gök</td>
<td>0</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Turn-one 7</td>
<td>0</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>Misère 1</td>
<td>0</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Gask 1</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>Game 8</td>
<td>0</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>Turn-two 7</td>
<td>1</td>
<td>1</td>
<td>3</td>
</tr>
<tr>
<td>Turn-one 8</td>
<td>1</td>
<td>1</td>
<td>3</td>
</tr>
<tr>
<td>Misère 2</td>
<td>0</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Gask 2</td>
<td>0</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>Solo 6</td>
<td>0</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>Turn-two 8</td>
<td>1</td>
<td>3</td>
<td>5</td>
</tr>
<tr>
<td>Misère 3</td>
<td>0</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Gask 3</td>
<td>0</td>
<td>1</td>
<td>2</td>
</tr>
<tr>
<td>Game 9</td>
<td>1</td>
<td>1</td>
<td>3</td>
</tr>
<tr>
<td>Misère 4</td>
<td>1</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Gask 4</td>
<td>1</td>
<td>1</td>
<td>3</td>
</tr>
<tr>
<td>Turn-three 9</td>
<td>3</td>
<td>5</td>
<td>11</td>
</tr>
<tr>
<td>Misère 5</td>
<td>1</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Gask 6</td>
<td>1</td>
<td>2</td>
<td>4</td>
</tr>
<tr>
<td>Solo 7</td>
<td>0</td>
<td>1</td>
<td>2</td>
</tr>
<tr>
<td>Misère 6</td>
<td>1</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Gask 5</td>
<td>1</td>
<td>3</td>
<td>5</td>
</tr>
<tr>
<td>Solo 8</td>
<td>1</td>
<td>2</td>
<td>4</td>
</tr>
<tr>
<td>Vira</td>
<td>2</td>
<td>4</td>
<td>8</td>
</tr>
<tr>
<td>Solo 9</td>
<td>2</td>
<td>4</td>
<td>8</td>
</tr>
<tr>
<td>Solo 10</td>
<td>4</td>
<td>8</td>
<td>16</td>
</tr>
<tr>
<td>Solo 11</td>
<td>8</td>
<td>16</td>
<td>32</td>
</tr>
<tr>
<td>Solo 12</td>
<td>16</td>
<td>32</td>
<td>64</td>
</tr>
<tr>
<td>Solo 13</td>
<td>32</td>
<td>64</td>
<td>128</td>
</tr>
</tbody>
</table>
<h1>Vira with exceptional bids</h1>
<p>The final elaboration we can add, completing our bidding table, is a
set of negative contracts roughly equal to solo/vira in terms of rarity.</p>
<p>There are six <em>solo misère</em> bids, which are played misère
without exchange. As with all negative bids, the aim is to lose all
tricks. Instead of levels, then, their distinguishing features are:
open/closed, with/without a single discard, and turn up before/after
opponent exchange.</p>
<h2>Bids</h2>
<p>Each of the following bids has the same basic structure: declarer does
not exchange, and attempts to lose all tricks. Following are the
structural differences in each contract:</p>
<h3>Solo petite misère</h3>
<ol>
<li>Declarer discards 1 card;</li>
<li>Opponents exchange.</li>
</ol>
<h3>Solo grande misère</h3>
<ol>
<li>Opponents exchange.</li>
</ol>
<h3>Solo petite misère ouverte</h3>
<ol>
<li>Declarer discards 1 card;</li>
<li>Opponents exchange;</li>
<li>Declarer turns hand face-up.</li>
</ol>
<h3>Solo grande misère ouverte</h3>
<ol>
<li>Opponents exchange;</li>
<li>Declarer turns hand face-up.</li>
</ol>
<h3>Solo petite misère ouverte royale</h3>
<ol>
<li>Declarer discards 1 card;</li>
<li>Declarer turns hand face-up;</li>
<li>Opponents exchange.</li>
</ol>
<h3>Solo grande misère ouverte royale</h3>
<ol>
<li>Declarer turns hand face-up.</li>
<li>Opponents exchange.</li>
</ol>
<p>In this contract (and only this contract), the opponents can also show
each other their cards and discuss their exchange.</p>
<h2>Pool payments</h2>
<table>
<thead>
<tr>
<th>bid</th>
<th>w</th>
<th>l</th>
<th>c</th>
<th>2nd exch.</th>
<th>w</th>
<th>l</th>
<th>c</th>
</tr>
</thead>
<tbody>
<tr>
<td>Game 6</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>0</td>
<td>24</td>
<td>40</td>
</tr>
<tr>
<td>Turn-one 6</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>0</td>
<td>24</td>
<td>40</td>
</tr>
<tr>
<td>Game 7</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>0</td>
<td>24</td>
<td>40</td>
</tr>
<tr>
<td>Turn-two 6</td>
<td>8</td>
<td>16</td>
<td>32</td>
<td></td>
<td>0</td>
<td>48</td>
<td>80</td>
</tr>
<tr>
<td>Gask 0</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>-</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Gök</td>
<td>8</td>
<td>16</td>
<td>32</td>
<td></td>
<td>-</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Turn-one 7</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>0</td>
<td>24</td>
<td>40</td>
</tr>
<tr>
<td>Misère 1</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>0</td>
<td>24</td>
<td>40</td>
</tr>
<tr>
<td>Gask 1</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>-</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Game 8</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>0</td>
<td>24</td>
<td>40</td>
</tr>
<tr>
<td>Turn-two 7</td>
<td>8</td>
<td>16</td>
<td>32</td>
<td></td>
<td>0</td>
<td>48</td>
<td>80</td>
</tr>
<tr>
<td>Turn-one 8</td>
<td>16</td>
<td>8</td>
<td>16</td>
<td></td>
<td>0</td>
<td>24</td>
<td>40</td>
</tr>
<tr>
<td>Misère 2</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>0</td>
<td>24</td>
<td>40</td>
</tr>
<tr>
<td>Gask 2</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>-</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Solo 6</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>-</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Turn-two 8</td>
<td>16</td>
<td>16</td>
<td>32</td>
<td></td>
<td>0</td>
<td>48</td>
<td>80</td>
</tr>
<tr>
<td>Misère 3</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>0</td>
<td>24</td>
<td>40</td>
</tr>
<tr>
<td>Gask 3</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>-</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Game 9</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>0</td>
<td>24</td>
<td>40</td>
</tr>
<tr>
<td>Misère 4</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>0</td>
<td>24</td>
<td>40</td>
</tr>
<tr>
<td>Gask 4</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>-</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Turn-three 9</td>
<td>24</td>
<td>24</td>
<td>48</td>
<td></td>
<td>8</td>
<td>72</td>
<td>120</td>
</tr>
<tr>
<td>Misère 5</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>0</td>
<td>24</td>
<td>40</td>
</tr>
<tr>
<td>Gask 6</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>-</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Solo 7</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>-</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Misère 6</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>0</td>
<td>24</td>
<td>40</td>
</tr>
<tr>
<td>Gask 5</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>-</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Solo 8</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>-</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Vira</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>-</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Solo Petite Misère</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>-</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Solo 9</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>-</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Solo Grande Misère</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>-</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Solo 10</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>-</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Solo Petite Misère Ouverte</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>-</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Solo Petite Misère Ouverte Royale</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>-</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Solo 11</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>-</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Solo Grande Misère Ouverte</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>-</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Solo Grande Misère Ouverte Royale</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>-</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Solo 12</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>-</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Solo 13</td>
<td>8</td>
<td>8</td>
<td>16</td>
<td></td>
<td>-</td>
<td>-</td>
<td>-</td>
</tr>
</tbody>
</table>
<h2>Player payments</h2>
<table>
<thead>
<tr>
<th>bid</th>
<th>*</th>
<th>c</th>
<th>p</th>
</tr>
</thead>
<tbody>
<tr>
<td>Game 6</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>Turn-one 6</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>Game 7</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>Turn-two 6</td>
<td>0</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>Gask 0</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>Gök</td>
<td>0</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Turn-one 7</td>
<td>0</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>Misère 1</td>
<td>0</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Gask 1</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>Game 8</td>
<td>0</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>Turn-two 7</td>
<td>1</td>
<td>1</td>
<td>3</td>
</tr>
<tr>
<td>Turn-one 8</td>
<td>1</td>
<td>1</td>
<td>3</td>
</tr>
<tr>
<td>Misère 2</td>
<td>0</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Gask 2</td>
<td>0</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>Solo 6</td>
<td>0</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>Turn-two 8</td>
<td>1</td>
<td>3</td>
<td>5</td>
</tr>
<tr>
<td>Misère 3</td>
<td>0</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Gask 3</td>
<td>0</td>
<td>1</td>
<td>2</td>
</tr>
<tr>
<td>Game 9</td>
<td>1</td>
<td>1</td>
<td>3</td>
</tr>
<tr>
<td>Misère 4</td>
<td>1</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Gask 4</td>
<td>1</td>
<td>1</td>
<td>3</td>
</tr>
<tr>
<td>Turn-three 9</td>
<td>3</td>
<td>5</td>
<td>11</td>
</tr>
<tr>
<td>Misère 5</td>
<td>1</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Gask 6</td>
<td>1</td>
<td>2</td>
<td>4</td>
</tr>
<tr>
<td>Solo 7</td>
<td>0</td>
<td>1</td>
<td>2</td>
</tr>
<tr>
<td>Misère 6</td>
<td>1</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Gask 5</td>
<td>1</td>
<td>3</td>
<td>5</td>
</tr>
<tr>
<td>Solo 8</td>
<td>1</td>
<td>2</td>
<td>4</td>
</tr>
<tr>
<td>Vira</td>
<td>2</td>
<td>4</td>
<td>8</td>
</tr>
<tr>
<td>Solo Petite Misere</td>
<td>2</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Solo 9</td>
<td>2</td>
<td>4</td>
<td>8</td>
</tr>
<tr>
<td>Solo Grande Misere</td>
<td>4</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Solo 10</td>
<td>4</td>
<td>8</td>
<td>16</td>
</tr>
<tr>
<td>Solo Petite Misere Ouverte</td>
<td>8</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Solo Petite Misere Ouverte Royale</td>
<td>16</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Solo 11</td>
<td>8</td>
<td>16</td>
<td>32</td>
</tr>
<tr>
<td>Solo Grande Misere Ouverte</td>
<td>24</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Solo Grande Misere Ouverte Royale</td>
<td>32</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>Solo 12</td>
<td>16</td>
<td>32</td>
<td>64</td>
</tr>
<tr>
<td>Solo 13</td>
<td>32</td>
<td>64</td>
<td>128</td>
</tr>
</tbody>
</table>
<h1>Vira strategy and background</h1>
<p>We are at the final incarnation of our game. There are of course variations:</p>
<ul>
<li>different historical versions, some of which are still played;</li>
<li>regional variations;</li>
<li>non-structural variations like how to determine preference and how to keep score.</li>
</ul>
<p>There are also conventions and rules of thumb which some might argue
are integral to the game itself.</p>
<p>For further research, there are two English-language documents that I’ve
used as source material for this account:</p>
<ul>
<li><a href="https://www.pagat.com/boston/vira.html">the Vira page at Pagat.com</a></li>
<li><a href="https://boardgamegeek.com/thread/2158558/how-play-vira">Raymond Gallardo’s account on BoardGameGeek</a></li>
</ul>
<p>If I have missed any necessary structural elements, please let me know!</p>
<section class="footnotes">
<ol>
<li id="fn1">
<p>To give an elementary example: in many tarok versions you can
announce or play <em>pagat ultimo</em>, whereby you score extra points by taking
the last trick with the lowest trump. This feat requires being able
to hold on to it until the last trick, of course, as well as ensuring
that everyone else has played all of theirs before it. If you want to
teach someone Slovenian Tarok, they need to know about pagat ultimo. On
the other hand, it’s also true that if you announce pagat ultimo,
<em>you can’t play it before you’ve played all your other trumps</em>. It’s fair to
argue that this has nothing to do with the effect of pagat ultimo in the
game. But rather, as players developed the game, they sometimes dumped
the pagat early when they decided they couldn’t make the bid, and it was
agreed that this somewhat ruined the effect that pagat ultimo had in the
game. In other words it’s fair to imagine that a rule like “one cannot
prematurely play pagat ultimo unless forced to” is a <em>remedial</em> one. <a href="#fnref1" class="footnote-backref">↩</a></p>
</li>
<li id="fn2">
<p>That’s 40 in the same way that Eskimos have 100 words for
snow. There’s really only a handful of core bids—let’s say 8—that
can be made at different levels. But the levels are quite easy to
differentiate among. <a href="#fnref2" class="footnote-backref">↩</a></p>
</li>
</ol>
</section>
</content>
</entry>
<entry>
  <title>Three Shorthands</title>
  <link href="https://blog.zdsmith.com/posts/three-shorthands.html" />
  <id>https://blog.zdsmith.com/posts/three-shorthands.html</id>
  <updated>2019-11-23T00:00:00.00Z</updated>
  <content><h2>I The New Abbreviations</h2>
<p>Thus far I’ve designed and used three shorthands. The first was an
alphabetic, orthographic shorthand, which I’ve written about in more
detail elsewhere: <a href="https://thoughtstreams.io/zdsmith/new-abbreviations/.">The New Abbreviations</a>. It originated as a
project to correct my handwriting, which was crabbed, ugly, and above
all, inconsistent.</p>
<p>It ended around 2017. Ultimately, I hit the limit of what you could
do as long as you insisted on block lettering and preserving spelling
exactly; the character set continued to increase in size as I came up with
new glyphs to abbreviate certain combinations. At an aesthetic level,
my one-time aversion to cursive had dissipated over the years; I was
more interested in cursive forms (at the above link, you can compare the
first image with the second to see how my own writing grew more cursive)
and thus more tolerant of those schools of proper shorthand.</p>
<p>Having not set out to learn shorthand, after all, I had never had much
motivation to learn a whole shorthand system. But my interest in other
forms started percolating a little and so I decided to look around at
what there was.</p>
<h2>II Forkner/F-Minus</h2>
<p>The two most famous shorthand systems are <a href="http://gregg.angelfishy.net/">Gregg</a> and <a href="http://pitmanshorthand.homestead.com/BasicsofPitman.html">Pitman</a>. They have
a lot in common, and what they have in common is largely representative
of shorthands as a whole. They are phonemic/phonetic, rather than
orthographic, designed to encode spoken word sounds rather than spellings.</p>
<p><img src="https://1.bp.blogspot.com/-nKy4ot5Vv9c/UBe6RBY0dJI/AAAAAAAACcQ/Vy0MUFvpwnE/s1600/shorthand-greggsimplified-1207-0979-long-live-pitmans-shorthand-blogspot.jpg" alt="A Pitman Shorthand" /></p>
<p>This was a quality I had decisively opted out of when writing the
New Abbreviations; it’s tremendously easier to reconstruct a word by
spelling it out than by approximating its sounds and working backwards
from there. And indeed, systems like this are much more demanding in terms
of reading back. Nevertheless, you can compress quite a bit in terms of
strokes and time if you ignore English’s famously crufty spelling and
go straight to the sounds.</p>
<p>They are also <em>non-alphabetic:</em> they opt for simpler forms which are
also more compressed than the Latin or any other alphabet. As a rule this
makes them harder to read and write, again: your existing understanding
of how to read and write will be of no use to you.</p>
<p>It also has the side effect of giving them an extremely <em>low tolerance</em>
for variation. They are composed of extremely simple forms—mostly
loops and curves—so in order to achieve the required diversity for
representing the phoneme inventory of English as well as the standalone
abbreviations for common words and phrases, relatively subtle variations
on these forms will have significantly different semantics.</p>
<p>It was some of the above drawbacks, or at least learning-curve factors,
which led me to adopt a ‘softer-core’ system: the alphabetic <a href="https://www.reddit.com/r/shorthand/wiki/forkner-resources">Forkner
shorthand</a>. Forkner begins with ordinary, cursive, longhand writing,
and then replaces the letters with strokes and shapes representing sounds.</p>
<p><img src="../images/forkner-10.gif" alt="Some Forkner Instruction" /></p>
<p>The resulting system is vastly less efficient that Pitman or Gregg,
but much easier to learn. Easier to write, as you can use normal longhand
as a basis and insert what you know.</p>
<p>I did end up changing it a bit to suit my own needs; that’s the version
I call <em>F-Minus</em>. Some of the changes are relatively minor: for instance,
the painstaking representation of vowels with curly apostrophes and commas
seems completely unnecessary, so rather soon on those got straightened
out into ticks when I was writing them. I also almost never combine
multiple small words (qv. “may be able”, above) into a single outline; I find
them very difficult to decipher and of fairly limited utility.</p>
<p><img src="../images/f-minus-1280.png" alt="F-Minus, My Forkner" /></p>
<p>Some other changes were more substantive. The primary complaint I have
with Forkner is that which it doesn’t bother to remove from longhand
script. In particular, those parts of script which are more burdensome
to write because as letters they don’t flow together particularly nicely.</p>
<p>You can think specifically of those lowercase letters which begin in
the upper-right corner of the box<sup class="footnote-ref"><a href="#fn1" id="fnref1">1</a></sup>. Letters like <em>c</em> and <em>d</em> are fine
to start off a word with, when you’re not traveling from the left, but
awkward to connect to, as you must cross the body of the letter before
starting it. I felt that they were actually the slowest and clumsiest
part of my writing; thus I actually stopped using them in favor of more
superficially complex letters, or existing ones with diacritics (<em>k</em>
in the first case, and <em>ṭ</em> in the second). The combining dot below,
as in the second example, ended up getting a fair bit of use. <em>d</em> became
<em>ṭ</em>, <em>ch</em> became <em>ɟ</em>, <em>v</em> became <em>ƒ̱</em>. Putting a dot below a letter
(or crossing a descender) becomes a kind of voicedness toggle on that
letter.</p>
<p>With the changes came some slightly more involved rules about stroke
choice. For instance, as mentioned above, letters like <em>c</em> and <em>d</em> are
only clumsy when they don’t begin a word. So in F-Minus, you still use
them if a word begins, for instance, with /k/. This minor optimization
is also necessary to preserve the existing Forkner semantics of <em>k</em>,
which is used to abbreviate the prefix <em>contr-</em>. Since we can assume
we’ll only ever encounter that at the beginning of word, it’s safe to
introduce the medial and final use of <em>k</em> as above without worrying that
we’re introducing too much ambiguity.</p>
<h2>III Something New</h2>
<p>Learning Forkner, and then customizing it to my liking, certainly kept
an awareness of Gregg, Pitman, and their varsity-level analogs in my
mind. I suppose it was only a matter of time before I decided to take
another swing at one, which happened only a few months ago.</p>
<p>I will confess that swing was unsuccessful. I decided I would learn
Pitman; I think that’s partially because I liked the aesthetics better,
but also because I was still wary of the error tolerance of the script.</p>
<p>As mentioned before: the simpler the forms, the lower the natural sign
inventory, and thus the more subtle variations such as line width are
depended on to represent different signs. Even at the best of times,
and even after my self-training with the New Abbreviations, I don’t
trust that I have the most consistent writing in the world. And given
that I often write on the subway or the like, I’m aware that I am not
going to have perfect motor control.</p>
<p>Between the two, then, I opted for Pitman; Pitman uses variations in
<em>line width</em> to discriminate between signs, meaning that it has a wider
graphical inventory than Gregg, and thus is hopefully more error-tolerant.</p>
<p>Error-tolerant it might be, but it’s still extraordinarily
complicated. Moreover, I had never had to learn anything from scratch
before which didn’t relate to what I already knew. So it was difficult to
associate the still-subtly-varying curves of Pitman with their different
sounds without a lot of rote memorization, which I simply didn’t have
in me.</p>
<p>On the other hand—I’ve never had to write in any of these shorthands
for another person. I’ve always been a speaker (or writer) population
of 1. Which means, why not just make another one up myself? It’s a lot
easier for me to remember something I came up with than something I read
out of a book. And this way I could try to optimize for the qualities
I find most important, especially that concept of error tolerance.</p>
<p><img src="../images/something-new-1280.png" alt="My New, Untitled System" /></p>
<p>So for the last couple of months I’ve been putting together a
Gregg/Pitman-style system for myself. The first thing to know is that
it takes directly from Forkner/F-Minus wherever there’s nothing to
improve. For instance: this system, like many others, focusses on the
consonants in a word and leaves out the vowel sounds, or has them added
as diacritics if required. The values for those diacritics are generally
take directly from Forkner. So <em>′</em> above the stroke stands for <em>a</em>,
whereas <em>′</em> below the stroke stands for <em>o</em>, and <em>`</em> below the stroke
stands for <em>u</em>. <!-- raw HTML omitted --></p>
<p>The second thing to know is that the qualities being optimized for here
are the same ones that led me to adjust Forkner to my liking and to shy
away from Pitman and Gregg: ergonomics and error-tolerance. In contrast
to the general assumption behind those and many other systems, that the
most ergonomic strokes are those which underpin cursive handwriting,
and that the strokes which underpin cursive handwriting are loops and
curves, I’ve found that I have much better luck holding a steady line
if I can alternate my curves with straight lines and acute angles. It’s
in the oblique angles, along with one curve having to seamlessly turn
into another, that my error rate goes up and the distinctiveness of the
lines is most imperiled.</p>
<p>For those purposes I’ve made a couple general design decisions: I’ll
minimize the meaningful variation within a stroke <em>kind</em> (at the expense
of more writing, no doubt), and I’ll try to promote clear angles between
strokes. For instance: instead of the <a href="https://doyouremember.com/38261/remember-gregg-shorthand-great-taking-notes-college-long-ago-swipe">10 curving strokes</a>
that I count in the basic Gregg inventory, in my new system there are
2: long and short. In the realm of straight lines we allow ourselves
slightly more extravagance, with 4 (to Gregg’s 9): NW/SE-oriented in
long and short, NE/SW-oriented in long and short.</p>
<p><img src="../images/inventory-1280.png" alt="Basic Inventory of a New Shorthand System" /></p>
<p>We extend this meager inventory predictably, with the vocalizing hatch
mark that already showed up in F-Minus. So a short curve is /s/ and a long
one is /r/, while putting a notch in that curve (or a little serif if the
curve begins or ends an outline) makes /z/ and /l/, respectively. Similar
schemes obtain for the lines: /k/ &amp; /g/, /t/ &amp; /d/, /ch/ &amp; /j/, /p/ &amp; /b/.</p>
<p>What’s important, and what determines a lot of the rest of the
strokes that complement that basic scheme, is that every stroke have
a <em>vertical orientation</em>; that is, it always be rendered “going up” or
“going down”. That’s because the one true formal innovation (as far as
I’m aware) of this system is how it treats blends, or consonant clusters.</p>
<p>So far I’ve been inclined to keep to a minimum those strokes which stand
for common consonant sequences, as oppose to individual sounds. This
is largely because of my self-imposed parsimony of strokes. I simply
don’t have the solution space to apportion a separate kind of curve to
/st/ or /nd/. However, one method that I have come upon of designating
a consonant sequence without an intervening vowel—should it appear
internal to a syllable or at a syllable boundary—is to control the
<em>relative orientation</em> of the following stroke.</p>
<p><img src="../images/blends-1254.png" alt="Illustration of blends with s and t" /></p>
<p>I’ll give an example: let’s say you have an <em>s</em> followed by a <em>t</em>,
as mentioned above. That will be a short stroke followed by a short,
NE/SW line. As a matter of fact, there are two ways to write each one
of those strokes. The <em>s</em> can be a <em>smile</em> or a <em>frown</em> (so to speak),
and then if you follow on with a <em>t</em> it can proceed up and to the right,
or down and to the left. In this case, if this is beginning of a word,
the choice of <em>s</em> is entirely arbitrary. Smile and frown are equivalent
in meaning. But if you choose a smile, then we must pay attention
to the <em>orientation</em> of the right side of that stroke. It’s pointing
<em>upwards</em>. Now we have a semantics of blends: if you want represent <em>st</em>
without anything in the middle, you <em>continue the vertical orientation,</em>
and write a short straight line going up and to the right. If, on the
other hand, you want to represent <em>sVt</em>, with some intervening vowel
in the middle (<em>sat</em>, <em>sit</em>, <em>set</em>, <em>soot</em>, …), then you <em>reverse</em>
vertical orientation, turning down and to the left.</p>
<p>Thus, every stroke in the system is always clearly pointing up or down.</p>
<p>This does a couple things for the system. First, if we assume that
consonants are more often found on their own than in blends, it optimizes
for the presence of acute angles between strokes, which is easier to read
and write. Second is that it actually communicates a little bit <em>more</em>
than what I know about systems like Gregg and Pitman (here I could easily
be ignorant of something), in that even without adding a vowel diacritic,
we can visually distinguish between <em>CC</em> and <em>CVC</em>. This—it is to be
hoped—makes it more likely that an outline without any vowels will
still be unambiguous, or indeed an outline where we haven’t bothered to
differentiate between voiced and unvoiced.</p>
<p>There remain lots of edges to sand off. It remains to be seen how much
of and which of the Forkner word, prefix or suffix abbreviations can and
should be pirated wholesale into this system. Certain additional rules
and shortcuts are needed in order to, for instance, make it as easy and
forgiving to write and read a blend like the aforementioned <em>upward s-t</em>,
where both the horizontal <em>and</em> vertical orientation are the same, such
there’s no angle to differentiate between strokes. And it might be that
clever stroke design is not sufficient to avoid it being too onerous
to write certain long consonant sequences. And it’s certainly much
more demanding in memorization than Forkner or its modifications; I’m
still thinking my way through each outline. If that never accelerates,
of course, it will be interesting at best but entirely useless.</p>
<section class="footnotes">
<ol>
<li id="fn1">
<p>It’s important to note that I’m left-handed and that fact has
significantly impacted the ergonomics of all of my writing. There are
letters and shapes which might be very uncomfortable for me but quite
normal for a right-handed person, and vice versa; thus I make no claims
for the universality of my ergonomic preferences. <a href="#fnref1" class="footnote-backref">↩</a></p>
</li>
</ol>
</section>
</content>
</entry>
<entry>
  <title>Sketches of Elixir</title>
  <link href="https://blog.zdsmith.com/posts/sketches-of-elixir.html" />
  <id>https://blog.zdsmith.com/posts/sketches-of-elixir.html</id>
  <updated>2018-12-26T00:00:00.00Z</updated>
  <content><p>Friends, I am now at least in this respect a rare breed: an Elixir
programmer who has never written Ruby.</p>
<p>I was never a professional Erlang programmer. I cut my teeth on Python
and began working in Python, but Erlang was the language I learned
after that and the one that I looked for excuses to write in (in addition
to <a href="https://nim-lang.org/">Nim</a>, which would come a little later, but which I would also be able
to finagle into production at MakeSpace).</p>
<p>So here was my impression of Elixir for the first several years of my
passing acquaintance with it: it’s Erlang with Ruby syntax. I had never
ended up writing any Ruby, and I was already happy with Erlang and its
syntax. So I had a fairly simplistic understanding of the Elixir language
and the roots of its popularity and it didn’t seem that there was anything
of value to me.</p>
<p>For better or worse, the first thing that many people mention when
Erlang comes up is that the syntax is unfamiliar and confusing; at the
very least it’s controversial (I love it). Ruby, on the other hand,
is vastly more popular than Erlang. So there’s a significant population
that finds Erlang syntax eccentric and Ruby conventional and pleasing.</p>
<p>On the other hand, there are many reasons to recommend the BEAM, OTP,
and the Erlang Runtime System. And concurrent programming and functional
programming are now vastly more mainstream than they might have been when
Erlang was first developed. So there is a steady stream of object-oriented
and/or web application programmers (Ruby or otherwise) taking an interest
in Erlang and the BEAM. It would make sense that programmers coming from
a Ruby background would find Elixir more palatable.</p>
<p>And marks of the Ruby frame of reference are all over Elixir; its creator
after all was a <a href="http://plataformatec.com.br/crafting-rails-applications">member of the Rails core team</a>, and its influence is
manifest in several areas of the language—especially those parts
of it visible from the outside. Not just the syntax, but also a much
greater emphasis on programming for the web, including a Rails-like web
framework, <a href="https://phoenixframework.org/">Phoenix</a>.</p>
<p>So I didn’t see much of a need for Elixir; it seemed to be a solution
for problems I didn’t have.</p>
<p>Not to mention, I had a sort of misguided purist’s attitude towards
the whole thing. Not that I had the years of Erlang experience to back
this up, but new Elixir programmers seemed to me to be <em>arrivistes</em>,
or maybe just tourists, barging in and setting up conferences about
their new concurrent Ruby. And it was being heralded as the next big
thing while Erlang was ignored.</p>
<p>I was even sure enough of myself to express this opinion (the part about
the language, not the <em>arrivistes</em>) in public—not just in a discussion
forum, but one frequented by José Valim, preternaturally patient BDFL
of the Elixir language. Someone had posted something along the lines of
“what’s the deal with Elixir? Should I learn it instead of Erlang?” and
I responded with something along the lines of, “it’s just Erlang with
a different syntax. Learn the real thing.”</p>
<p>My memory of José’s reply was something like, “that’s a bit reductionist;
there’s also macros.” I was embarrassed, not only because I didn’t
know that José was going to see my response, but because I didn’t even
know there <em>were</em> macros in Elixir.<sup class="footnote-ref"><a href="#fn1" id="fnref1">1</a></sup></p>
<p>In fact, it’s telling that this is my memory, because on looking back
it’s not actually what José said. I won’t quote him directly, but I
don’t think it’s breaking too many confidences to give a brief rundown
of the features that José cited as distinct (aside from macros), as of
early 2015, from Erlang:</p>
<ul>
<li>lazy collections;</li>
<li>more robust structured data (structs);</li>
<li>better tooling, incl. testing frameworks and Mix</li>
</ul>
<p>This is telling because I remember thinking, “well, sure, macros;
but Erlang has parse transforms (not that I know how to use them)
and macros are weird and shouldn’t be used that much anyway.” I wasn’t
a macro guy and, in fact, still am not. I don’t use macros that much
today. On the other hand, the part of his reply that I don’t remember,
the part about lazy collections, structs and tooling, I use <em>constantly</em>.</p>
<p>I started working at <a href="http://frame.io">Frame.io</a> in August 2018. For many reasons,
it was a really exciting opportunity for me, one of them being that almost
the entire backend application is written in Elixir. For a long time I
had been thinking, “wouldn’t it be cool to some day get to write Erlang
for a living?” and I wasn’t so much of a chauvinist that I didn’t see the
chance to write Elixir full-time to be, modulo some <code>def/end</code>s, just that.</p>
<p>Now I’ve been writing Elixir, full-time, for several months. I am
for better or worse a fully-converted <em>Elixir</em> programmer. I’d like to
believe that I understand the language much better than I did in 2015. I
also think that I better understand its place in the BEAM firmament and
the wider realm of programming languages. As a programmer with an Erlang
background and no Ruby background I might even be in a somewhat unusual
position to comment on it. So here’s the actual value proposition for
the Elixir language: it’s not Erlang with Ruby syntax; it’s Erlang with
a robust and useful standard library and tooling.</p>
<p>The thing about the Ruby syntax in Elixir is that it is a complete red
herring. It is by far the most superficial and least consequential
element of the language<sup class="footnote-ref"><a href="#fn2" id="fnref2">2</a></sup>. If you like Ruby syntax, if you
dislike Ruby syntax, it doesn’t really matter. You learn it and then
you move on. It disappears almost immediately. This is perhaps the
first thing I noticed coming to Elixir from Erlang: the base semantics
are almost <em>identical</em>. That is, almost every element of the Erlang
language is preserved wholesale; Elixir can be seen almost entirely as
a series of goodies that are piled on top. This is very reassuring to
the Erlanger. You don’t lose any of your intuition for what makes good
code.[^assign-once]</p>
<p>The second thing you discover as a reluctant Erlang-to-Elixir convert
is that the standard library <em>matters</em>. There’s two qualities here, and
again neither one of them is as simple as coddling Rubyists who can’t
deal with the quirks of the Erlang standard library (1-based indexing,
inconsistent naming or argument order…).</p>
<p>The first aspect of this is that the specific modules that are pure Elixir
innovations are relatively few and obviously well-considered. Big ones
are, as mentioned, <code>Stream</code> and <code>Struct</code>. Stream, the lazy collections
module, is lovely precisely because there’s nothing unique to Elixir
about it; under the hood one imagines it’s got all kinds of protocols
and macros and other Elixiry things, but it’s presented to the user
simply as exactly the sort of all-purpose highly functional library that
you could want from the Erlang standard library too. Structs are more
baked into the language itself; There’s a struct syntax based on maps
and structs often seem to result in the kind of OO-style data+methods
object that you expect out of Python and would never see in Erlang. The
tradeoff: you get a certain amount of compile-time checks of attribute
access. Static guarantees might be the only thing I would be willing to
trade away some of Erlang’s datatype minimalism for.</p>
<p>The second aspect is that if you are given the opportunity to greenfield
an entire standard library at once on top of everything you get from
Erlang already, it turns out you can implement some pretty elegant
features. You can, for instance, make sure that the “object” of a
function is in the first argument position for every single function,
making it possible to introduce the pipe operator <code>|&gt;</code> quite simply.</p>
<p>I fucking love pipes. Relatively speaking, there are extremely few
assignments in Elixir. Not only because it’s functional and immutable,
but because the programmer is encouraged, syntactically, to think about
their code as a series of data transformations chained together. If the
programmer can do that, they are rewarded with an extremely terse and
expressive, at times scarily close to <em>point free</em>, structure. This makes
debugging, rearranging, refactoring more straightforward. It reduces
parenthesis noise. It’s a big win. Again, it’s not just that it’s less
Erlangy for the arbitrary reason that we distrust the Erlang syntax. It
makes it easier to write better code.</p>
<p>The third thing you discover is that, just maybe, some of this new
syntactic sugar is kind of nice. I’ll use keyword arguments as an
example. In Elixir you can approximate Python-style positional and
named function arguments (<code>f(x, y, z=True)</code>) in syntax: <code>f x, y, z: true</code>. This is exactly the kind of unnecessary imposition of Rubyist
tropes that you’re on the lookout for—until you realize that this
is actually sugar over an <em>extremely</em> idiomatic Erlangism, the tagged
value. <code>[x, y, z: true]</code> is precisely equal to <code>[x, y, [{:z, :true}]]</code>,
which is the existing Erlang convention for passing optional parameters
to a function, but easier to type and read.</p>
<p>This sort of thing ends up being quite reassuring. Sometimes, because
Elixir has gotten some heat on it, you read blog posts that talk about
Phoenix and microservices in the way that other people talk about Node
or React—that is, with an air of hype and untroubled confidence that
this is the new best way to build web apps that seems to have come more
from reading blog posts than from suffering through the building of
many systems. A new, up-and-coming technology always carries with it
a penumbra of thought leadership and startup marketing masquerading as
how-to blog posts.</p>
<p>But in fact the creators of this language seem to understand the Erlang
idiom very well and don’t tread too heavily over it. It is possible
to reflect on what is essential to Erlang and to imagine how we could
extend it if we took it upon ourselves to design several layers of
expressiveness on top of it. And the OTP model is very much at work in
the Elixir ecosystem: almost all Elixir applications are built on the
OTP application model, and the <code>gen_*</code> concept is even extended with new
behaviours like <code>GenStage</code>.</p>
<p>Of course, the simplicity and flatness of Erlang is not nothing, and
Elixir has traded some of that away. With protocols, <code>__using__</code> macros
and more, Elixir has many new forms of code reuse and polymorphism than
are possible or idiomatic in Erlang. That means there are many more
places with <em>magic</em> in them, where an imported module or expanded macro
does things that aren’t obvious by reading the code.</p>
<p>That said, I’m enormously happy to be working with Elixir. The experience
of writing Elixir is a pleasure and there is no better foundation than
the BEAM and OTP.</p>
<p>In fact, working in Elixir full-time has renewed my interest in
the entire BEAM ecosystem. Elixir has demonstrated that the bones of
Erlang are valuable and applicable enough to serve as the foundation for
programming languages of all flavors. And Elixir programmers are treated
with an ecumenical view of the entire BEAM; the Erlang standard library,
as well as any Erlang code in the path, is available transparently to
be called from Elixir.</p>
<p>How can we expand that relationship in the other direction? Calling
Elixir code from Erlang, <a href="https://joearms.github.io/published/2017-12-18-Calling-Elixir-From-Erlang.html">while technically possible</a>,
is not quite as convenient as just chucking some module files into
<code>/src</code>. What can we do to make compiled Elixir code as transparently
available to Erlang programmers? Or, for that matter, to <a href="http://lfe.io/">LFE</a>
programmers? How far can we go in making tools like <a href="https://www.rebar3.org">rebar3</a> and
mix functionally equivalent? How far can we get towards a truly
language-agnostic workflow, running OTP applications with modules written
in LFE, Elixir, Erlang, <a href="http://joxa.org/">Joxa</a>… You get the point.</p>
<p>This is what I’d love to see come out of the Elixir language and
community. It’s got a wonderful momentum right now; lots of interest,
lots of new contributors, and a thoughtful and motivated core team. We
have the opportunity to work towards a totally integrated BEAM ecosystem.</p>
<section class="footnotes">
<ol>
<li id="fn1">
<p>I am now embarrassed all over again, because going back and
reading my early posts in this forum about Erlang I see that not only
did I make an ass of myself up there but this was a couple years after
<em>José himself</em> had been the person who was most responsive to my initial
questions about programming in Erlang. <a href="#fnref1" class="footnote-backref">↩</a></p>
</li>
<li id="fn2">
<p>Except insofar as it’s actually a quite-clever way to put
together a surprisingly friendly and readable language that also provides
a massive degree of homoiconicity. <a href="#fnref2" class="footnote-backref">↩</a></p>
</li>
</ol>
</section>
</content>
</entry>
<entry>
  <title>Digital Minimalism for the Working Hacker</title>
  <link href="https://blog.zdsmith.com/posts/digital-minimalism-for-the-working-hacker.html" />
  <id>https://blog.zdsmith.com/posts/digital-minimalism-for-the-working-hacker.html</id>
  <updated>2018-01-14T00:00:00.00Z</updated>
  <content><p>Effectively speaking, I’ve always been a Vim user. When I got my first shell account, I started with Vim (In the Paleozoic, Mesozoic and Cenozoic ages of <code>vi</code>, <code>vim</code> and <code>neovim</code>, I came of age somewhere in the late Jurassic): my first CS teacher had studied at MIT and so was a dyed-in-the-wool LISP hacker; accordingly, he set up a Linux server in the back of the server closet at my high school, gave me a shell account, and introduced me to <code>emacs</code>. By that point I already found myself inclined to the left-hand side of the dichotomy between what felt like the lightness and agility of Vim (shorter startup times, fewer keypresses) and the power and flexibility of Emacs.</p>
<hr />
<p>Last year, around this time, I got a Linux laptop. At the time my motivations—at least the ones apparent to me—were primarily practical and maybe a little political: a long-time Mac user, I was now doing enough debugging of applications running on Linux servers that it seemed sensible to reduce the number of differences between my local and production development environments; plus Apple had just released their new MacBooks without the escape key, and that whole thing felt like a bridge too far at the time.</p>
<p>I had already gotten very used to the benefits of dynamic tiling window managers, and so when I set up my Linux machine I happily moved on from <a href="http://ianyh.com/amethyst/">the best that could be done under trying circumstances</a> to <a href="https://i3wm.org/">i3</a>, a window manager with a very slight footprint (resource-wise and otherwise) and a lot of keyboard-centric power and flexibility.</p>
<p>Using Linux can lead, for better or for worse, to a pretty thorough customization of one’s computing environment. There’s a few factors there: a centralized, text-based package manager lends itself to an extremely rapid iteration on one’s setup; the fact that comparatively so few batteries are included in a distro like <a href="https://www.archlinux.org/">Arch</a> means one can’t really avoid that process in the first place; and the fact that nearly everything in one’s system is still configured by one text file or another lends itself much more naturally to things like source-versioning one’s dotfiles and starting to write little built-to-purpose shell scripts.</p>
<p>At the same time, there were and are certainly aesthetic forces at work. I’m a backend programmer, and (insofar as computing goes) the spiritual descendent of the old-school hacker class, and identify as such. I’m not great with graphics, or user interface design. I like plaintext. I don’t use Instagram. In other words, a stripped-down, austere aesthetic (graphical and otherwise) appeals to me. I love to use LaTeX, and what’s more I love the default stylesheet it comes in; I love the historical and aesthetic suggestions of <a href="https://en.wikipedia.org/wiki/Computer_Modern">Computer Modern</a>.</p>
<p>So there’s been a sort of regression, maybe, back to some vaguely-imagined hacker past, and a stripping down of the complexity and graphical sophistication of the interfaces I use when I use my computer.</p>
<p>Around the same time that I was moving to Linux, I found myself reading a few <a href="https://www.robertmelton.com/project/syntax-highlighting-off/">blog posts</a> on the topic of <em>syntax highlighting</em> (of all things). The basic argument went like this: syntax highlighting is crutch; it seems to make it easier to read code, but actually it allows us to skim and “read” through pattern recognition on colors and shapes rather than actually reading, as a text, the code we’re working on. That’s a moderately interesting hypothesis. By itself I don’t think I would find it that compelling, except maybe that one of the anti-highlighting camp’s most vocal members is Rob Pike, the computer scientist whose most interesting work, arguably, is the speculative-fiction operating system <a href="https://9p.io/plan9/">Plan 9</a>, with which I’ve had an enduring if largely unconsummated fascination for a while, and the similarly iconoclastic text editor [<code>acme</code>][], whose UI innovations I find perennially fascinating if, in practice, completely incompatible with how I like to work<sup class="footnote-ref"><a href="#fn1" id="fnref1">1</a></sup>. Some combination of these influences—an interest in an experimental weaning off from syntax highlighting, a vague association with the UNIX Shangri-La of a bygone time and place, and an aesthetic kinship with a text editor that I loved but with whom I would just would never make it work—led me to the <a href="https://github.com/plan9-for-vimspace/acme-colors">acme-colors</a> theme for Vim.</p>
<p>Not the most momentous development, I know. But there were two innovations (new to me, anyway) that ended up having a strong impact on how I worked:</p>
<ul>
<li>Acme’s color scheme is dark-on-light, black text on a sort of cream-colored background. I had a been a staunch light-on-dark user since my very first days on the terminal.</li>
<li>The acme-colors theme introduces no extra colors into the minimalist palette of the editor; but rather cleverly, relies on traditional text formatting—italic, bold, underline—to do its highlighting.</li>
</ul>
<p><img src="../images/acme-colors.png" alt="acme-colors sample" /></p>
<p>I liked this scheme very much (and still do, thankfully) and themed everything else relevant (terminal, etc) with the same colors.</p>
<hr />
<p>One of the interesting ways in which usage of vi and usage of Emacs differed—and I’ll speak in the past tense because it was certainly true in the past, when resources were more constrained, and because I think I first saw it pointed out in a historical context, maybe in an article by <a href="https://www.jwz.org/about.html">jwz</a>—is that because Emacs was <em>bigger</em> than vi, and more powerful, it took longer to start up; and because it took longer to start up (and presumably because its buffer management and the like was extremely powerful), Emacs users tended to have one or more instances of Emacs kept running, and would return to them and open a new buffer when they wanted to edit a new file. This was in contrast to vi users, who would tend to launch a new vi process from wherever they were in the filesystem, and then exit the process when they were done with the file they needed to edit.</p>
<p>It’s not difficult to see this continued in Emacs users’ tendencies to write and use extensions that allow them to perform a variety of tasks sometimes only tangentially related to text editing from within Emacs. Emacs Lisp is substantially more powerful and expressive than Vimscript (and surely moreso for whatever preceded it under vi) and it’s not unusual to read and write email, use IRC, manage Git branches from Emacs. These same feats, while technically possible under Vim, almost never work as well if implemented, and are generally discouraged on a cultural level anyway.</p>
<p>There’s a value judgment you can make here, depending on your taste; now, as when I was first presented with a choice, I find the sense of bulk implied here distasteful. Someone not entirely different from me would appreciate the sense of flexibility and universality granted by having an self-sufficient <em>environment</em> within which to work. But more is suggested in this distinction. It’s not simply a matter of which is <em>better</em>, of trying to come to some sense of relative worth by establishing differences in efficiency, number of keystrokes, interface latency, et cetera. We’re also presented with two very distinctive perceptual models.</p>
<p>There’s a way in which you could say that Emacs is a <em>place</em> whereas vi is a <em>tool</em>. One <em>goes</em> or <em>returns to</em> Emacs whereas one <em>opens</em> vi; Emacs <em>lives somewhere</em> in your window manager or process space, whereas vi doesn’t exist when you’re not using it.</p>
<hr />
<p>Maybe the last influence that has been working on me is the enormous resource inefficiency of the modern web app. Slack, and <a href="https://electronjs.org/">Electron</a> in general, is a <a href="https://medium.com/@matt.at.ably/wheres-all-my-cpu-and-memory-gone-the-answer-slack-9e5c39207cab">notorious case</a>; the standalone client takes up a huge amount of resources relative to what it’s good for, and so I very much enjoyed the transition, over some time, from the standalone app, to the website in a tab in my browser, to a <a href="https://github.com/wee-slack/wee-slack">plugin</a> for the command line IRC client <a href="https://weechat.org/">WeeChat</a>. Along a similar vein, I went tooling around not too long ago seeing if there was a way to stream music from a service like <a href="https://play.google.com/music/listen#/home">Google Music</a> from the command line. It turns out there is, and after some hacking I got a whole setup going with <a href="https://www.mopidy.com/">mopidy</a> and <a href="https://musicpd.org"><code>mpd</code></a>. Thus it was with some satisfaction that I closed the Google Music tab in my browser and never opened it again.</p>
<p>This is all well and good. Command line tools are more powerful and more efficient than GUIs, and you get to feel like a hacker. That’s fun and presumably profitable. But there’s been another shift in all these different steps and migrations. Every change I’ve made in my working environment over the past year or so has also been a <em>lessening of immersiveness</em>. My interfaces have become <em>less rich</em>, <em>less colorful</em>, <em>less dynamic</em>.</p>
<p>This stands in direct contrast to the promises of modern computing. Apps and websites are praised for their immersiveness, and with good reason: today’s web app is a seamless, rich experience, with CSS animations, soft-focus background videos, responsive, hand-tuned widgets. We’re promised future interfaces that will be more immersive, more engaging, more <em>realistic</em><sup class="footnote-ref"><a href="#fn2" id="fnref2">2</a></sup>. We have haptic feedback now, and have foregone digital smell-o-vision for the imminent potential of VR. But I wonder if immersion is exactly the sort of thing we want to be avoiding.</p>
<p>Listen: I take it as axiomatic for our purposes that a sense of bodily and sensory presence—mindfulness–is a good thing. I, like many members of my generation, have decided to work hard to reembed myself in my body and lived experience. So that’s where I’m coming from.</p>
<p>From that perspective, the greatest satisfaction I’ve been getting out of computing—the reason I’ve actually had a lot of fun putting all my dotfiles together over the last little while—is that I’ve actually been <em>extracting</em> myself from the sensory experience of my computer. Google Music is a rich, pleasurable interface—but actually the beauty of <a href="https://musicpd.org/clients/mpc/"><code>mpc</code></a> is that it’s not just more convenient to hit a hotkey rather than switch windows, click, move, click; it’s that when I use mpc I don’t <em>go</em> anywhere.</p>
<p>This is where this sense of <em>being a place</em> comes in. And this is why I suspect that there might be reasons to prefer Vim over Emacs beyond simple working preference. Google Music is a <em>place</em>. It is a fixed, concrete entity in my experience of my computer: it’s a tab that stays open (because it would take too long to load otherwise), that contains internal navigational state, and which I maintain my own navigational state in order to get back to (second screen, first virtual desktop, first window, third tab from the left). That’s a lot! It not only consumes computing resources to stay open, and cognitive resources to keep track of, but it also provides a place that must be <em>entered</em> in order to make use of it. When I am inside Google Music, I am not in my chair anymore, not inside my own senses.</p>
<p>I think the Acme colors have also pulled me out of the text a little. The benefits of no syntax highlighting also result in a less immersive experience. Less sensation and information for my attention to get caught up in. But I also find myself staring at a screen configured more or less the same as documents that human beings have been handling since—certainly since the advent of mechanical typewriters, and when I’m not typing then since farther back than that. This is a very useful recontextualization. There had been a trick of the eye happening; a change of coloring had provided the temporary sensation that what was in fact still simply words on a page was <em>somewhere</em><sup class="footnote-ref"><a href="#fn3" id="fnref3">3</a></sup>. I suspect it’s not entirely useful to get overly wrapped up in the metaphor that the thing in front of me—the flat plane of my screen, encased as it is in a black plastic display, that stays exactly where it is and turns out of sight when I stand up from my desk and walk away—is actually a somewhere. For whatever reason I imagine Bob Cratchit, or Bartleby the Scrivener. I wonder if they ever forgot they were at their benches and imagined themselves to be inside their ledgers instead.<sup class="footnote-ref"><a href="#fn4" id="fnref4">4</a></sup></p>
<hr />
<p>I’m interested in this direction, and I’d like to encourage it. How? One way, obviously, is to do everything on the command line. But there’s only so much you can do, or should. GUIs themselves are not evil, and in fact not even necessarily inefficient. Web pages, for instance. Can you say with a straight face that a text-based browser is more efficient and powerful than Firefox? Or, alternately, that you can get everything you want out of the web without images, Javascript, videos? Netflix? This isn’t even about the often-bandied dictum that the keyboard is always more effective than the mouse, that you must murder the mouse, or train yourself never to use your trackpad. I use the mouse constantly when I’m using Vim.</p>
<p>It’s more about the flow of attention between me and my web browser. Web browsers are very nice. But: the modern web browser is without a doubt a <em>place</em>. It is the most mountainous program I and most other people are ever running; it’s always open, it’s got a huge assortment of tabs open from various points in time, and if I close it I’ll probably lose something. It is my Emacs: comparatively hulking, immobile, unaccommodating. I come to it, it does not come to me.<sup class="footnote-ref"><a href="#fn5" id="fnref5">5</a></sup>.</p>
<p>In the case of any big, stationary application my question is the same: can I change my habits of use from Emacs-like to vi-like? With Firefox this is almost impossible; it takes too long to load. And I don’t always know what to do with every tab that I open, or don’t know how long I’ll need it, so I can’t always close it and forget about it. It’s not surprising that this should be the case; the technical requirements for a web browser are huge, and the range of things I can use the web for is equally huge, so multiplied together they result in a big program that sticks around.</p>
<p>Even for an application like web browsing or managing email, there are tools and programs written that afford this kind of use case. There are minimalist browsers like <a href="https://surf.suckless.org/"><code>surf</code></a> and <a href="https://www.uzbl.org/"><code>uzbl</code></a> that do very little, much less than you’d expect of a browser, and are designed to be strung along with a bunch of other little tools until you have what you need. I’m not interested in optimizing my web browsing experience within an inch of its life, or of going all Minority Report on my bookmarks. But would it be possible to stick those tools together so that actually I could banish the browser as a conceptual entity entirely from my computer, so that web pages show up when I need them, and otherwise are not heard from? To render the browser as uninteresting and unremarkable as it should be?</p>
<p>If this were just a matter of the efficiency gained by switching to command-line tools, or of writing shell scripts rather than using something out of the box, I probably wouldn’t bother; and I certainly wouldn’t bother blogging about it. The benefits of optimizing one’s workflow are at best uninteresting. But I reflect on the potential of a system that <em>isn’t there when I’m not using it</em>, and that I find very appealing. I like using my computer, I like programming. I don’t think it’s valuable to treat it as an experience to be minimized, or as a necessary evil in this modern world. But I think it’s worth the work to reclaim it for myself; to reassert myself in my own chair and fully extract myself from it. That’s how I can use it to its fullest.</p>
<section class="footnotes">
<ol>
<li id="fn1">
<p>I don’t think it’s unfair or cranky to characterize Plan 9 as Pike’s most interesting work, even as he has become vastly more influential for his work on the <a href="https://golang.org/">Go</a> programming language, seeing as how Go’s primary design principle is arguably to be as uninteresting as possible, at scale. <a href="#fnref1" class="footnote-backref">↩</a></p>
</li>
<li id="fn2">
<p>In the sense of constituting or assembling a fascimile of a reality. <a href="#fnref2" class="footnote-backref">↩</a></p>
</li>
<li id="fn3">
<p>quick: imagine <strong>cyberspace</strong>. When I do that, I see a black field of infinite depth, and in it are floating colorful digital shapes, letters and polygons. I’m a child of <em>Neuromancer</em>. <a href="#fnref3" class="footnote-backref">↩</a></p>
</li>
<li id="fn4">
<p>There’s different kinds of absorption, of course. I’m sure that a 19th century clerk dreamt of figures and sometimes might have felt himself to be merging with the rows in his logbook, just as I dream of programming and forget to pee sometimes when I’m doing it. There’s no part of me that wants to abolish that. <a href="#fnref4" class="footnote-backref">↩</a></p>
</li>
<li id="fn5">
<p>The other place that remains in my windowing environment is my email client. My concerns are roughly the same. There’s a lot of state, a lot of unrelated documents that end up being opened up next to each other, and a long load time.</p>
<p>I bet there’s some interesting thinking to be done about whether there is something in what we use these applications for that leads to this kind of behavior, and whether it could be resolved by changing how we handle the data. In a sense the whole GTD/Inbox Zero movement was about this: when you get an email, <em>capture</em> it by parsing in some way: transform from unstructured to structured data, maybe by making a note in your to-do list and archiving the email. Your to-do list is not necessarily a place; when well-maintained it’s something you can summon up when you need it and dismiss when you’re done. Of course, if handled poorly, your to-do list can become another place, an entity that sticks around keeps its own state and requires you to come to it. <a href="#fnref5" class="footnote-backref">↩</a></p>
</li>
</ol>
</section>
</content>
</entry>
<entry>
  <title>Compile-Time Sort in Nim</title>
  <link href="https://blog.zdsmith.com/posts/compile-time-sort-in-nim.html" />
  <id>https://blog.zdsmith.com/posts/compile-time-sort-in-nim.html</id>
  <updated>2017-06-06T00:00:00.00Z</updated>
  <content><h2>Compile-Time Sort in D</h2>
<p>Michael Parker recently wrote a blog post showing how to implement a <a href="https://dlang.org/blog/2017/06/05/compile-time-sort-in-d/">compile-time quicksort in D</a> after Björn Fahller recently wrote a blog post showing how to implement a <a href="http://playfulprogramming.blogspot.kr/2017/06/constexpr-quicksort-in-c17.html">compile-time quicksort in C++17</a>. It’s a skillful demonstration that employs D’s powerful compile-time programming capabilities to write code that, while not always useful, is quite concise.</p>
<p>Reading it, of course, the thought that came to my mind was “Surely Nim can do better.”<sup class="footnote-ref"><a href="#fn1" id="fnref1">1</a></sup></p>
<p>First let’s take a quick look at Michael’s D code:</p>
<pre><code class="language-D">void main() {
    import std.algorithm, std.stdio;
    enum a = [ 3, 1, 2, 4, 0 ];
    static b = sort(a);
    writeln(b); // [0, 1, 2, 3, 4]
}
</code></pre>
<p>I won’t rehash his whole post, which is lucid and pleasurable to read, but here’s the basic gist: we declare an <em>enum</em>, which is a special kind of constant<sup class="footnote-ref"><a href="#fn2" id="fnref2">2</a></sup> only available at compile time. The call to <code>sort</code> is prepended by the <code>static</code> keyword, which binds the result of a compile-time evaluation to a static variable available at runtime. The call to <code>writeln</code> is runtime-only, and thus happens whenever <code>main()</code> is called.</p>
<p>This is a nicely modern approach, bereft of boilerplate, fairly easy to understand, and allows the programmer to execute arbitrary code at compile-time. Michael gives a nice example of some complicated mathy code that is used to validate numeric parameters both at runtime and compile time. It does have a few constraints, though:</p>
<blockquote>
<p>The fundamental requirements for CTFE eligibility are that a function must be portable, free of side effects, contain no inline assembly, and the source code must be available.</p>
</blockquote>
<h2>Compile-Time Sort in Nim</h2>
<p>Now let’s look at an equivalent program written in Nim:</p>
<pre><code class="language-nimrod">import algorithm

static:
  var a = @[3, 1, 2, 4, 0]
  sort(a, system.cmp)

const b = a
echo b
</code></pre>
<p>You can probably see that the structure is very similar. There are a couple subtle differences, so we’ll go through it. The first difference is that the first two statements, equivalent to the first two statements in the D code are evaluated in a <code>static</code> block. There’s nothing about the statements themselves specific to compile-time execution; rather it’s the context provided by their scope that indicates it’s happening at compile time. Now that we’re outside the <code>static</code> block, we’re back in the runtime; we bind <code>b</code> outside of the static context with a <code>const</code><sup class="footnote-ref"><a href="#fn3" id="fnref3">3</a></sup>, and echo during execution of the program itself.</p>
<p>Really, the only differences here are syntactic; I prefer Nim’s designation of execution context with blocks rather than the somewhat more occult special-casing of single-value <code>enum</code>s, but they have equal expressive power. But let’s look at what the Nim docs say about <code>static</code>:</p>
<blockquote>
<p>A static statement/expression can be used to enforce compile time evaluation explicitly. Enforced compile time evaluation can even evaluate code that has side effects[.]</p>
</blockquote>
<p>Whoa! That’s a difference. Unlike in the D example, Nim static statements <em>can</em> perform IO. So that means we could write:</p>
<pre><code class="language-nimrod">import algorithm

static:
  var a = @[3, 1, 2, 4, 0]
  sort(a, system.cmp)
  echo a

const b = a
echo b
</code></pre>
<p>And the constant is echoed once during compilation, then again whenever you run the application.</p>
<h2>Compile-Time Side Effects</h2>
<p>What this means is that in addition to computationally intensive code, we can perform other useful operations at compile time. Here’s a reformatted <a href="https://forum.nim-lang.org/t/2708">example from the Nim forums</a> that demonstrates effectful code during compilation:</p>
<pre><code class="language-nimrod">import strutils, tables

static:
  let configLines = &quot;configfile.ini&quot;.slurp().splitLines()

  var keyValues = newSeq[(string, string)]()

  for line in configLines:
    if line.len &gt; 0 and line[0] != ';':
      let splitLine = line.split('=')
      keyValues.add((splitLine[0].strip().toLowerAscii(), splitLine[1].strip()))

const config = keyValues.toTable()
</code></pre>
<p>Here, we statically read a config file during compilation and build a table out of it, which we can then bind into the runtime scope as a constant available at runtime. This is a neat trick, allowing us to easily parameterize builds (for instance).</p>
<section class="footnotes">
<ol>
<li id="fn1">
<p>Not really. It was more like, <em>that’s super cool! Can Nim do that?</em> <a href="#fnref1" class="footnote-backref">↩</a></p>
</li>
<li id="fn2">
<p>It turns out that in D, if you declare an enum with only one value (in this case a list), it is declared to be a <em>manifest constant</em>. That seems to me like a slightly strange way of getting a compile-time-only value, but I’m not a D programmer. <a href="#fnref2" class="footnote-backref">↩</a></p>
</li>
<li id="fn3">
<p>The <code>const</code> keyword behaves very similarly to D’s <code>static</code>. <a href="#fnref3" class="footnote-backref">↩</a></p>
</li>
</ol>
</section>
</content>
</entry>
<entry>
  <title>Unit Testing in Nim</title>
  <link href="https://blog.zdsmith.com/posts/unit-testing-in-nim.html" />
  <id>https://blog.zdsmith.com/posts/unit-testing-in-nim.html</id>
  <updated>2017-05-07T00:00:00.00Z</updated>
  <content><h2>Unit Testing in Nim and Python</h2>
<p>Here’s a snippet of a unittest test case that I wrote in Python some years ago:</p>
<pre><code class="language-py">class TestClasses(TestCase):

    def setUp(self):
        self.ace_diamonds = Card(Rank.Ace, Suit.DIAMONDS)
        self.king_clubs = Card(Rank.King, Suit.CLUBS)
        self.ace_clubs = Card(Rank.Ace, Suit.CLUBS)
        
    def test_card(self):
        self.assertGreater(self.ace_diamonds, self.king_clubs)
        self.assertEquals(self.ace_diamonds, self.ace_clubs)
</code></pre>
<p>As you might guess, it was testing a class involved in a card game. It should be familiar to most Python programmers; <code>TestClasses</code> is a class inheriting from <code>unittest.TestCase</code>, which defines a method <code>test_card</code>. The test runner of my choice will read the module, instantiate the test case class, and then run any methods beginning with <code>test_</code>. In that method, I set up a few objects and then run some asserts on them.</p>
<p>Now, notice straight away—Python has an <code>assert</code> keyword, but I don’t use it here. Instead I use a couple of unittest’s own assertion methods, which are numerous; there’s one for most every kind of relationship you might want to assert over. Why use them instead of bare assert? Because the methods, knowing what kind of assertion they are and having access to the arguments, are able to produce much more informative error messages. If I change one of these assertions so it fails, here’s the traceback:</p>
<pre><code class="language-py">Traceback (most recent call last):
  File &quot;/home/zax/code/pyquet/tests/test-pyquet.py&quot;, line 20, in test_card
    self.assertLess(ace_diamonds, king_clubs)
AssertionError: Ace♢ not less than King♧
</code></pre>
<p>unittest is able to call the Card class’s <code>__repr__</code> method and produce a failure message that tells me why the assertion failed.</p>
<p>Compare that to what you see if you just use <code>assert</code>:</p>
<pre><code class="language-py">Traceback (most recent call last):
  File &quot;/home/zax/code/pyquet/tests/test-pyquet.py&quot;, line 20, in test_card
    assert ace_diamonds &lt; king_clubs
AssertionError
</code></pre>
<p>Speaking more generally, unittest can evaluate all kinds of expressions when performing asserts. Compare</p>
<pre><code>Traceback (most recent call last):
  File &quot;/home/zax/code/pyquet/tests/test-pyquet.py&quot;, line 21, in test_card
    self.assertLess(math.sqrt(5), math.sqrt(2))
AssertionError: 2.23606797749979 not less than 1.4142135623730951
</code></pre>
<p>to</p>
<pre><code class="language-py">Traceback (most recent call last):
  File &quot;/home/zax/code/pyquet/tests/test-pyquet.py&quot;, line 21, in test_card
    assert math.sqrt(5) &lt; math.sqrt(2)
AssertionError
</code></pre>
<h2>Unit testing in Nim</h2>
<p>Here’s a pretty straightforward translation of the above method into Nim:</p>
<pre><code class="language-nimrod">type
  Card = object
    rank: Rank
    suit: Suit
  Rank = enum
    crSeven
    crEight
    crNine
    crTen
    crJack
    crQueen
    crKing
    crAce
  Suit = enum
    csClubs = &quot;♧&quot;
    csDiamonds = &quot;♢&quot;
    csHearts = &quot;♡&quot;
    csSpades = &quot;♤&quot;

proc `&lt;`(a,b: Card): bool = a.rank &lt; b.rank

when isMainModule:
  let
    aceDiamonds = Card(rank: crAce, suit: csDiamonds)
    kingClubs = Card(rank: crKing, suit: csClubs)
    aceClubs = Card(rank: crAce, suit: csClubs)

  assert aceDiamonds &gt; kingClubs
  assert aceDiamonds == aceClubs
</code></pre>
<p>We declare our types, implement <code>&lt;</code> (the <code>&gt;</code> operator is just sugar for backwards <code>&lt;</code>) and use <code>isMainModule</code><sup class="footnote-ref"><a href="#fn1" id="fnref1">1</a></sup> to do some quick tests. When we compile and run, we get a traceback:</p>
<pre><code>Traceback (most recent call last)
unittest.nim(34)         unittest
system.nim(3518)         failedAssertImpl
system.nim(3510)         raiseAssert
system.nim(2620)         sysFatal
Error: unhandled exception: aceDiamonds == aceClubs  [AssertionError]
</code></pre>
<p>Now, we already get a little bit for free here; the <code>AssertionError</code> is kind enough to isolate the expression that evaluated as false (we conclude that <code>aceDiamonds</code> is not equal to <code>aceClubs</code>), but it’s not exactly a <em>test</em>. The rest of the module wouldn’t get run, for instance, and we don’t get any visual feedback about the other check.</p>
<p>So we decide to use Nim’s own <a href="https://nim-lang.org/docs/unittest.html">unittest</a> module.</p>
<pre><code class="language-nimrod">when isMainModule:
  import unittest
  suite &quot;test card relations&quot;:

    setup:
      let
        aceDiamonds = Card(rank: crAce, suit: csDiamonds)
        kingClubs = Card(rank: crKing, suit: csClubs)
        aceClubs = Card(rank: crAce, suit: csClubs)

    test &quot;greater than&quot;:
      check:
        aceDiamonds &gt; kingClubs
        aceClubs &gt; kingClubs
    test &quot;equal to&quot;:
      check aceDiamonds == aceClubs
</code></pre>
<p>This should all be pretty readable. We declare a <code>suite</code>—that’s like a <code>TestCase</code>—with a <code>setup</code> block—that’s like a <code>setUp()</code> method—and then two <code>test</code>s. In the tests we use the <code>check</code> statement to do our assertions.</p>
<p>Now our test output is a little more informative:</p>
<pre><code>[Suite] test card relations
  [OK] greater than
    pyquest.nim(35,24): Check failed: aceDiamonds == aceClubs
    aceDiamonds was (rank: crAce, suit: ♢)
    aceClubs was (rank: crAce, suit: ♧)
  [FAILED] equal to
</code></pre>
<p>It turns out we forgot to implement <code>==</code>. Without a <code>==</code> proc written for the <code>Card</code> type, Nim was using default object comparison. Implementing that proc produces this test output:</p>
<pre><code>[Suite] test card relations
  [OK] greater than
  [OK] equal to
</code></pre>
<h3>Checkpoint A</h3>
<p>The above is all you need to understand writing simple unit tests in Nim. We can see that the basic structure of a Nim unittest follows very closely to that of a unittest TestCase: test case, setup, tests, teardown.</p>
<h3>Checkpoint B</h3>
<p>One thing that’s worth pointing out is that while the structure of the two test suites is very similar, the style of the code is different. The Python code is structured as a class, where each test is a method. Further, the assertions are methods of the base class that the test case inherits from. This makes sense, as Python is a fundamentally object-oriented language, and class inheritance is one of the main ways that things get done in a Python program.</p>
<p>On the other hand, the Nim code is a little more stripped down; the same behavior is accomplished, but there’s no base class to inherit from, and no <code>self</code> that’s passed from method to method. And the assertions inside the <code>check</code> calls are expressed as normal expressions, rather than specialty methods expressing specific relations. And yet the same <code>check</code> call is able to evaluate an expression as well as output its location in the source, without requiring a traceback.</p>
<p>In short, this is possible in Nim in a way that it isn’t possible in Python because Nim has an extremely powerful <em>macro</em> system.</p>
<p>It’s not my intention to dive into the specifics of writing macros in Nim here. Nim macros, like macros in any language, are extremely powerful and can be quite difficult to reason about, as they allow the programmer to operate at two levels at once: both within the evaluation context of the language, as well as above it, interacting with and modifying the syntax tree of the language itself.</p>
<p>But this also means that they are extremely effective at creating <em><a href="https://en.wikipedia.org/wiki/Domain-specific_language">DSLs</a></em> in ways that other languages simply don’t have at their disposal. Statements like <code>check</code> and <code>suite</code> in the Nim unittest module almost act like additions to the syntax of the language itself; they’re not functions or classes, operating at runtime; they operate at compilation, accepting the tests written by the programmer as <a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree">AST</a> objects and manipulating them until the resulting code is quite different indeed. Not everybody likes macros, and with good reason; but I think a testing framework like this is a great example of their utility. They allow us to bring to bear a specialized and significantly higher level of expressiveness. The drawback is that the “rules” no longer apply; if you weren’t familiar with the unittest module, you might not understand how this code compiled at all. But writing tests, in my view, is a perfect example of a situation where the programmer benefits from the power of a DSL.<sup class="footnote-ref"><a href="#fn2" id="fnref2">2</a></sup></p>
<h3>Checkpoint C</h3>
<p>I feel that the story of testing in Nim is far from over. unittest is powerful and elegant, and admirably simple; the entire module is about 400 lines. But it’s not as full-featured as frameworks that have been around in Python for much longer.</p>
<p>There’s also <a href="https://github.com/jyapayne/einheit">einheit</a>, which I have not tried but ironically was designed with the intention of drawing more inspiration from Python’s unittest.</p>
<p>There is nothing at all equivalent to <a href="http://hypothesis.works/">Hypothesis</a>, the masterful property-based testing framework for Python. Hopefully some day we’ll have a full-featured quickcheck analog at our disposal in Nim.</p>
<section class="footnotes">
<ol>
<li id="fn1">
<p>This is nice; it means that if this module were to be imported and used in some application, that logic wouldn’t even be compiled into the binary, let alone evaluated. Like <code>if __name__ == &quot;__main__&quot;</code> on steroids, as they said in the 90s. <a href="#fnref1" class="footnote-backref">↩</a></p>
</li>
<li id="fn2">
<p>There is another well-established testing framework in Python: <a href="https://docs.pytest.org/en/latest/">pytest</a>. Which, it should be noted, can do exactly what I’ve made a lot of noise about unittest not being able to do; it allows you to use normal <code>assert foo == bar</code> statements in your tests. In some ways, this is the exception that proves the rule when it comes to macros; the wizardry behind pytest’s <a href="http://pybites.blogspot.com/2011/07/behind-scenes-of-pytests-new-assertion.html">assertion introspection</a> is heavy-duty enough that it might as well be a macro itself. <a href="#fnref2" class="footnote-backref">↩</a></p>
</li>
</ol>
</section>
</content>
</entry>
<entry>
  <title>Nim for Python Programmers</title>
  <link href="https://blog.zdsmith.com/posts/nim-for-python-programmers.html" />
  <id>https://blog.zdsmith.com/posts/nim-for-python-programmers.html</id>
  <updated>2017-02-19T00:00:00.00Z</updated>
  <content><p>I’ve been spending a lot of time with the <a href="http://nim-lang.org">Nim</a> programming language recently. It’s a great language: its principles, roughly, are to achieve the efficiency and speed of C with a much greater level of safety and expressiveness. It also so happens to take a lot of its surface-level syntactic cues from Python, including code structuring through significant whitespace and colons—that plus its emphasis on expressiveness make it very appealing and inviting to a Python programmer (like myself) who wants greater type safety and greater speed in their code.</p>
<p>The <a href="https://github.com/nim-lang/Nim/wiki/Nim-for-Python-Programmers">Nim for Python Programmers</a> page on the <a href="https://github.com/nim-lang/Nim/wiki">Nim Wiki</a> has a useful overview of some of the most salient differences between Nim and Python for those just diving in. After all, it’s <em>not</em> actually just Python With Types; it’s more like C With All The Features That Make Python So Pleasant (and some more besides). Things like homogeneous arrays/lists, significantly reduced emphasis on object-oriented design, static typing, strings vs. chars—all of those will crop up if you sit down and start typing Python into <code>foo.nim</code>.</p>
<p>I want to spend a little time, however, thinking about some of the more subtle differences between Nim and Python: the things that will crop up after you’ve learned the Nim syntax but are still writing the language with a Pythonic frame of mind.</p>
<h1>Types, Classes, and Types</h1>
<p>Something that Python programmers will do now and then (and probably more than we think we do) is <em>runtime type inspection</em>, or <em>type introspection</em>. In other words, we will examine the type of an object in our code and make decisions based on that type. We might have code like this:</p>
<pre><code class="language-py">def time_travel(d):
    if isinstance(d, date):
        d = datetime.combine(d, time(0))
    # keep going...
</code></pre>
<p>That is, when we enter <code>time_travel</code> we don’t actually know <em>what</em> <code>d</code> is, so we find out what it is as a part of our runtime logic and take some action based on what we find out. In this case we are performing some operation on <code>d</code> that expects a datetime (maybe it relies on a method on the <code>datetime</code> class), but (hopefully!) we don’t actually care what time of day it contains, so we create a dummy datetime. But we could also raise an error, log something, or even take a completely different action.</p>
<p>In a way it’s kind of the shadow side to <a href="https://en.wikipedia.org/wiki/Duck_typing">duck typing</a>. Under duck typing, we try not to care <em>what</em> the type is of any object; we just expect it to have the methods we care about. But sometimes we have to care; then we can check out the type or class of an object in the middle of a function and make a decision at runtime.</p>
<p>This kind of behavior, to the Nim compiler, is nonsensical. In Nim and many of its statically typed brethren, <em>a type isn’t a type if you don’t know it at compile time</em>. That is, in a language like Nim, you as the programmer already need to know exactly what <code>d</code> is when you’re writing <code>time_travel</code>. After all, you need to tell the compiler<sup class="footnote-ref"><a href="#fn1" id="fnref1">1</a></sup>:</p>
<pre><code class="language-nimrod">proc timeTravel(d: Datetime)
</code></pre>
<h2>You Can’t Do That</h2>
<p>This is what we mean by <em>type safety</em>. The part of type safety that we all can get behind and appreciate is that the language won’t let us do something we obviously didn’t mean to do, like call <code>time_travel(28)</code> or <code>time_travel(&quot;bacon&quot;)</code>. But what can we do if we want to accept <em>either</em> a date <em>or</em> a datetime?</p>
<p>Well, the first answer is that as you write more type-safe code, you will find that this doesn’t actually crop up nearly as often as it does in a language like Python. Odds are that when I wrote the Python function above, it came out like that because I wrote a function that took a datetime <code>time_travel</code>, and then wrote some logic that called it with a datetime:</p>
<pre><code class="language-py">today = utcnow()
time_travel(today)
</code></pre>
<p>And then a while later, I had some other totally different logic that called that same function:</p>
<pre><code class="language-py">requested_date = date(requested_year, requested_month, requested_day)
time_travel(requested_date)
</code></pre>
<p>And it called it with a date, which caused an exception (at runtime). Whoops. I might not have even noticed—I’m sure there are lots of places where I do this exact same thing and it <em>doesn’t</em> crash, because you can do an awful lot of the same things with dates that you can do with datetimes. So I added the line to just do the right thing and convert it and not crash.</p>
<p>But the only reason I wrote the second chunk of logic in the way that I did is because I didn’t remember and didn’t particularly care that my first function actually worked on datetimes, not dates!</p>
<p>And in fact, it’s just as possible that I had <em>both</em> of those call sites looking just like they do above, and it was the original function <code>time_travel</code> that I changed. Maybe the first version of the function only called the attributes of <code>d</code> that are shared in common between dates and datetimes, but then I added some functionality that only worked for datetimes. Now suddenly half of my invocations are broken. Let’s hope they were all tested.</p>
<p>If I had been writing in a more type-safe language, the compiler would have yelled at me whenever I called <code>time_travel</code> on a <code>date</code> (whether or not <code>time_travel</code> relied on any methods that only exist for datetimes). This means we don’t have to roll the dice when making the above sorts of changes. I’d always know what sorts of data were being passed into the function and what it relied on, even as those things changed over time.</p>
<h2>You Can Do Cool Stuff</h2>
<p>So, what are we really trying to do, with all this type inspection that’s suddenly off-limits? Inspecting the type/class of an object at runtime is always the means to some end; what is it accomplishing for us?</p>
<p>It comes down to a question of <em>polymorphism</em>: how do we implement the same or similar behaviors for different data types?</p>
<p>I say “similar”—after all, in <code>time_travel</code> above the behavior is not actually the same for both types. It’s a little more like this:</p>
<pre><code class="language-py">
class MyDatetime:

    def time_travel(self, time=None):
        &quot;&quot;&quot;
        Do cool stuff here
        &quot;&quot;&quot;
        time = time or self.time()
        ...

class MyDate(MyDatetime):

    def time_travel(self):
        &quot;&quot;&quot;
        Construct a datetime and then do cool stuff
        &quot;&quot;&quot;
        dummy_time = time(0)
        super().time_travel(time=dummy_time)
</code></pre>
<p>That is, the behavior of <code>time_travel</code> when <code>d</code> is a <code>date</code> is a superset of the behavior when <code>d</code> is a <code>datetime</code>. We could argue the merits of Python’s thoroughly class-based, object-oriented approach, but it’s not available in Nim.</p>
<p>Luckily, Nim has a trick that Python doesn’t have, which makes up for quite a bit of where we’d use classes for polymorphism: <a href="https://en.wikipedia.org/wiki/Function_overloading">procedure overloading</a>. You must declare the types of all procedure parameters in Nim; however, you are also able to declare multiple procedures with the same name (and even arity), with different parameter types.</p>
<pre><code class="language-nim">proc timeTravel(d: Datetime) = 
  echo &quot;This is one great procedure!&quot;

proc timeTravel(d: Date) =
  echo &quot;I'm getting there...&quot;
  d.toDatetime().timeTravel()
</code></pre>
<p>In Python, our second <code>timeTravel</code> would clobber the first; in Nim, we have actually defined two separate procedures and the compiler will resolve procedure calls to the right one based on the number and type of the arguments given at the call site.</p>
<p>What this means is that you can achieve some of the semantics of OO style through totally different (and arguably much simpler) means.</p>
<p>One of the really elegant things about the OO message-passing style is that the messages you pass to objects can have really powerful, unified semantics; you’re essentially saying, “in my domain, <code>timeTravel</code> has meaning. It’s up to everybody to implement what <code>timeTravel</code> means to them.” This is often much nicer than having to write <code>timeTravelDate</code> when you’re operating on Dates, and <code>timeTravelDatetime</code> when you’re operating on Datetimes. When you’re writing your business logic, you don’t care about what type every object is. If something doesn’t implement <code>timeTravel</code> yet, you’ll fill it in.</p>
<p>In fact, using procedure overloading you can accomplish much the same flow. To adopt a slightly simpler example, we’ll use the classic barnyard scenario:</p>
<pre><code class="language-py">class Cow:
    def speak(self):
        print &quot;moo&quot;

class Chicken:
    def speak(self):
        print &quot;bok bok&quot;

class Farmer:
    &quot;&quot;&quot;
    TODO: implement `speak`
    &quot;&quot;&quot;
    raise NotImplementedError()
</code></pre>
<p>You know you can do nice things like write</p>
<pre><code class="language-py">...
denizen = randomly_get_barnyard_denizen()
denizen.speak()
</code></pre>
<p>And if <code>denizen</code> happens to be a <code>Cow</code>, you’ll see “moo”, and if it happens to be a <code>Chicken</code>, you’ll see “bok bok”. Nice. (And if it happens to be a <code>Farmer</code>, you’ll blow up at runtime<sup class="footnote-ref"><a href="#fn2" id="fnref2">2</a></sup>. Not so nice.)</p>
<p>The good news is that with procedure overloading you can write Nim code like this</p>
<pre><code class="language-nimrod">type
  Cow = object
  Chicken = object
  Farmer = object

proc speak(c: Cow) =
    echo &quot;moo&quot;

proc speak(c: Chicken) =
    echo &quot;bok bok&quot;
</code></pre>
<p>And the message-like semantic concentration of <code>speak</code> is preserved. And with Nim’s <em>unified call syntax</em>, we can express <code>speak(c)</code> as <code>c.speak()</code> to preserve method-style invocation. And what else is nice is that if we have some <code>Farmer</code> <code>f</code>, and call <code>speak(f)</code>, we will at compile-time know that <code>speak</code> is not implemented for <code>Farmer</code>:</p>
<pre><code>scratch.nim(13, 2) Error: type mismatch: got (Farmer)
but expected one of:
proc speak(c: Cow)
proc speak(c: Chicken)
</code></pre>
<h2>With Great Power</h2>
<p>What you <em>can’t</em> do in Nim is implement <code>randomly_get_barnyard_denizen</code>. Because the return type of <code>randomly_get_barnyard_denizen</code> is going to be something like <code>Cow | Chicken | Farmer</code>, and that doesn’t compile.</p>
<pre><code class="language-nimrod">proc randomlyGetBarnyardDenizen(): Farmer | Chicken | Cow =
  let randomChoice = random(2)
  case randomChoice:
    of 0:
      result = Farmer()
    of 1:
      result = Chicken()
    else:
      result = Cow()

randomize()

discard randomlyGetBarnyardDenizen()
</code></pre>
<p>Gets you:</p>
<pre><code>scratch.nim(14, 14) Error: type mismatch: got (Chicken) but expected 'Farmer = object'
</code></pre>
<p>So that’s a limitation. That is probably going to be your first indication that <em>types are not classes</em>. In fact, if you have a function in your program that <em>might</em> return a <code>Cow</code>, and <em>might</em> return a <code>Chicken</code>, depending on some factor not known at compile time (the contents of a text file, maybe, or a random number), then maybe they are actually the <em>same type</em>. Maybe when you boil them down to the actual structure of their data, and where they’re used, they’re the same; maybe it’s just the behavior that differs. In Python we would use a class to implement this, but we don’t need to do that in Nim.</p>
<p>In Python we are used to setting up a bunch of classes in order to concretize our domain; if we have three types of thing (three “nouns”), we’ll make three classes. Type-safe programming asks us to think a little more rigorously about the ontology of our application. It’s not just a matter of laying out the objects that we think make up our domain; do our procedures reflect that ontology as well?</p>
<p>With this in mind, we might decide to use a simple <code>enum</code> to capture the variations amongst the different different barnyard denizens, and restructure the program like this:</p>
<pre><code class="language-nimrod">import random

type
  DenizenKind = enum
    chicken, cow, farmer
  BarnyardDenizen = object
    kind: DenizenKind

proc randomlyGetBarnyardDenizen(): BarnyardDenizen =
  let newKind = random(0..3).DenizenKind
  result = BarnyardDenizen(kind: newKind)

proc speak(bd: BarnyardDenizen) =
  case bd.kind:
    of cow:
      echo &quot;moo&quot;
    of chicken:
      echo &quot;bok bok&quot;
    else:
      echo &quot;we haven't figured this out yet&quot;

randomize()
let bd = randomlyGetBarnyardDenizen()
bd.speak()
</code></pre>
<p>Now we have one type, and what needs to be determined at runtime—the kind of our denizen—is a value, accessible at runtime. Meanwhile, we’ve still managed to isolate and control this now-runtime-dependent value in a type-safe way using an enum. In this particular case, our need for polymorphism has gone away entirely.</p>
<p>Of course, as our program increases in complexity and we need to do many different things with these different types of denizens, we’ll probably want to make use of the more advanced features provided by the language when it comes to polymorphism and expressiveness; <a href="https://nim-lang.org/docs/tut2.html#object-oriented-programming">inheritance</a>, <a href="https://nim-lang.org/docs/tut2.html#generics">generics</a>, <a href="https://nim-lang.org/docs/tut2.html#templates">templates</a>, and <a href="https://nim-lang.org/docs/tut2.html#macros">macros</a> all provide different and more complex ways to implement powerful, polymorphic behavior.</p>
<h2>The Future is Bright</h2>
<p>It’s clear that writing in Nim requires a keener understanding of the structure and relationships between the data in our programs. At the same time, I strongly believe that writing in it will be a much more pleasant experience than the statically-typed, compiled status quo for any programmer used to the expressiveness and freedom of writing in Python or other dynamically typed, interpreted languages.</p>
<section class="footnotes">
<ol>
<li id="fn1">
<p>In this particular example, the Nim <code>times</code> module doesn’t distinguish between Dates and Datetimes; there’s just Time, which has all the precision of Datetime. From a Python perspective this seems restrictive; however, after a little while you might realize that the reason you need both <code>date</code> and <code>datetime</code> in Python is because they’re not types, but <em>classes</em>—they implement useful and sometimes mutually exclusive methods. When you boil away the methods and you’re left with just the data and its structure, you don’t need nearly as many types in Nim as you need classes in Python. <a href="#fnref1" class="footnote-backref">↩</a></p>
</li>
<li id="fn2">
<p>Alternately, if you didn’t raise inside Farmer.speak(), you would just have a subtle runtime bug where one third of your calls fails silently (literally). <a href="#fnref2" class="footnote-backref">↩</a></p>
</li>
</ol>
</section>
</content>
</entry>
<entry>
  <title>The Dark Path, or, What if I Don't Want to Quit My Job?</title>
  <link href="https://blog.zdsmith.com/posts/the-dark-path-or-what-if-i-dont-want-to-quit-my-job.html" />
  <id>https://blog.zdsmith.com/posts/the-dark-path-or-what-if-i-dont-want-to-quit-my-job.html</id>
  <updated>2017-01-12T00:00:00.00Z</updated>
  <content><p><a href="https://en.wikipedia.org/wiki/Robert_Cecil_Martin">Uncle Bob</a>, noted programming pundit, has written a strange <a href="http://blog.cleancoder.com/uncle-bob/2017/01/11/TheDarkPath.html">blog post</a>. It’s a litany against, as near as I can tell, a certain attitude around static typing: that the purpose of strong static typing, and by extension programming language features, is to provide a high degree of security against certain classes of programmer errors: uncaught exceptions, unchecked nulls, using Javascript, et cetera.</p>
<p>Bob says:</p>
<blockquote>
<p>The question is: Whose job is it to manage that risk? Is it the language’s job? Or is it the programmer’s job.</p>
</blockquote>
<p>(It is, per Bob, the programmer’s job.)</p>
<p>Later:</p>
<blockquote>
<p>Now, ask yourself why these defects happen too often. If your answer is that our languages don’t prevent them, then I strongly suggest that you quit your job and never think about being a programmer again; because defects are never the fault of our languages. Defects are the fault of programmers. It is programmers who create defects – not languages.</p>
</blockquote>
<blockquote>
<p>And what is it that programmers are supposed to do to prevent defects? I’ll give you one guess. Here are some hints. It’s a verb. It starts with a “T”. Yeah. You got it. TEST!</p>
</blockquote>
<p>That is, Bob strongly argues that the proper way to protect against programmer errors is <em>testing</em>, and that it is very wrong to design programming languages to do the work of testing.<sup class="footnote-ref"><a href="#fn1" id="fnref1">1</a></sup></p>
<p>What a weird article. And what a funny conclusion. Especially because Bob is certainly not the first person to establish a contrast between tests and types; it’s an insight I have heard many times, from many quarters, but always until now formulated in the opposite direction: something along the lines of “I’ve noticed that dynamic typing forces you to write a lot more tests.”</p>
<p>But in addition to coming off as somewhat cranky, Bob also strikes me here as deeply <em>naive</em>. I think that he’s violating a pattern that I’ve come to place a lot of faith in: that any sufficiently <em>mature</em> programmer (engineer, computer scientist, or otherwise) eventually views the apparatuses of computer programming as prostheses, supports, and correctives for human reasoning—and views human reasoning as deeply fallible. In other words, they turn out to be very humble about their own ability as programmers.</p>
<p>And I’m talking big-brain men and women like <a href="https://en.wikipedia.org/wiki/Leslie_Lamport">Lamport</a>, <a href="https://en.wikipedia.org/wiki/Donald_Knuth">Knuth</a>, <a href="https://en.wikipedia.org/wiki/Bjarne_Stroustrup">Stroustrop</a>, <a href="https://en.wikipedia.org/wiki/Idris_(programming_language)">Edwin Brady</a>, <a href="https://en.wikipedia.org/wiki/Brian_Kernighan">Kernighan</a> and others. Scientists and engineers who I can be pretty confident are better-educated, smarter, and more knowledgeable about our shared domain than I will ever be. Even if they are strident and opinionated (and funnily enough Brady, being the author of the typiest and big-brainiest language I know, is probably least so) on one topic or another, they all say things like, “now, I never actually remember the order of the arguments here”, or, “I can never keep all of [foo] in my head at once”, or, “[bar] really helps you when you can’t figure out how to write things”. And not only as a justification for types, mind you. It’s why Lamport advocates for <a href="https://en.wikipedia.org/wiki/TLA%2B">formal specification</a>—not because he’s so god-damned brilliant that he actually knows how to write math and I don’t, but because he recognizes that even his ability to reason about and design software is <em>insufficient</em> without mechanical help.</p>
<p>I think this is ultimately the most, maybe the only, mature way to view programming languages and techniques. It’s why testing is <em>also</em> a great practice. The basic insight that:</p>
<ul>
<li>I am not quite as smart as I felt whenever I wrote whatever I wrote;</li>
<li>I am not quite so smart that <em>any</em> amount of education or experience will cleanse me of basic lapses of reasoning and memory;</li>
<li>I am capable of learning pretty much anything, and no amount of learning will make me much smarter than I am now.</li>
</ul>
<p>What do I/we do when we finally realize that, oh, dang, maybe I can be a brilliant computer scientist <em>and</em> a dumb human who can only hold 7 +/- 2 things in his monkey brain at any time? Uncle Bob suggests I “quit [my] job and never think about being a programmer again”, to which I will respectfully demur. I like programming, and I think I’m good at it; I’m just stupid and I have a lousy memory. Instead I will do what my dumb human forebears have done for millenia, and use tools. Here follows an abridged list of prostheses developed by humans to assist and supplement the act of reasoning:</p>
<ul>
<li>Unit tests</li>
<li>Type systems</li>
<li>Code review</li>
<li>Programming languages</li>
<li>Logic</li>
<li>Mathematics</li>
</ul>
<p>And more importantly I will strive to <em>remember</em> my dumbness and be <em>humble</em>; to accept help wherever I can get it; and to meet my fellow humans in a spirit of dumb equality.</p>
<section class="footnotes">
<ol>
<li id="fn1">
<p>In the last paragraphs, Bob proposes a scenario where all programmers, needing to escape the shackles of these picky, overly verbose languages and get actual work done, override or bypass all the safety mechanisms in our language, and cause a (literal) nuclear meltdown. This is rather absurd and I won’t address it any more than to point out that many ordinary programmers intuitively grasp the basic value of safety and specificity, which is why in Python it is widely considered extremely bad practice to write <code>except:</code> or <code>except Exception:</code> even though having to specify all of the exception classes we are interested in is arguably a safety that we could override at no loss of expressiveness. <a href="#fnref1" class="footnote-backref">↩</a></p>
</li>
</ol>
</section>
</content>
</entry>
<entry>
  <title>Thoughts on "Death of a Language Dilettante"</title>
  <link href="https://blog.zdsmith.com/posts/thoughts-on-death-of-a-language-dilettante.html" />
  <id>https://blog.zdsmith.com/posts/thoughts-on-death-of-a-language-dilettante.html</id>
  <updated>2016-05-30T00:00:00.00Z</updated>
  <content><p>Let’s establish a few terms.</p>
<p><em>Computation</em> is what computers do. And a <em>programming language</em> is a system for expressing computation.</p>
<p>I take it as an article of faith that the value of a programming language is the degree to which the language <em>makes it easier to reason about computation</em>. This is a departure from the implicitly stated value of a programming language in <a href="http://prog21.dadgum.com/219.html">Hague’s article</a>, which is to “reduce the pain of programming.” I think the latter is reducible to the former. But if you don’t say that outright, I think you can miss it. A lot of Hague’s article expresses a sense that he and others are using the <em>wrong</em> programming language; that there are certain languages that are appropriate to use, and others that are inappropriate to use, and that too many people are using the inappropriate ones. That is, it seems that a lot of his dilettantism is driven by a sense of anxiety about his chosen milieu and tools at a point in time.</p>
<p>This is an understandable anxiety, and one I share every time I have to write JavaScript: 1) there is considerable pain and uncertainty, and 2) I have the sense that the language I’m writing in is somewhat to blame.</p>
<p>But it’s not why I am a programming language dilettante. My solution to that anxiety is to generally avoid writing JavaScript, which means generally half-assing the frontend components of the web code that I write.</p>
<p><em>Programming</em>, I should say, is <em>reasoning about computation</em>. That is, not exclusively writing the code the first time, but also coming back to it and making changes, and having a solid enough mental model to explain the behavior of the system to others. And in my opinion there <em>are</em> some languages that make this easier than others, and I’m actively interested in learning them and working in them. This does not mean that the languages which make it easiest to reason about computation are the appropriate ones to work in. A good, proper, modern functional language is a delight to me, but I am primarily a Python programmer and will reach for Python most times. This is not simply because I haven’t put in enough effort to learning J—that’s one reason among many that Python, which is probably not as <em>good</em> a language as J, is much more often the right tool for the job.</p>
<p>So that’s not why I want to learn J, or why I have chosen to learn those non-Pythonic languages that I have learned to some extent, like Clojure and Erlang. Because the nice thing about sexy, functional languages like Clojure and Erlang, which are by my lights <em>better</em> than Python, or at least <em>absolutely</em> worth putting the time and effort into learning as a practice of language dilettantism, is that the ability to reason about computation is highly portable. And every time I immerse myself in a thoroughly different way of reasoning, such as is provided by all of the above examples, the important thing that’s happening is going on in my head, not in the computer. Except for the problems to which it is uniquely suited, the value of most Erlang programs that I write is not that they are in Erlang. None of the exercises or <a href="https://github.com/subsetpark/erlsaunt">toy applications</a> and <a href="https://github.com/subsetpark/systems">cellular automata</a> that I wrote in Erlang are better than an equivalent program in JavaScript because they are in Erlang. The value in them was in their writing (and editing, and explaining), and in the new pathways and perspectives that they introduced into my habits of reasoning. These are habits which I may blessedly carry around with me wherever I go.</p>
<p>After all, I think it’s quite arguable that idiomatic Python style (and Python is language and community with a particularly acute focus on idiomatic style, much for the better) has shifted (perhaps with the rest of the mainstream programming community) to a greater embrace of functional principles. Generations of Python programmers, myself included, have bit by bit spent a few weeks or months trying and mostly failing to wrap their heads around Haskell, but have returned to the fold with a greater appreciation for referential transparency, for the minimization of mutable state, for orderly and perhaps somewhat austere scoping (maybe even for types?). Clawing our way through the first half of <a href="http://learnyouahaskell.com/">Learn You a Haskell For Great Good!</a> has given us new skills in the art of reasoning about computation, which is roughly equivalent to making us better programmers.</p>
<p>And this is the blessing of dilettantism. I think that’s an important word, if somewhat inapt for much of the habits and motivations described in Hague’s article. Dilettantism is not technocracy or progressivism, and the dilettante need not spend their life in search for the <em>better</em> and ultimately <em>best</em> way. The dilettante allows themselves to sample and dabble, to dip a few toes, to paddle around, to put up a repo with the first 7 <a href="https://projecteuler.net/">Project Euler</a> problems, and then to recede and carry on their merry way. Once in a while they will hit on something marvelous that really speaks to them and become a True Believer. This is a grand thing and I live my life in the eternal faint promise that at some point in my life I will spend my whole days thoroughly ensconced in one tiny corner of the programming language firmament that has made itself known to me as The Best Way, where all the libraries are well-formed and all the code is concise, and until that day I am content and grateful to dabble, with the knowledge that every new expression of this same computation that all computers do might grant me a new and valuable perspective.</p>
</content>
</entry>
<entry>
  <title>Comparing Dates and Datetimes in the Django ORM</title>
  <link href="https://blog.zdsmith.com/posts/comparing-dates-and-datetimes-in-the-django-orm.html" />
  <id>https://blog.zdsmith.com/posts/comparing-dates-and-datetimes-in-the-django-orm.html</id>
  <updated>2015-04-17T00:00:00.00Z</updated>
  <content><h2>The issue at hand</h2>
<p>When working in Django, one often finds oneself with the following sort of question:</p>
<p><em>How many records were created (or updated, or posted) today (or yesterday, or last Monday)?</em></p>
<p>But most of the time, your <code>created_on</code>/<code>updated_on</code>/<code>posted_on</code> column will be a Datetime, and today is not a Datetime—it’s a Date<sup class="footnote-ref"><a href="#fn1" id="fnref1">1</a></sup>. So if you simply query like this:</p>
<pre><code>Foo.objects.filter(created_on=date)
</code></pre>
<p>You’ll always receive an empty result—or at best you’ll receive only those objects that were created at the exact moment that comes up when <code>date</code> is coerced into a Datetime (in the case of right now, at 12:21 EST on April 17, 2015, that would be <code>2015-04-17 04:00:00</code>).</p>
<p>It turns out this question tends to come up a lot. Here’s the top four results in a google search for <a href="https://www.google.com/search?q=django+compare+by+date+of+datetime">django compare by date of datetime</a>:</p>
<ol>
<li><a href="http://stackoverflow.com/questions/10048216/compare-date-and-datetime-in-django">Compare date and datetime in Django</a></li>
<li><a href="http://stackoverflow.com/questions/4606207/using-datetime-to-compare-with-dates-in-django">Using datetime to compare with dates in Django</a></li>
<li><a href="http://stackoverflow.com/questions/1317714/how-can-i-filter-a-date-of-a-datetimefield-in-django">How can I filter a date of a DateTimeField in Django?</a></li>
<li><a href="http://stackoverflow.com/questions/3798812/how-to-compare-dates-in-django">python - How to compare dates in Django</a></li>
<li><a href="https://code.djangoproject.com/ticket/9596">Comparing a DateTimeField to a date is too hard</a></li>
</ol>
<p>Those 4 Stack Overflow posts also give us an idea of the state of the art in addressing this common need.</p>
<p>To sum up, here are the approaches recommended in the many answers to these similar questions:</p>
<h3>Use __range</h3>
<p>Picking a min and max datetime, pass them as a tuple like this:</p>
<pre><code>Foo.objects.filter(created_on__range=(min_dt, max_dt))
</code></pre>
<p>Which will return all datetime records within the two values of the tuple.</p>
<p>There are a couple ways to get your min and max. If you have a target datetime already you can use timedeltas:</p>
<pre><code>min_dt = target_date - timedelta(hours=12)
max_dt = target_date + timedelta(hours=12)
</code></pre>
<p>Or if you have a target date you can use the <code>min</code> and <code>max</code> of that date:</p>
<pre><code>min_dt = datetime.datetime.combine(date, datetime.time.min)
max_dt = datetime.datetime.combine(date, datetime.time.max)
</code></pre>
<p>These of course have slightly different effects. In particular, you need to decide whether you’re looking for everything on a certain date, or everything within a certain 24-hour window. Usually, at <a href="https://makespace.com/about/careers/">Makespace</a>, it’s the former.</p>
<h3>Use __contains</h3>
<p>Take advantage of SQL’s string matching by filtering like this:</p>
<pre><code>Foo.objects.filter(created_on__contains=date)
</code></pre>
<p>Neither of the above two really knocks it out of the park for me. The latter is, generously, a hack; taking advantage of the way that dates and datetimes are stored as strings in order to to find matches. But the former is quite verbose, and requires manually doing tricky datetime and timedelta logic.</p>
<p>At <a href="https://makespace.com/about/careers/">Makespace</a> we opted for the simplicity of the latter. However, the writing was on the wall.</p>
<p>This week, it came time to update a bunch of our system packages, including <a href="https://pypi.python.org/pypi/PyMySQL">PyMySQL</a>. With the latest version of PyMySQL, running a <code>contains</code> lookup on a datetime with a date starts, rather sensibly, to throw an error: <code>Incorrect datetime value: '%2015-04-12%' for column 'created_on' at row 1</code>. That is: PyMySQL no longer likes to pass a date value to to comparison with a datetime field, even while using <code>contains</code>. It was the end of the road for <code>contains</code>.</p>
<p>Luckily, <a href="https://docs.djangoproject.com/en/1.7/releases/1.7/">Django 1.7</a> introduced some new features when it comes to enxtending the lookup system of the ORM, meaning that a more elegant and efficient solution is within reach, without having to wait for the six year-old <a href="https://code.djangoproject.com/ticket/9596">#9596</a> to get merged.</p>
<h2>django.db.models.Transform</h2>
<p>The new <code>Transform</code> class, as it says in the 1.7 release notes, “allows transformations of database values prior to the final lookup”. While it looks a bit intimidating, we were able to use the <a href="https://docs.djangoproject.com/en/1.7/howto/custom-lookups/">howto documentation</a> to write a Transform that does exactly what we’ve been looking for within our filter calls. It looks like this:</p>
<pre><code>from django.db.models import Transform
from django.db import models

class MySQLDatetimeDate(Transform):
    &quot;&quot;&quot;
    This implements a custom SQL lookup when using `__date` with datetimes.
    To enable filtering on datetimes that fall on a given date, import
    this transform and register it with the DateTimeField.
    &quot;&quot;&quot;
    lookup_name = 'date'

    def as_sql(self, compiler, connection):
        lhs, params = compiler.compile(self.lhs)
        return 'DATE({})'.format(lhs), params

    @property
    def output_field(self):
        return models.DateField()
</code></pre>
<p>A Transform is a very useful kind of lookup (the things separated by <code>__</code> in the string <code>foo__bar__date</code> are chained lookups) which takes the left-hand value (in this case, <code>bar</code>) and applies a further <em>transformation</em> to it before the query is actually run. In this case, <code>bar</code> is a SQL datetime field that we want to use the lookup <code>date</code> to transform into a date field.</p>
<p>This allows us to make queries like this:</p>
<pre><code>Foo.objects.filter(created_on__date=date)
</code></pre>
<p>And get back everything that was created on the date in question.</p>
<p>The important bits are at lines 14 and 18. On line 14, in the <code>as_sql()</code> method, we’ve already gotten the SQL column that we’ll be comparing against <code>date</code>, and now we’re building our raw SQL query. All we do here is wrap the column data in a SQL <a href="http://www.w3schools.com/sql/func_date.asp"><code>DATE()</code></a> call, which returns the date element of a datetime expression. Then, on line 18, we specify that the column data, after the transform, should be treated as a DateField (and no longer a DateTimeField)—this allows the db to perform the comparison without thinking that it has to coerce the right-hand data into a Datetime in order to make a comparison.</p>
<p>Of course, this implementation relies on your particular flavor of SQL <em>having</em> a <code>DATE()</code> function. MySQL does. So does <a href="http://www.sqlite.org/lang_datefunc.html">SQLite</a>. On the other hand, I haven’t worked with PostgreSQL personally, but some googling leads me to believe that it does <em>not</em> have a <code>DATE()</code> function. So an implementation this simple seems like it will necessarily be somewhat backend-dependent.</p>
<p>Nevertheless, after you define this transform, all you have to do is register it to the DateTimeField you use with <code>register_lookup</code>. Then you can use the <code>__date</code> lookup transparently in your chaining filter queries.</p>
<p>For me, this is a resolution of a long-standing hack that I’ve had in place when working with Django. It’s idiomatic within both Django and SQL (for certain flavors of SQL), and both terse and obvious in application.</p>
<section class="footnotes">
<ol>
<li id="fn1">
<p>The difference being that Datetimes refer to a specific time on a specific date—the difference between <code>2015-04-14 16:07:51</code> and <code>2015-04-14</code>. <a href="#fnref1" class="footnote-backref">↩</a></p>
</li>
</ol>
</section>
</content>
</entry>
<entry>
  <title>Posical, the Positivist Calendar for Python</title>
  <link href="https://blog.zdsmith.com/posts/posical-the-positivist-calendar-for-python.html" />
  <id>https://blog.zdsmith.com/posts/posical-the-positivist-calendar-for-python.html</id>
  <updated>2014-06-30T00:00:00.00Z</updated>
  <content><p>Let’s begin 225 years ago. In the year 1789 of the conventional <a href="http://en.wikipedia.org/wiki/Gregorian_calendar">Gregorian calendar</a>, widespread crisis and dissent forced the Estates-General to convene in France for the first time in 175 years. Thus began the French Revolution.</p>
<p>60 years after that, in that same nation, the philosopher <a href="http://en.wikipedia.org/wiki/Auguste_Comte">August Comte</a> proposed a <a href="http://en.wikipedia.org/wiki/Calendar_reform">calendar reform</a> known as the <a href="http://en.wikipedia.org/wiki/Positivist_Calendar">Positivist Calendar</a>.</p>
<h2>Here Are Some of the Reasons That the Gregorian Calendar is Awful</h2>
<p>The kludginess of the commonly used Gregorian Calendar will be immediately apparent to anybody who has had to use it, which population happens to include the majority of persons living in the world today.</p>
<p>The inopportuneness of the scheme lies primarily in its division of months. There’s the leap year thing to contend with, of course; but that’s unavoidable as long as one prefers one’s days 24 hours long. The months, on the other hand, are more or less unforgivable:</p>
<ul>
<li>
<p>They’re of irregular length. Not only are some 30 days long and some 31 days long, which seems (I say seems) to be unavoidable if you’ve decided you like a thirtyish-day-long month and you’ve got 365 days to give out, but one is only 28 days long. So in fact their length is more varied than it would need to be under nearly any constraint.</p>
</li>
<li>
<p>They’re of irregular distribution. As aficionados of the <a href="http://www.wikihow.com/Memorize-How-Many-Days-Are-in-Each-Month">knuckle technique</a> know, the months of the year roughly <em>tend</em> towards alternating, 30 and 31 days, but there happens to be a missing 30-day month between July and August.</p>
</li>
</ul>
<p>Secondarily we have to take issue with the distribution of weeks.</p>
<ul>
<li>They neither fit neatly into the months, leaving two or three left over for each month of the year (except, perversely, that outlier, February, which contains exactly four weeks), nor do they sit easily with the year, leaving us with 52 weeks and one lonely day for every year.</li>
</ul>
<p>These facts would seem to merit immediate and absolute rectification to nearly anybody given how inconvenient they make the very basic and very essential practice of telling time, but in fact they tend to be taken for granted by nearly everybody.</p>
<h2>There is a Better Way, or Several</h2>
<p>Nearly everybody, of course, but August Comte, and his ilk. Msr. Comte was neither the first nor the last person to propose a more rational alternative to the calendar, but he is the one we’ll be paying attention to today.</p>
<h3>Basic Principles for Calendar Design</h3>
<p>No matter who you are, if you decide you could do better than 16th century astronomer <a href="http://en.wikipedia.org/wiki/Aloysius_Lilius">Aloysius Lilius of Calabria</a> and <a href="http://en.wikipedia.org/wiki/Pope_Gregory_XIII">Pope Gregory XIII</a>, there are some basic mathematical truths you’re contending with. Chief among them is this:</p>
<h4>There are 365 days in a year (366 on leap years)</h4>
<p>Neither Gregory nor Comte nor anybody else decided on the ratio of the rotational period of the Earth to its orbital period. That one we’re stuck with. This is not a number that lends itself to factorization. It has exactly two factors aside from 1 and itself: 5 and 73. This makes division difficult.</p>
<p>Here is a secondary truth:</p>
<h4>There are 7 days in a week</h4>
<p>This is, of course, up for debate; in fact in a way it’s significantly more trivial than the months themselves. If we decided we wanted five days in a week, say, then we’d have exactly 73 weeks in the year. Then again, 73 is prime, so our neat subdivision would have to end there.</p>
<p>In any case the fact of a 7-day week has remained more or less unaffected by the procession of calendars in the West and it doesn’t really seem up for debate. Whether it’s Thursday tends to have much more of an impact on most people than whether it’s March or April. Or Archimedes, as we’ll see.</p>
<p>There is however another truth that we can bear in mind as we fix the mistakes of the past:</p>
<h4>364 is really, really close to 365 - they’re really almost the same thing</h4>
<p>Bear with me.</p>
<p>Here is the neat calendrical trick, first come up with by <a href="http://en.wikipedia.org/wiki/Hugh_Jones_(reverend)">Hugh Jones</a>, that suddenly allows the calendar to breathe more easily in all directions. 365 mod 7 = 1, that is, there’s one day left after the 52 whole weeks in a year. 364 is perfectly divisible by 7. But unlike 365, which has only a week-sized factor, 364 has a week-sized factor and a month-sized factor: 28. And, in a stroke of luck so good that one must imagine that Rev. Jones was more divinely favored than His 16th C. Holiness himself, 28 is <em>also</em> perfectly divisible by 7.</p>
<p>What this means is that if we had only 364 days to deal with, then we could divide them into 13 equally-sized months, each of which contained 4 equally-sized weeks. Then the first of every month would be Monday, the 18th would always be Thursday, the 180th day of the year would always always be Saturday, et cetera.</p>
<p>Then, let us only deal with 364 days. In the Positivist Calendar, the 365th day (and 366th day on Leap Years) is not a part of any month at all, nor a day of the week. It is <a href="http://en.wikipedia.org/wiki/Intercalation_(timekeeping)"><em>epagomenal</em></a>. The 365th day of a year is just the 365th of that particular year; a day set aside from the ordinary cycle before things begin again.</p>
<h2>A Calendar for a More Rational Age</h2>
<p>So there you have it. The Positivist Calendar consists of 13 28-day months, with 1 epagomenal (or intercalary) day, two in a leap year. This means that every month is the same length, and the weekdays of every month are always the same. Finally it is <em>perennial</em>, in that the weekdays of every year are always the same.</p>
<p>Comte’s Positivist Calendar has a few extra features for added delight and interest. In a further break from the Gregorian format, he renamed all the months and days of his calendar after his own humanist pantheon. So the eighth month of the Positivist Calendar is called Dante, the sixth is Moses (not a completely irreligious choice, I’ll allow), and so on. And the 10th of Dante is dedicated to Rembrandt, the 8th of Shakespeare is dedicated to <a href="http://en.wikipedia.org/wiki/Tirso_de_Molina">Tirso</a>, and on down the line. The epagomenal day is known simply as <em>The Festival of All the Dead</em>.</p>
<p>Finally: Comte set year 1 of his new calendar as the first year of the truly modern age: 1789, the first year of the Great Crisis.</p>
<p>Thus it is that I write to you on this day, Wednesday, the 24th of Archimedes, in the Positivist year of 225, dedicated in honor of <a href="http://en.wikipedia.org/wiki/Vitruvius">Vitruvius</a>.</p>
<h1>Posical</h1>
<p>I’ve written a Python library, <a href="https://github.com/subsetpark/posical">posical</a>, to model and explore the Positivist calendar. My initial aim was to create <code>AlternateDate</code> objects that could interact with <a href="https://docs.python.org/3.3/library/datetime.html#datetime.date"><code>date</code> objects</a> produced by the standard <code>datetime</code> library.</p>
<pre><code>class AlternateDate(object):

    def __init__(self, year, month, day, calendar):
        self.year = year
        self.month = month
        self.day = day
        self.day_of_year = (month - 1) * calendar.weeks_in_a_month * calendar.days_in_a_week + day
        if self.day_of_year &gt; 366:
            raise ValueError(&quot;This day cannot exist.&quot;)

        self.is_leap = calendar.is_leap(self.to_gregorian().year)
                        
        self.weekday = calendar.get_weekday(self.day)
        self.month_name = calendar.get_month_name(self.month)
        self.day_name = calendar.get_day_name(self.day_of_year, self.is_leap)
        self.weekday_name = calendar.get_weekday_name(self.weekday)
</code></pre>
<h2>Date Interactions</h2>
<p>The AlternateDate class has methods that take care of two types of interaction with standard <code>datetime</code> classes: date comparison and timedelta math. Standard date objects are able to interact with each other, and do things like the following:</p>
<pre><code>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; d = datetime.date(2014, 4, 18)
&gt;&gt;&gt; d1 = datetime.date(2014, 4, 19)
&gt;&gt;&gt; d1 &gt; d
True
&gt;&gt;&gt; d1 - d
datetime.timedelta(1)
&gt;&gt;&gt; 
</code></pre>
<p>That is, you can compare two dates to see which is ‘greater’ (in the sense of later, or I suppose, containing more days since the start of time), and you can also work with timedeltas. The <code>timedelta</code> class represents the absolute difference between two times, expressed (when it comes to date math) as a number of days. So tomorrow minus today results in a timedelta of 1 day. And tomorrow plus a timedelta of 1 day equals a date object representing the day after tomorrow.</p>
<pre><code>def __add__(self, arg):
    return self.calendar.from_date(arg + self.to_gregorian())
__radd__ = __add__
def __sub__(self, arg):
    return self.calendar.from_date(self.to_gregorian() - arg)
def __rsub__(self, arg):
    return self.calendar.from_date(arg - self.to_gregorian())
def __eq__(self, other_date):
    return other_date == self.to_gregorian()
def __gt__(self, other_date):
    return self.to_gregorian() &gt; other_date
def __lt__(self, other_date):
    return self.to_gregorian() &lt; other_date
def __ge__(self, other_date):
    return self.to_gregorian() &gt;= other_date                
def __le__(self, other_date):
    return self.to_gregorian() &lt;= other_date    
</code></pre>
<p>AlternateDate objects can get in on the fun as well. I defined the magic methods that control date objects’ response to the comparison, addition and subtraction methods—and what’s great about Python’s operator handling is, I’m able to do it with respect to the operators themselves. In each case it’s usually just a matter of presenting the AlternateDate’s Gregorian equivalent back to the object it’s being compared to. Thus if you want to compare a Positivist date and a Gregorian date, the Positivist date will respond with a standard datetime version of itself, and the two datetime date objects will be able to report their comparison. But more exciting is that if you want to compare to Positivist dates, the exact same behavior produces the desired outcome: the operator is passed to the first of the two dates, which produces a Gregorian version of itself and passes control back to the other date. The other date does the exact same thing, producing a Gregorian version of itself and calling the operator with its argument. Now the comparison is being called on two standard datetime <code>date</code> objects and the correct result is returned.</p>
<pre><code>&gt;&gt;&gt; print(d)
Friday, 26th of Archimedes, 225: Frontinus
&gt;&gt;&gt; print(d1)
Saturday, 27th of Saint Paul, 231: William Penn
&gt;&gt;&gt; d1 &gt; d
True
&gt;&gt;&gt; d1 - d
datetime.timedelta(2248)
&gt;&gt;&gt; d1 + datetime.timedelta(2248)
positivist date(237, 8, 27)
&gt;&gt;&gt; d - datetime.date.today()
datetime.timedelta(2)
</code></pre>
<h2>Calendar Metaprogramming</h2>
<p>As we saw above, many of the specifics of the Positivist Calendar are just design decisions, finding a comfortable number of weeks per month and months per year to fit neatly over a seven-day week and within a 365-day year. But with the introduction of the epagomenal days, Comte could have chosen any arrangement to fill out the solar year. Even the number of weeks in a day is somewhat arbitrary.</p>
<p>So once I established the mechanics of creating date objects I decided I’d like to parameterize all these design decisions and make a flexible <code>AlternateCal</code> class that could create date objects under any calendar reform scheme that the user might like.</p>
<pre><code>def __init__(calendar, w_i_month=4, d_i_week=7, year_1=1789):
   calendar.days_in_a_month = d_i_week * w_i_month
   calendar.days_in_a_week = d_i_week
   calendar.weeks_in_a_month = w_i_month
   calendar.months_in_a_year = 365 // calendar.days_in_a_month
   calendar.epagomenal_days = 365 % calendar.days_in_a_month
   name_choices = ('New Adjusted', 'Utilitarian', 'Lycurgian', 'Multi-Manifold', 'Positivist', 'Crepuscular', 'Urquhart', 'Adamantine', 'Organic Non-Repeating', 'Antediluvian', 'Re-Corresponding')
   calendar.name = name_choices[hash((w_i_month, d_i_week, year_1)) % 11]
   calendar.year_offset = year_1
</code></pre>
<p>To this end I created the <code>AlternateCal</code> class as a parent class, which takes a few parameters as to how the weeks and months should fit together.</p>
<pre><code>&gt;&gt;&gt; print(AlternateCal(w_i_month=14, d_i_week=3, year_1=400))
The Organic Non-Repeating calendar, consisting of 3-day weeks, 14-week months, and 8-month years, with 29 epagomenal day(s).
&gt;&gt;&gt; print(AlternateCal(w_i_month=5, d_i_week=6, year_1=11000))
The Utilitarian calendar, consisting of 6-day weeks, 5-week months, and 12-month years, with 5 epagomenal day(s).
</code></pre>
<p>The <code>alternateDate</code> class is then defined within the AlternateCal’s <code>__init__</code> function. All of its own logic—for instance, which day of the year it is (very useful for doing conversions to other calendars), is performed relative to the parameters set by its parent class.</p>
<pre><code>self.day = day
self.day_of_year = (month - 1) * calendar.weeks_in_a_month * calendar.days_in_a_week + day
</code></pre>
<p>In this way we can create objects that are instances of the same <code>AlternateDate</code> class, but initialized with fundamentally different behavior.</p>
<pre><code>&gt;&gt;&gt; posical = AlternateCal(w_i_month=4, d_i_week = 7, year_1 = 1789)
&gt;&gt;&gt; badcal = AlternateCal(w_i_month=6, d_i_week = 8, year_1 = 1945)
&gt;&gt;&gt; print(posical)
The Positivist calendar, consisting of 7-day weeks, 4-week months, and 13-month years, with 1 epagomenal day(s).
&gt;&gt;&gt; print(badcal)
The Re-Corresponding calendar, consisting of 8-day weeks, 6-week months, and 7-month years, with 29 epagomenal day(s).
&gt;&gt;&gt; d1 = posical.date(200, 4, 15)
&gt;&gt;&gt; d2 = badcal.date(54, 1, 3)
&gt;&gt;&gt; d1
positivist date(200, 4, 15)
&gt;&gt;&gt; d2
re-corresponding date(54, 1, 3)
&gt;&gt;&gt; d2 - d1
datetime.timedelta(3556)
&gt;&gt;&gt; d2 + datetime.timedelta(3556)
re-corresponding date(63, 6, 32)
&gt;&gt;&gt; d1 + datetime.timedelta(3556)
positivist date(210, 1, 3)
</code></pre>
<h1>Right History’s Wrongs!</h1>
<p>I encourage you to <a href="http://github.com/subsetpark/posical">play around</a> with this library and make your own improbable calendar reforms.</p>
</content>
</entry>
<entry>
  <title>The Rodeo Clown Theory of Personal Development</title>
  <link href="https://blog.zdsmith.com/posts/the-rodeo-clown-theory-of-personal-development.html" />
  <id>https://blog.zdsmith.com/posts/the-rodeo-clown-theory-of-personal-development.html</id>
  <updated>2014-05-01T00:00:00.00Z</updated>
  <content><h2>Prelude</h2>
<p>A year ago I didn’t know what I wanted to do when I grew up.</p>
<p>I had been in the workforce since I came back to New York in 2005. I had never, blessedly, been out of a job for more than a few months, having worked as a temp, then an administrative assistant, before putting in seven years as a computer repair technician. But even within those seven years in a stable job that required at least a modicum of skill, I knew it wasn’t what I wanted to <em>do</em>, and I didn’t know what what I wanted to <em>do</em> was.</p>
<p>I had studied programming in high school, and enjoyed it. But it had fallen away and I’d formed the very sticky opinion that I simply wasn’t very good at it.</p>
<p>Periodically, as I went through my twenties, I would get inklings. There would be some spark of possibility around some interest of mine: maybe I could do this! Maybe I should study manuscripts! Maybe I should be a dharma teacher! Maybe I should become an acoustic engineer!</p>
<p>And more quotidian possibilities: maybe I should be a project manager! Maybe I should be a developer!</p>
<h2>The Rodeo Clown Theory of Personal Development</h2>
<p>It seems that there are some people in the world who, at some young point in their lives, figure out what they want to become. Then they become that thing. Want to be a doctor when you’re grown up? Better do pre-med when you’re a kid, so you can do medical school after college, so you can get a good residency. Want to be a lawyer? Start preparing for law school now. Want to be president? Win Wimbledon? Rock star? You know what to do.</p>
<p>I don’t think many of us are like that, though. This is what I’m like: first, I think, <em>maybe I could be a computer programmer!</em> Then I try to see the path between where I am now—it’s 2013, I’m 28, I fix Macs for a living, and the only programming I’ve done since 2004 has been a handful of half-completed Rails tutorials—and a future where I spend all day writing code and being paid for it. And I fail.</p>
<p>Then I give up. I don’t have the imagination, I guess, of the people who can see every step of that path from age 17. And I might even lack the faith to undertake the whole thing from my present murky position. But basically I just can’t imagine how one would go about <em>becoming</em> this new person, who understands code that I can’t read and can create things from nothing.</p>
<p>So—habitually—I decide it’s not in the cards, and quit thinking about it. Not having found any path to this destination, I conclude it’s unreachable. This strategy is suboptimal.</p>
<p>Let’s say you decide you want to be a rodeo clown. And let’s say you’re me and you have no idea how to be a rodeo clown. There’s the guy in the ring (do they call it a ring?), with the bull, but you don’t know any rodeo clowns, you don’t know any non-rodeo clowns, you don’t know any cowboys. You’ve never been to a rodeo.</p>
<p>If I ask you: how are you gonna live your life over the next 5 years so that at the end of them you’re Jocko the Magnificent, world-famous rodeo clown? You’ll say, I have no idea. But if I ask you, what can you do, today, that seems like it might point you in a rodeo clown-related direction? In other words, can you look at the possibilities currently available to you and imagine which of them might lead to an overall increase of rodeo clowndom in your life, even infinitesimally?</p>
<p>More answers might come to mind. You could google ‘Rodeo Clown’. You could find out where the nearest rodeo is and find out if you can go see a show. Not so you can wait outside for the rodeo clown to leave so he can meet you and decide he wants to make you his protege and lay out everything you need. But just because you want to raise the level of rodeo clowndom in your life.</p>
<p>Because as it turns out, there’s nearly an infinity of choices available to you in <em>this</em> moment. And you might not have the foggiest idea what it would entail to move from where you are right now to some imagined future state that you can’t actually <em>see</em>, but you <em>can</em> investigate your current surroundings and see what’s immediately available.</p>
<p>Once you do that a feedback loop begins. Whatever you chose to do, you have a few questions to answer: 1) did it increase the level of rodeo clowndom in your life, if only by a small amount? 2) how did that feel? You don’t actually know what it’s like to put on the ol’ barrel and greasepaint and get chased with a bull for a couple hours on a Saturday night. So part of this process is investigation: what qualities resonate with you? What’s it actually like? What changes to the picture in your head are implied by the experiences you’re having? And finally, if there were moments that gave you a charge, that satisfied you, that felt right—what, in your new circumstances, has revealed itself for you to explore?</p>
<p>One visit to the rodeo does not a clown make. But once you’re there, other points of contact emerge. You make a few friends, you see a few flyers. You notice things that excite you and get you thinking, and you see some things that gross you out. None of these is the self-contained Way To Rodeo Clowning. But the next day, your nearly infinite array of choices contains more obviously rodeo-clown related paths than before.</p>
<p>This is hard to do. It’s hard to repeatedly choose to do rather than to not do. To try something new without knowing exactly what it will be or where it will lead. Dissatisfaction and doubt have their own comforts. And there’s always the familiar—which, however it sits with you, at least doesn’t take any movement at all to arrive at. And then there’s the constant inquiry that the rodeo clown path of self-development requires: constant interrogation and introspection, the ability to ask yourself how things feel, to take negative experience as guidance rather than the massive monolithic roadblock it feels like.</p>
<p>If you’re like me—and like most people, I suspect—the full path never unfolds itself at your feet. You never go to bed knowing exactly what you need to do in the next day, the next week, the next year, and the next decade to be exactly the sort of person you’ve decided you’d like to be. If you’re like me you might never even really feel like you can make that decision. But you keep paying attention, keep engaging with all the little opportunities that <em>are</em> right in front of you, and day by day, something that you couldn’t have foreseen unfolds all the same.</p>
<h2>Coda</h2>
<p>Today is the last day of Hacker School. Over the last three months I have found myself, miraculously, in a community of practice of nearly utopian proportions; roughly 70 people educating each other in the craft of computer programming in the belly of New York City.</p>
<p>A year ago I didn’t know what I wanted to do when I grew up. Today I have at least a couple ideas. I’d like to write computer programs! What kind of programs? And where? Do I want to write frontend or backend? Who will give me the best job? Where should I be applying?</p>
<p>Who do I want to be when I grow up and what path should I pick to become him? The response is mostly static. But somehow, not very much through my own ingenuity, I have begun to fill my life with things I love to do, and among the people I have met there are collaborators, colleagues and teachers I couldn’t possibly know about yet. Our futures are unknowable. We put one foot in front of the other.</p>
<p>Never graduate,</p>
</content>
</entry>
<entry>
  <title>Git Patch Mode and Working With Git in Python</title>
  <link href="https://blog.zdsmith.com/posts/git-patch-mode-and-working-with-git-in-python.html" />
  <id>https://blog.zdsmith.com/posts/git-patch-mode-and-working-with-git-in-python.html</id>
  <updated>2014-04-08T00:00:00.00Z</updated>
  <content><p>Today I deployed <a href="https://sublime.wbond.net/packages/gitp">gitp</a>, my first <a href="http://www.sublimetext.com/3">Sublime Text</a> plugin.</p>
<h2>Git</h2>
<p>Let’s start with <a href="http://git-scm.com/">git</a>. This very popular version control system, beloved by many, backbone of <a href="http://github.com">Github</a>, and de facto standard at <a href="http://hackerschool.com">Hacker School</a>, can do a lot of marvelous things—and one of my favorites is <a href="http://nuclearsquid.com/writings/git-add/"><em>patch mode</em></a>. Patch mode lets you stage individual portions of your working text for commit, rather than an entire file. I’ll explain what I mean:</p>
<p>Ordinarily, your git workflow might look like this:</p>
<pre><code class="language-bash"># *edit a text file for a while*
git add .
git commit -m&quot;Here are the three changes I've made to this file since my last commit&quot;
</code></pre>
<p>In this way you keep a record of all the revisions you’ve made to your file. If you want to understand how your file changed over time, you can read the commit messages in chronological order. If you ever break something and need to get back, you can revert to a previous version.</p>
<h3>Patch Mode</h3>
<p>This is good; however, git can do even better without a lot of difficulty. Using git’s <em>interactive staging</em> you can commit only <em>some</em> of the changes you’ve made to your documents at any given point. So let’s say in the last hour you made three major changes (added 1 new feature, fixed 1 major bug, added some documentation) to your work, consisting of three files, changed in three places each. Now you’ve got things the way you like them and you want to commit your work and save a revision. With <code>git add -i</code> or <code>git add -p</code> (or <code>--patch</code>), you can separate each of those three changes into their own commit. Now your workflow looks like this:</p>
<pre><code class="language-bash"># *edit a text file for a while*
git add -p
# *stage the changes having to do with your new feature*
git commit -m&quot;Added this feature&quot;
git add -p
# *stage the changes having to do with your bugfix*
git commit -m&quot;Fixed this bug&quot;
</code></pre>
<p>And so on. Now when you look back on your changelog for this project, each revision is laid out along <em>functional</em> or <em>logical</em> lines, as opposed to chronological.</p>
<h3>Patch Mode For All</h3>
<p>As a some-time, unproductive writer of prose and poetry as well as code, I have always been interested in the potential for version control systems as applied to natural language text—not just code. Poetry has always struck me as particularly well-suited for version control, since it’s organized by line, and not by paragraph. I’m not the only one interested in this sort of thing: <a href="http://penflip.com">Penflip</a> is one project that can be summed up as “Github for text”.</p>
<p>So imagine: you write a sonnet. In a fit of inspiration, you dash out a few lines:</p>
<blockquote>
<p>They that have power to hurt and will do none,<br />
That do not do the thing they most do show,<br />
Who, moving others, are themselves as stone,<br />
Unmoved, cold, and to temptation slow,<br />
They rightly do inherit heaven’s graces<br />
And husband nature’s riches from expense;<br />
They are the lords and owners of their faces,<br />
Others but stewards of their excellence.<br />
The summer’s flower is to the summer sweett,<br />
Though to itself it only live and die,<br />
But if that flower with bass infection meet,<br />
The basest weed outbraves his dignity:<br />
For sweatest things turn sourest by their deeds;<br />
Lilies that fester smell far worse than weeeds.</p>
</blockquote>
<p>Not bad for a first draft. As with any other git project, you save it in the directory with your git repo (let’s call it S94.md), add it to the repo, and commit.</p>
<p>The next morning you look over your handiwork. In your haste it appears you made a couple spelling errors. You ought to clean that up. And what’s with that first line? You’ve got to <em>grab</em> the reader! This is better:</p>
<blockquote>
<p>Check it! If you have power to hurt and don’t,<br />
That do not do the thing they most do show,<br />
Who, moving others, are themselves as stone,<br />
Unmoved, cold, and to temptation slow,<br />
They rightly do inherit heaven’s graces<br />
And husband nature’s riches from expense;<br />
They are the lords and owners of their faces,<br />
Others but stewards of their excellence.<br />
The summer’s flower is to the summer sweet,<br />
Though to itself it only live and die,<br />
But if that flower with base infection meet,<br />
The basest weed outbraves his dignity:<br />
For sweetest things turn sourest by their deeds;<br />
Lilies that fester smell far worse than weeds.</p>
</blockquote>
<p>Pleased with your second draft, you stage your file and commit with the message “Cleaned spelling, punched up intro”.</p>
<p>This is not great. “Check it”? What is this, <em>Yo! MTV Raps?</em> You think better of that first line; better revert. Unfortunately the only commit you have to revert to is riddled with spelling errors.</p>
<p>This is why <code>add -p</code> is so powerful. You can separate your commits out into different actions. Here’s what you could have done with git patch mode to create commits that reflect the discrete actions you took, instead of just tracking the document over time.</p>
<pre><code class="language-diff">➜  sonnets git:(master) ✗ git add -p
diff --git a/S94.md b/S94.md
index e3fa036..2a7e029 100644
--- a/S94.md
+++ b/S94.md
@@ -1,4 +1,4 @@
-They that have power to hurt and will do none,
+Check it! If you have power to hurt and don't,
 That do not do the thing they most do show,
 Who, moving others, are themselves as stone,
 Unmoved, cold, and to temptation slow,
Stage this hunk [y,n,q,a,d,/,j,J,g,e,?]? y

@@ -6,9 +6,9 @@ They rightly do inherit heaven’s graces
 And husband nature’s riches from expense;
 They are the lords and owners of their faces,
 Others but stewards of their excellence.
-The summer’s flower is to the summer sweett,
+The summer’s flower is to the summer sweet,
 Though to itself it only live and die,
-But if that flower with bass infection meet,
+But if that flower with base infection meet,
 The basest weed outbraves his dignity:
-   For sweatest things turn sourest by their deeds;
-   Lilies that fester smell far worse than weeeds.
\ No newline at end of file
+   For sweetest things turn sourest by their deeds;
+   Lilies that fester smell far worse than weeds.
\ No newline at end of file
Stage this hunk [y,n,q,a,d,/,s,e,?]? n

➜  sonnets git:(master) ✗ git commit -m&quot;Punched up intro&quot;

➜  sonnets git:(master) ✗ git add -p
diff --git a/S94.md b/S94.md
index 92f054a..2a7e029 100644
--- a/S94.md
+++ b/S94.md
@@ -6,9 +6,9 @@ They rightly do inherit heaven’s graces
 And husband nature’s riches from expense;
 They are the lords and owners of their faces,
 Others but stewards of their excellence.
-The summer’s flower is to the summer sweett,
+The summer’s flower is to the summer sweet,
 Though to itself it only live and die,
-But if that flower with bass infection meet,
+But if that flower with base infection meet,
 The basest weed outbraves his dignity:
-   For sweatest things turn sourest by their deeds;
-   Lilies that fester smell far worse than weeeds.
\ No newline at end of file
+   For sweetest things turn sourest by their deeds;
+   Lilies that fester smell far worse than weeds.
\ No newline at end of file
Stage this hunk [y,n,q,a,d,/,s,e,?]? y

➜  sonnets git:(master) ✗ git commit -m&quot;Fixed awful spelling&quot;
</code></pre>
<p>What we see here is a series of two patch mode sessions. In the first session I staged only one of my two changes: the intro punch-up. I then committed just that change. Then I ran patch mode again and staged and committed the second ‘hunk’—the various spelling fixes.</p>
<p>Now my commit log looks like this:</p>
<pre><code class="language-bash">9519acd - (HEAD, master) Fixed awful spelling (6 minutes ago)
c440dd9 - Punched up intro (6 minutes ago)
9f595c8 - Initial commit (6 minutes ago)
</code></pre>
<p>And once I decide that it would be better if I didn’t meddle so thoroughly with the words of the bard, I can rebase that middle commit out, leaving the work that I wanted to keep.</p>
<pre><code class="language-bash">2c5f971 - (HEAD, master) Fixed awful spelling (5 seconds ago)
9f595c8 - Initial commit (8 minutes ago)
</code></pre>
<p>The order I did it in is not as important as the fact that they’re discrete changes within the text. Literature is saved.</p>
<h2>gitp</h2>
<p>I’m a big fan of git and git patch mode. So I wanted to see if I could create a frontend to patch mode (synonymous with <code>add -p</code>) that would make it slightly more accessible. I use the <a href="https://sublimegit.net/">SublimeGit</a> plugin for Sublime Text, and I love being able to access git from the text editor, but I wanted to be able to stage individual hunks as well.</p>
<p>So I made my own plugin, called <a href="https://sublime.wbond.net/packages/gitp">gitp</a>. It’s available for install right now through the nearly-ubiquitous <a href="https://sublime.wbond.net/">Package Control</a>.</p>
<h3>What it Does</h3>
<p>With <code>gitp</code> you can stage individual changes for commit, from your editor.</p>
<h4>Displaying Hunks</h4>
<p>First, all changed areas of your file are indicated with numbered icons in the gutter.</p>
<p><img src="../images/hunks.png" alt="Active Hunks Screenshot" /></p>
<p>If you’d like to stage a hunk, you can run either of two different commands:</p>
<h5>Choose Hunks</h5>
<p>Sublime Text will ask you to enter the hunks you’d like to stage.</p>
<p><img src="../images/choose.png" alt="Choose Hunks" /></p>
<h5>Stage These Hunks</h5>
<p>Any hunks that are currently under the cursor will be staged. This supports multiple cursors!</p>
<p>Once a hunk is staged it gets a dot next to it.</p>
<p><img src="../images/staged.png" alt="Staged Hunk" /></p>
<h4>Committing Hunks</h4>
<p>You can then run the Commit Staged Changes command. Sublime Text will ask you for your commit message and commit your changes.</p>
<h4>Hunk Management</h4>
<p>There are a few other commands that are useful in this line of work:</p>
<h5>View Hunks</h5>
<p>You can view the individual diff results for any change(s) in your project.</p>
<p><img src="../images/view.png" alt="View Hunks" /></p>
<h5>Unstage Hunks</h5>
<p>You can unstage all your changes and restage as you like.</p>
<h3>How I Did It</h3>
<p>For those interested in following along at home, the source to <code>gitp</code> is available on <a href="https://github.com/subsetpark">my Github page</a>.</p>
<p>Sublime Text 3 provides a pretty sophisticated plugin <a href="http://www.sublimetext.com/docs/3/api_reference.html">API</a>, written in Python 3. In this framework, each command is a class that inherits from a certain command type. So in gitp each of the major commands is a class that inherits from <code>sublime_plugin.TextCommand</code>: <code>ViewHunksCommand</code>, <code>CommitStagedChangesCommand</code>, and so on. In addition there’s one other major class that’s not exposed as a user command: <code>DisplayHunksCommand</code>, which is responsible for updating the gutter icons, and is run as the final step of certain functions, as well as run by the <code>HunkListener</code> class, which defines methods in order to listen to certain events: <code>on_load</code>, <code>on_post_save</code>, <code>on_activated</code>.</p>
<h4>Working With Git</h4>
<p>The bulk of <code>gitp</code> is, of course, the interaction with the git repository of the currently working file. So my first question was about how best to interact with git objects.</p>
<h5>The State of Git in Python</h5>
<p>There are several available hooks into git for Python developers, which I will briefly touch on.</p>
<p><a href="http://www.samba.org/~jelmer/dulwich/">Dulwich</a> and <a href="https://gitorious.org/git-python">GitPython</a> are two pure-Python libraries for interacting with git. The latter, in particular, has very rich documenation and fully-formed tutorial. The former isn’t too shabby either. Unfortunately, both of them are Python 2-only<sup class="footnote-ref"><a href="#fn1" id="fnref1">1</a></sup>. And not only is 3 my preferred version of the language, but Sublime Text 3 is necessarily Python 3. So those were both off the table for this project. Which left <a href="http://www.pygit2.org/">pygit2</a>, the official Python bindings to the libgit2 shared library. Pygit2 is actively developed and evidently quite powerful—and unfortunately the documentation is severely lacking. I struggled badly with simply understanding the interface that pygit2 provides to git repositories. Diffs, for instance, where I’d be spending most of my time (as add -p is all about hunks, and hunks are a subset of diffs), have a light <a href="http://www.pygit2.org/diff.html">scaffolding</a> of documentation which grows progressively thinner as you scroll down, its promising spring green tutorial boxes giving way to terse single-clause descriptors of attributes to completely undescribed classes. Leading the reader more or less at a loss as to what the actual relationship could be betwwen a Diff, a Patch, and a Hunk<sup class="footnote-ref"><a href="#fn2" id="fnref2">2</a></sup>. There are upsides; Stack Overflow has been very responsive in trying to puzzle things out with pygit2. But unfortunately there isn’t enough there to recommend (for my purposes) pygit2 over simply shelling out.</p>
<p>Because the git command line client, after all, is astoundingly powerful and deeply composable. By design, nearly any discrete ‘action’ within a git repository can be expressed as a single command with the appropriate flags, and those more complex actions can be expressed as a series of commands without anything being lost in the middle.</p>
<p>So I settled on calling to the command line <code>git</code> with Python’s <code>subprocess</code> module. Ultimately there are only a few commands that I needed to use.</p>
<ul>
<li>check if a folder is a git repository: <code>git rev-parse</code></li>
<li>get a diff: <code>git diff</code>, <code>--cached</code> to diff with the index, <code>--unified=1</code> for prose<sup class="footnote-ref"><a href="#fn3" id="fnref3">3</a></sup></li>
<li>stage a file: <code>git add</code></li>
<li>stage changes: <code>git apply --cached --recount --allow-overlap</code>. This is the same command that git’s own patch mode script runs, which I am grateful to <a href="http://web.mit.edu/price/">Greg Price</a> to pointing out to me.</li>
<li>unstage changes: <code>git reset HEAD</code></li>
<li>commit changes and wait for message: <code>git commit --file=-</code></li>
</ul>
<h6>Crunching the Diff</h6>
<p>The first major misconception that I had to be disabused of was how git actually stages its hunks in interactive staging mode. The trick is, it doesn’t. It doesn’t stage <em>hunks</em>, “stage this hunk?” notwithstanding. This is the case in pygit2 as well: the act of staging, as seen in the last section, is an <code>apply</code> action. Git applies a diff to the most recently committed copy of a file and saves the resulting new file in the index. Which means that if you don’t want to stage an <em>entire</em> file (which is the point of our project), you are first responsible for coming up with a version of the entire file that you do want to stage.</p>
<p>So this is the meat of the plugin, which takes place in the <code>stage_hunks</code> function. I generate a diff that contains all of the changes between the working copy of the file and the most recent commit. I then create a <em>new</em> diff out of just the hunks that the user has selected, while carrying over file metadata and newlines and the like. Then I apply that diff. At this point there are three instances of the file in question: the one in the HEAD tree, which has none of the most recent set of changes, the one in the working directory, which has all the changes made since commit, and the one in the index that only has the changes the user has selected.</p>
<h4>And Finally…</h4>
<p>Really, the rest of the effort expended in this plugin consisted of understanding how to use the Sublime Text API to do what I wanted it to do. I hope that I have not overlooked any major design patterns commonly adhered to by other Sublime Text plugins.</p>
<p>I have been actively using this plugin myself since it was even barely usable and found it rewarding—rewarding because the plugin has been useful to me, rewarding to be using something that I myself have made, and rewarding that both of those are true of the same project. I hope that it will prove to be useful to others. I have every intention of smoothing off all the rough edges that I can figure out how to smooth, and working to make it a fully-fledged and productive member of the Sublime Text ecosystem. If you would like to use this plugin or provide any feedback, <a href="https://sublime.wbond.net/packages/gitp">please feel free!</a></p>
<section class="footnotes">
<ol>
<li id="fn1">
<p>At least they were when I started this project, a few weeks ago. I’ll be honest—I had thought dulwich was not really being developed any more; but in fact I see that the most recent commit to <a href="https://github.com/jelmer/dulwich">dulwich’s github page</a> is “Merge branch ‘python3’ of git://github.com/garyvdm/dulwich” which gives some hope for the future. <a href="#fnref1" class="footnote-backref">↩</a></p>
</li>
<li id="fn2">
<p>I puzzled it out and I will tell you. This is how diffs, patches, and hunks work in pygit2:</p>
<p>repo objects have a diff method that produce diff objects. The Diff class basically represents the entire relationship of changes between one tree and another (a tree is essentially a certain snapshot of a filesystem). So you can get a diff between the working tree and the index, the working tree and the most recent commit, or two different commits.</p>
<p><code>[p for p in diff]</code> produces a list of <em>Patches</em>. This is where the documentation falls silent. It’s especially confusing because Diff objects also have a <code>patch</code> attribute. Here’s what these mean: the <code>patch</code> attribute of a Diff is a (diff-formatted—this is also why it’s confusing) string representing all of the differences between the two trees. A Patch object, on the other hand, represents the relationship of changes between two blobs (that’s file-like objects to you and me). Finally, <code>[h for h in patch]</code> produces a list of <em>Hunks</em>. Hunk objects represent individual changes <em>within</em> a file. They are Python objects to represent the sections in a diff file that are denoted by ‘@@’.</p>
<p>Confusingly, while diff objects have patch attributes that return strings of tree-to-tree deltas, patch objects do not have attributes that return strings of blob-to-blob deltas (nor would you want to call these attributes <code>hunk</code>), and hunk objects do not have attributes that return strings of the hunks they represent. They return lists of their lines along with metadata indicating what kind of lines they are, but not the hunk strings themselves. <a href="#fnref2" class="footnote-backref">↩</a></p>
</li>
<li id="fn3">
<p>My sonnet example above is a bit of a cheat. You’ll notice that there is a considerable gap between the hunk that I wanted to revert and the spelling errors. That’s because git classifies a hunk as changed text with unchanged context on either side, and by default the context line number is 3. So to be seen as separate hunks changes need to be at least six lines apart. This is fine in code but harder to accomplish in prose; so the default diffing algorithm will likely group changes together that you’d rather ungrouped. In gitp I’ve accounted for this by checking to see if the active buffer is prose or code, and adjusting the diff output accordingly. <a href="#fnref3" class="footnote-backref">↩</a></p>
</li>
</ol>
</section>
</content>
</entry>
<entry>
  <title>Mitaines</title>
  <link href="https://blog.zdsmith.com/posts/mitaines.html" />
  <id>https://blog.zdsmith.com/posts/mitaines.html</id>
  <updated>2014-04-06T00:00:00.00Z</updated>
  <content><p>In French Canada, according to <a href="http://pagat.com">Pagat.com</a>, there’s a game called <a href="http://www.pagat.com/fishing/mitaines.html"><em>Mitaines</em></a>, which means “Mittens” in French. I’m not sure when I first heard about this game, but it stuck with me. I couldn’t fathom, judging from the rules, how it was played, but I knew that the game consisted of building combinations that were called <em>mittens</em>, <em>gloves</em>, and <em>socks</em>. This struck me as adorable and odd. I couldn’t find any other information about it; if you google “Mitaines card game”, the only results aside from Pagat are pages that seem to derive entirely from Pagat, and earlier works by me, including the <a href="https://thoughtstreams.io/zdsmith/mitaines/">stream</a> on <a href="http://thoughtstreams.io">Thoughtstreams.io</a> that this article is based on. But Pagat is pretty authoritative so I persist in believing that this game exists.</p>
<p>I don’t know when I first found out about Mitaines, but I first <a href="http://www.lastplanetojakarta.com/forums/index.php?topic=9929.85">mentioned it</a> on the internet in February 2009. It next comes up for me in August of 2010, but only to say that I had forgotten about it. It wasn’t until late 2012 that I actually went to the trouble of learning how to play the game.</p>
<h2>How You Play</h2>
<p>I’ll try to establish a basic account of how we play the game. The ‘we’ is important here: I have never been taught this game by a French Canadian, who might have learned it from other French Canadians. I have never played this game with a French Canadian. I barely know any French Canadians. I have indeed never met anybody who has heard of Mitaines before. In other words, I have no acquaintance with anything you could call ‘authentic’ Mitaines.</p>
<p>But this is how it works: each player takes turns playing to a central pile. This pile itself is not particularly important. You can clear it by playing either a Jack or whatever card is currently on top, but clearing it does almost nothing, most of the time<sup class="footnote-ref"><a href="#fn1" id="fnref1">1</a></sup>. There are two things it does:</p>
<ol>
<li>If the ♦10 is in that pile, you score points.</li>
<li>It forces whoever comes after you to play to an empty table.</li>
</ol>
<p>I don’t want to poo-poo the ♦10; it’s worth 50 points and 50 points is nothing to sneeze at. Nevertheless, I’m used to playing Fishing games (which is what Pagat classifies this as) where the things played to the middle are the things being contested. In this case the pile in the middle is more like the rubbish heap on top of which something of potential interest is sitting.</p>
<p>The meat of the game is in the aforementioned mittens, socks and gloves. These are pairs, threes of a kind, and fours of a kind, in Poker terminology. And they’re captured (in this case the game is very much like other Fishing games—<a href="http://www.pagat.com/fishing/scopone.html">Scopa</a> comes to mind—where a valuable card or cards in your hand are of no use if you can’t safely capture them, which usually requires at least briefly exposing them to danger before they can be whisked off the board) by announcing them and then playing them, one card per turn, for as many turns as it takes to play them all.</p>
<p>Since it’s pretty unusual to draw a lot of threes and fours into a single hand, the game provides a lot of opportunities for you to piggyback off of other players’ cards, often coopting their own combinations in the process. I might start to play a mitten, but you can interrupt me if you’ve got something higher, and I can interrupt you back, each time folding the original calls into the current call, even if the cards themselves don’t end up getting played. So you’re not exactly playing combinations, or not just playing combinations, but really creating successively grander structures that are uneasily superpositioned until somebody finally completes a combination play and scores for everything that had been called before.</p>
<p>Anyway, as I said in my Thoughtstreams post, I worked it out from the printed rules with a friend, and we played through a few hands to get a feel for the mechanics. I liked it but, at least with two players, it was a bit uneventful.</p>
<h2>Why It’s a Little Boring</h2>
<p>The issue, by our reckoning, is with the distribution of combinations. With six-card hands and a full 52-card deck, mitten draws (that’s a pair) are quite common, and glove and sock draws are incredibly rare. Of course, you want pairs to more more common than trips and fours, and you’ll expect to build some higher combinations off of others—but in its standard (?) state, Mitaines seems almost entirely to be a game of pairs.</p>
<h2>What I Did About It</h2>
<p>The Thoughtstream I was keeping, linked above, goes into more detail about my process in working with Mitaines. I’ll present an overview here.</p>
<p>My first step was to model the likelihood of drawing the various scoring combinations in the game using binomial coefficients and combinatorics. To this end I used the OS X application <a href="http://www.acqualia.com/soulver/">Soulver</a>, which acts like a live calculator and is quite easy to use.</p>
<!-- raw HTML omitted -->
<p>The <strong>Event Ratios</strong> section expresses the likelihood of any given draw as a ratio of the rarest (ordinary) draw, socks: four of a kind. As we can see, one is 861 times more likely to draw a pair than to draw four of a kind when playing with six cards and a 52-card deck. Which is fine for poker, but one would like to see them a bit more often in this game of playing to the middle.</p>
<p>Here’s what happens if we adjust the hand size upward, to eight cards, and strip out four ranks from the deck, leaving a 36-card deck, with 32 cards to be played in two deals after a four-card initial flop.</p>
<!-- raw HTML omitted -->
<p>We see that mittens are now 110 times more likely than socks, not 861. The ratios have not been artifically rebalanced, and it’s still no sure thing that a player can draw one of the 12 groups of four cards that get you a sock (Jacks are a special category), but it’s in the realm of possibility.</p>
<p>Especially because much of the play around gloves and socks happens with multiple players building a glove off of someone else’s mitten, or a sock off of someone else’s glove. When each player has a bigger pool to work from, the opportunities for exciting combinations increase.</p>
<h2>Scoring Adjustments</h2>
<p>The current scoring schedule doesn’t fully jibe with the likelihood of various combinations. As we can see on the Pagat page, a sock, when captured, is worth exactly 20 times a mitten—neither 861 nor indeed 110 times. It’s understandable that it shouldn’t be worth quite as much, as there are more ways to score a sock than there are to draw one. Nevertheless there’s the feeling that things could be in better proportion.</p>
<p>As can be seen from my Thoughtstreams stream and the calculations I was doing, I also considered adopting an adjusted scoring schedule based on the adjusted ratios for combinations. This endeavor, unfortunately, didn’t go as well. I’m not convinced it’s an unworthy one but simply fixing points on a ratio sequence makes the game much more difficult to score, and doesn’t seem to be particularly worth it.</p>
<p>This is especially true when we consider that one <em>should</em> take building combinations into account when designing a scoring schedule; while we can trust that we can only consider the odds of a particular draw when designing hand size, we really must consider the odds of actually capturing that combination—that is, when drawn or built from someone else—when scoring. The strategic effectiveness is also part of a larger combination’s worth; while a combination is being played out, if it can’t be beaten, the other players are forced to discard potentially valuable cards. For now, I’ve found that the existing schedule works sufficiently well when playing with the adjusted hand sizes.</p>
<p>It might be fun, at some point, to come up with an AI that’s smart enough at Mitaines that one could run some Monte Carlo simulations and come up with hard data on the relationship between combinations drawn and combinations scored for. Then you could come up with a real scoring schedule.</p>
<section class="footnotes">
<ol>
<li id="fn1">
<p>The exception here is the very first pile of the game, which includes a four-card flop; any valuable combinations that appear in that flop go to whoever clears the first pile of the game. <a href="#fnref1" class="footnote-backref">↩</a></p>
</li>
</ol>
</section>
</content>
</entry>
<entry>
  <title>Designing Tie Knots by Random Walks</title>
  <link href="https://blog.zdsmith.com/posts/designing-tie-knots-by-random-walks.html" />
  <id>https://blog.zdsmith.com/posts/designing-tie-knots-by-random-walks.html</id>
  <updated>2014-03-25T00:00:00.00Z</updated>
  <content><p>I’m a fan of <a href="http://en.wikipedia.org/wiki/The_85_Ways_to_Tie_a_Tie">85 Ways to Tie a Tie</a>, by Thomas Fink and Young Mao. It’s an exploration of a mathematical model for necktie knots. I’ll let them <a href="http://www.tcm.phy.cam.ac.uk/~tmf20/TIES/PAPERS/paper_nature.pdf">explain</a>:</p>
<blockquote>
<p>We have developed a mathematical model of tie knots, and provide a map between tie knots and persistent random walks on a triangular lattice.</p>
</blockquote>
<p>What this means for the likes of me is that they a) articulated, essentially, the full array of knots it’s possible to tie with a necktie, and b) provided an unambiguous notation for their tying. Thus as additions to the traditional <a href="http://www.tie-a-tie.net/windsor.html">Windsor</a>, <a href="http://www.tie-a-tie.net/fourinhand.html">Four-in-Hand</a>, <a href="http://www.tie-a-tie.net/pratt.html">Pratt</a>, etc. (all also notatable in the <em>85 Ways</em> system), they furnished knots like the <a href="http://www.tcm.phy.cam.ac.uk/~tmf20/tieknots.shtml">Plattsburgh and Cavendish</a>.</p>
<p>The Plattsburgh, for instance, can be notated thus:</p>
<blockquote>
<p>Lo Ci Ro Ci Lo Ri Co T</p>
</blockquote>
<p>I would read that: <em>Left out, Center in, Center in, Left out, Right in, Center Out, Through,</em> where Left/Right/Center is the direction of the turn, and in/out is the orientation of the tie blade. Fink &amp; Mao go on to analyze the aesthetic properties of knots according to certain metrics, like symmetry and balance. So we can demonstrate, for instance, that the Plattsburgh has a symmetry of 0 (quite good), and a balance of 1 (also quite good), and it will have a very broad shape.</p>
<p>I decided I’d like to explore this concept with a Python library. Ultimately it might be fun to make a full-fledged web app but in any case, with a project like this, it seemed prudent to focus on coming up with an effective representation of the knot as a data structure.</p>
<h2>Implementation</h2>
<p>My first intuition was to represent the set of all possible knot sequences as a simple binary tree. When tying the tie, you have two initial choices: Left in or Left out. After that, and after every other step, you can go in whichever of the three directions you haven’t just gone in, and the orientation flips with each generation. So <em>Li</em> has <em>Co</em> and <em>Ro</em> for children, <em>Co</em> has <em>Li</em> and <em>Ri</em>, <em>Ro</em> has <em>Li</em> and <em>Ci</em>. Thus under ordinary circumstances, if a turn is a single node on the tree, the tying of a tie can be represented as two mirrored binary trees, with <em>Li</em> and <em>Lo</em> as their two roots.</p>
<p>In theory this was simple enough. But when I actually drew out the trees they were not nearly as regular as I expected. Maintaining a consistent ordering, where children are numbered from left to right (so it would be L -&gt; C R; C -&gt; L R; R -&gt; L C), one quickly finds it hard to draw any generalizations about the behavior of the tree, and hard to discern any patterns when traversing it.</p>
<p>I asked <a href="https://github.com/happy4crazy">Alan</a> for a little guidance on how to better understand the graph of possible routes in my knot, and it was his suggestion that got me set on the right path: ‘deterministic’ trees, where the children of any node can be determined without bothering with the shape of the graph, are perhaps best considered as state machines rather than graphs. So each node can basically report on its children based on its own state.</p>
<p>This model works very well for the necktie knots: you can easily say, given the direction and orientation of any individual turn: <em>to find the next possible steps in our path, choose from the other directions and other orientation</em> and you have your choices. In other words, ‘flip the bit’ of the current node. Using Python’s built-in set datatypes you get a simple and fairly elegant way to do XOR operations on node attributes.</p>
<pre><code>def flip(value):
    # 'Flip the bit' of the provided value, providing its alternate(s)
    if value in DIRECTIONS:
        return list(DIRECTIONS - set([value]))
    elif value in BITS:
        return (BITS - set([value])).pop()
    else:
        return value
</code></pre>
<p>So then it makes sense for individual nodes (turns in our necktie knot) to be the active class in this model. A Node object has a direction and an orientation, and using this information and the above helper function, it’s able to report on its children—the possible next steps in the tie.</p>
<pre><code>&gt;&gt;&gt; n = Node(&quot;Li&quot;)
&gt;&gt;&gt; n.get_children()
{'Co', 'Ro'}
</code></pre>
<h3>The Walk</h3>
<p>The next step is to actually tie the tie. Using this model a recursive function makes sense; the nodes don’t care where they are in the tie so we can do the same operation in any place.</p>
<pre><code>def random_walk(walk=[]):
    if not walk:
        return random_walk([starter()])
    elif walk[-1] == Node('Ti') and tiable(walk):
        return walk
    elif walk[-1] == Node('Ti') and not tiable(walk):
        return random_walk(walk[:-4])
    elif len(walk) &gt; 9:
        return random_walk(walk[:-4])
    else:
        walk.append(random.choice(walk[-1].get_children()))
        return random_walk(walk)
</code></pre>
<p>Here we recursively walk through the tie, which is just a list of nodes. If it doesn’t exist, we start one, and if it’s done (all knots end with ‘Co Ti’; ‘Ti’ is added as a possible child for ‘Co’ nodes) we return it. And if it’s somewhere in the middle we make a random choice of the node’s children and take it on the end<sup class="footnote-ref"><a href="#fn1" id="fnref1">1</a></sup>.</p>
<p>This works, and it seems relatively elegant to me. But you can get a into a lot of trouble with the middle two cases.</p>
<p>See, here’s the thing: in one sense, when constructing these paths you don’t need to know anything about where you are in the path to know what your potential children are. On the other hand, for something to function recognizably as a necktie, the path needs to obey certain added constraints on top of always being able to find a child node. Fink &amp; Mao, when coming up with the set of all possible neckties, came up with two necessary constraints.</p>
<ol>
<li>Length. No knot can be more than ten steps long, including the final ‘through’ step. This is simply because after ten steps, you’re quite likely to run out of tie.</li>
<li>Tiability. To avoid looking like something that was tied in the dark, while blackout drunk, all ties must end with one of the two sequences <em>Lo Ri Co Ti</em> or <em>Ro Li Co TI</em>. I invite the reader to demonstrate this fact for themselves by attempting to tie and wear the following knot: <em>Lo Ri Lo Ci Ro Li <strong>Co Ri</strong> Co Ti</em>.</li>
</ol>
<p>In other words, a knot might be <em>syntactically</em> correct (the above example can be physically tied, and obeys the notational rules) while being <em>semantically</em> gibberish. And we want to restrict ourselves to the set of knots that obey both constraints—of which there are exactly 85.</p>
<p>This is where inefficiency enters our recursive approach in a major way. In the above (simplified) code, if we end up with a knot that has grown to exceed our twin maxims of <em>brevity</em> and <em>quality</em> (to play <a href="http://www.sas.upenn.edu/~haroldfs/dravling/grice.html">Grice</a> for a second), we have to basically rewind and try again. This gets us there eventually but there’s a lot of wasted cycles.</p>
<p>So I did implement that recursive approach, and I did implement a couple optimizations that allow us to throw out fewer knots along the way. But after some encouragement from <a href="https://github.com/thomasballinger">Tom</a> I decided I’d like to also implement an approach that never made a ‘wrong move’ in its random tie-building.</p>
<h2>Syntax/Semantics, or Rules/Moves</h2>
<p>What I came up with is a function that runs alongside the get_children() function and reports the legal moves given the state of the path at that time, irrespective of the active node. One that, in other words, encodes the ‘rules of play’—the constraints that a knot must fulfill in order to be included in our set of 85, regardless of how we’re getting there.</p>
<pre><code>def legal_moves(self):
    legal_moves = set([])
    if self.penultimate():
        legal_moves.add('Co')
    elif self.antepenultimate() and not self.finishable():
        legal_moves.update(['Li', 'Ri'])
        if self.two_away():
            legal_moves.add('Co')
    elif self.preantepenultimate() and not self.finishable():
        legal_moves.update(['Ro', 'Lo'])
        if self.two_away():
            legal_moves.add('Co')
    elif self.mid_knot():
        legal_moves.update(['Ri', 'Ro', 'Li', 'Lo', 'Ci', 'Co'])
    if self.finishable():
        legal_moves.add('Ti')
    return legal_moves
</code></pre>
<p>This function has no particular interest in the moves available to the most recent node in the walk. It generates a set of potential next states based entirely on, if you will, the position of the board. It’s hard not to lapse into gaming metaphors here, though the linguistic one above also seems apt.</p>
<pre><code>def legal_intersection(self):
    return list(self.get_children() &amp; self.legal_moves())
</code></pre>
<p>In either case the mechanism is one of intersecting the ‘powers’ of an actor—this piece moves in a line, or jumps by two, but can’t go diagonal; this word can come after the following part of speech—with an overall constraint based on the total structure over time, or on relations between that actor and other pieces on the board: the king cannot put himself into check, or “the red dog climbs the stairs” is not admissable if we haven’t heard from any red dog thus far.</p>
<pre><code>&gt;&gt;&gt; k = Knot(&quot;Li Co Ri&quot;)
&gt;&gt;&gt; k.legal_intersection()
['Lo', 'Co']
&gt;&gt;&gt; l = Knot(&quot;Li Co Ri Co Li Ro&quot;)
&gt;&gt;&gt; l.legal_intersection()
['Li']
</code></pre>
<p>So here we have a knot <em>k</em>: earlier in the ‘game’, the available moves are the total set of moves that the active piece is capable of making. In the next case we see a possible development of <em>k</em>. We are now in the countdown to the end of play, and thus our moves are constrained. We only have one choice available that’s the only move that will result in a successful knot at the end.</p>
<h2>Next Steps</h2>
<p>So there we have just about all there is to say about this particular project. I’m very interested in this rules/moves or syntax/semantics intersection model, though, and I’d like to build on it. I’d especially like to find a more elegant and extensible way to structure the <code>legal_moves</code> function, which right now is just a series of conditional statements. It’s clear that there’s a way to generalize the state of play, such that you could make a series of informed conclusions without having to manually write a bunch of tests. And it’s also clear that this model is applicable to more than just neckties–and given that it’s applicable to neckties, it’s also applicable to more than just board games and conversations!</p>
<section class="footnotes">
<ol>
<li id="fn1">
<p>For a depressingly long time this function wasn’t doing at all what I expected. It’s because I had my last two lines on one line. It’s intuitive to think of something like “return walk.append(…)” as “append something onto walk and then return walk”, but it really means “append something onto walk in-place and then return None, which is the returned value of an in-place operation.” <a href="#fnref1" class="footnote-backref">↩</a></p>
</li>
</ol>
</section>
</content>
</entry>
<entry>
  <title>Abba</title>
  <link href="https://blog.zdsmith.com/posts/abba.html" />
  <id>https://blog.zdsmith.com/posts/abba.html</id>
  <updated>2014-03-19T00:00:00.00Z</updated>
  <content><p>My first major project at <a href="http://hackerschool.com">Hacker School</a> is called <a href="http://github.com/subsetpark/abba">Abba</a>, the Abbreviation Engine. In order to understand why Abba exists I need to backtrack a little.</p>
<h2>The New Abbreviations</h2>
<p>Since around 2006 I have written in an alphabetic shorthand that I call (when I have to write about it in places like this) <a href="https://thoughtstreams.io/zdsmith/new-abbreviations/">the New Abbreviations</a>. When asked for a snappy one-line I say it’s basically a ‘human-readable non-lossy compression algorithm for text’. It’s also of the same general family as the <a href="http://en.wikipedia.org/wiki/Scribal_abbreviation"><em>abbreviationes</em></a> of the Middle Ages. It looks like this:</p>
<p><img src="https://i.imgur.com/048po.jpg" alt="TNA_sample" /></p>
<p>Very simply, the New Abbreviations (and alphabetic shorthands in general) are a matter of matching some simple lettern patterns and replacing them with different symbols.</p>
<p>I’ve written this way for a while. It’s a long-standing project of mine of which I’m rather fond. And on the face of it, this should be very simple to digitize.</p>
<p>There are just a couple factors which make it non-trivial to implement as a simple set of find-and-replace rules:</p>
<ol>
<li>
<p>Positioning rules. This shorthand was designed with English text in mind, and so there are certain assumptions about character placement built in. For instance: one very common word that’s abbreviated in this shorthand is the word “we”, which comes out as <em>w̃</em>. That’s pretty readable, especially when you combine it with its fellows, <em>m̃</em> for “me” and <em>ũ</em> for “us”. But it wouldn’t be as useful to read and write if you simply replaced the sequence “we” every time those two letters came together, leaving <em>sw̃ll</em> and <em>sw̃ep</em> and others. So you replace “we” the word only when it stands alone. And similarly, you replace the prefix “con” and the suffix “ion”. So you need to translate human understandings of morphology, to an extent, into abbreviation rules.</p>
</li>
<li>
<p>Non-Unicode glyphs. Above we saw that “we” gets abbreviated as <em>w̃</em>, which is all well and good because we can type out <em>w̃</em> with relatively little difficulty. But shorthands are not typed, they’re written; and thus they’ll tend to contain symbols that you can’t necessarily represent in computer text—and certainly not with perfect semantic fidelity. In my shorthand, for instance, “er”, when found in the middle of a word, is rendered with a little curlicue above the x-height, as seen in the wikipedia entry for <a href="http://en.wikipedia.org/wiki/Scribal_abbreviation">Scribal Abbrevations</a> under “forms”. There’s no unicode character for that that I’ve been able to find. So you can’t simply replace several letters with one letter—sometimes what you’re inserting won’t be a letter at all.</p>
</li>
</ol>
<h2>Implementation</h2>
<p>It was with these technical hurdles in mind that I decided to come up with a Python application that could do the work of my shorthand system.</p>
<p>Of course, it would hardly be worth my while to write a program that only spoke the New Abbreviations. It only made sense to write a more generic shorthand engine, which could understand the NA as a ruleset, as well as any other hypothetical alphabetical shorthand that somebody else might like to come up with.</p>
<p>In any case, the first thing I knew was that you couldn’t just stick funny unicode letters into a given text and call it a day. If you could I never would have written a program in the first place; I would have just assembled a huge unwieldy collection of unicode symbols and sufficed myself with a lot of copy and pasting.</p>
<p>Instead, I figured: since strings and lists (of characters) are so closely related in Python, why not replace the sequences of characters you want to replace with abbreviation objects, that can report on their own realization? That way you don’t have to be confined to the Unicode character set when defining your abbreviations.</p>
<p>For the first day I continued in this vein, and actually came up with a working prototype. Unfortunately the code was turning out nearly unmaintainable. There was too much strain and accounting for the fact that when dealing with a heterogenous list you never knew what type of thing the next element in your list would be. So every list operation ended up having to wrap itself in checks for element types. And the regexes that determine string replacement don’t make any sense when applied to non-text objects.</p>
<h3>The Dark Heart of Abba</h3>
<p>The breakthrough came with the idea to <em>use Unicode private use characters to stand in for abbreviations</em> in a string. A brief primer:</p>
<h4>Unicode Private Use Areas</h4>
<p>Unicode, you may or may not know, is a text encoding standard for representing a much wider range of characters than just the Latin alphabet encoded in ASCII. The general aim of this sort of thing is to provide a standard encoding for any letter or character in any language in the world. It’s organized by <em>blocks</em> of codepoints, where each codepoint is the hexadecimal number assoociated with the encoded character. The Unicode character ‘a’, for instance, has the hex codepoint 0x061, which is 97 in decimal. The Gurmukhi letter ‘ਉ’ has the hex codepoint 0xa09, which is 2569. It’s the 2569th character in the Unicode character set.</p>
<p>The 57344th character in the Unicode charset, at codepoint 0xE000, doesn’t have a character associated with it. That its whole function, actually—to not have a letter associated with it. It’s a Unicode codepoint that acts like a character and can live in a string with other characters but it has no standardized content associated with it. The whole block of which it is the first character is the <a href="http://en.wikipedia.org/wiki/Private_Use_Areas">Private Use Area</a>.</p>
<h3>Using Private Use Characters as Abbreviations</h3>
<p>So, if we use the Private Use Area of the Basic Multilingual Plane of the Unicode standard, we have 6400 codepoints that we can insert into our text with the near-certainty that they won’t already be there. And then we can treat our list of chars like a real grown-up string.</p>
<pre><code class="language-python">def __init__(self, config):
    self.abb_sequences = []
    self.lookup_table = {}
    # begin creating unicode characters at the beginning 
    # of the private use space
    self.pool = iter(range(57344,63743))
    rep_search = re.compile(&quot;_rep$&quot;)
    # Read through the config file, pulling out abbreviation schemae
    for section in config.sections():
        has_a_rep = False
        # Pull a control character from the pool
        codepoint = chr(next(self.pool))
        # Analyze the regnet markup and move it into the abbreviation dict
        self.add_to_sequences(section, regnet.Regnet(config[section]['pattern']), codepoint)
        for option in config.options(section):
            # Go through each section's options. If it has _rep in it,
            # It's a representation method. Add it to the lookup.
            if re.search(rep_search, option):
                has_a_rep = True
                self.add_to_lookup(codepoint, section, option=option, 
                    value=regnet.parse_regnet(list(config[section][option])))
        if not has_a_rep: 
            self.add_to_lookup(codepoint, section)              
</code></pre>
<p>Here’s how it works: <code>abba</code> creates a register of abbreviations that it reads in from the ruleset. For each abbreviation, it dynamically assigns one of the Unicode codepoints. First it associates that codepoint with the regexp (the regnet, really—more on that later) belonging to that abbreviation. Then it adds that codepoint to a lookup table containing that abbreviation’s representations, whatever they happen to be. In both cases the codepoint acts as a stand-in for the abbreviation object, but we are able to use all the information encoded about the abbreviation without making any assumptions as to its composition.</p>
<h3>Regnet</h3>
<p>The other half of abba is the Regnet format, which is a user-friendly way to define abbreviation rules. Under the hood, abba uses regular expressions to find letter sequences and replace them with codepoints. But I wanted to make abba extensible, and regular expressions are not fun to write by anybody, myself included. So I created a format called Regnet (which means ‘The Rain’ in Swedish and is the first Swedish word beginning with “Re-” to be found <a href="http://en.wikipedia.org/wiki/Abba">here</a>). Regnet lets you take something like <code>the#iso</code> and turn it into an object that maps <code>(?&lt;=\\\\b)\g&lt;pat&gt;(?=\\\\b)</code> onto <em>ð</em> with a precedence level of 0 (which means “the” will get abbreviated before, say, <em>terminal e</em>). Here’s a sample of the ruleset for the New Abbreviations in Regnet format:</p>
<pre><code>[UN]
pattern: un
uni_rep: u${lin_low}

[R ROTUNDA]
pattern: (?&lt;=[bdhmnopquw])r
uni_rep: {a75b}

[THE]
pattern: the#iso
uni_rep: ${th}
</code></pre>
<h3>abba in Action</h3>
<p>You put it together and you’re able to abbreviate texts in an extensible and generalizable manner. Here’s a sample text produced that models some (though not all) of the New Abbreviations’ rules:</p>
<blockquote>
<p>Pꝛut, tut, ſa͞d Pãagrṷl, Ⱳt doð ðis fo̥l mean to ſay? I ðḭ h̭ is upon ð foꝛgi̫ of ſom̭ diabolical to̫ṷ, ⁊ ðt enchãer-lik̭ h̭ wo̬ld charm us. To Ⱳom oṋ of his men ſa͞d, Wiðo̬t do̬bt, ſir, ðis fe‖ow wo̬ld cõ̬erf̭͞t ð la̫uag̭ of ð Pariſians, but h̭ doð only flay ð Latin, imagini̫ by ſo do̫͞ ðt h̭ doð highly Piͫariz̭ it in moſt eloq̭̇̃ terms, ⁊ ſtro̫ly conc̭͞teð himſelf to b̭ ðrfoꝛ̭ a great oꝛatoꝛ in ð French, beca̬ſ̭ h̭ diſda͞neð ð common manner of ſpeaki̫. To Ⱳich Pãagrṷl ſa͞d, Is it trṷ? ð ſcholar anſwer̳, My woꝛſhipful loꝛd, my geni̭ is not apt naṱ to ðt Ⱳich ðis flagitio̬s nebulon ſa͞ð, to excoꝛiaṱ ð cut(ic)uḽ of o̬r vernacular Ga‖ic, but vic̭-verſa‖y I gnav̭ oper̭, ⁊ by veḽs ⁊ ram̭s eniṱ to locupletaṱ it WITH ð Latinicom̭ reduͫanc̭. By G—, ſa͞d Pãagrṷl, I wi‖ teach ỿ to ſpeak. But firſt com̭ hiðer, ⁊ te‖ m̃ Ⱳenc̭ ðo̬ art. To ðis ð ſcholar anſwer̳, ð pꝛimeval oꝛigin of my av̭s ⁊ atav̭s was iͫigenary of ð Lemovic regɸs, Ⱳr r̭q̇i̭ſceð ð coꝛpoꝛ of ð hagiotat ſt. Martial. I uͫerſtaͫ ð̭̭ very we‖, ſa͞d Pãagrṷl. Ⱳn a‖ com̭s to a‖, ðo̬ art a Limo̬ſin, ⁊ ðo̬ wilt her̭ by ðy aff̭ɥ̳ ſp̭̭ch cõ̬erf̭͞t ð Pariſians. We‖ now, com̭ hiðer, I muſt ſhow ð̭̭ a new trick, ⁊ haͫſomely giv̭ ð̭̭ ð combfeat. WITH ðis h̭ to̥k him by ð ðꝛoat, ſay̫͞ to him, ðo̬ flay̭ſt ð Latin; by ſt. John, I wi‖ mak̭ ð̭̭ flay ð fox, foꝛ I wi‖ now flay ð̭̭ aliv̭. ðn began ð po̥ꝛ Limo̬ſin to cry, Haw, gwid maaſter! haw, Laoꝛd, my halp, ⁊ ſt. Marſhaw! haw, I’m woꝛri̭d. Haw, my ðꝛoppḽ, ð bean of my cragg is bꝛuck! Haw, foꝛ ga̬ad’s ſeck lawt my lean, mawſter; waw, waw, waw. Now, ſa͞d Pãagrṷl, ðo̬ ſpeak̭ſt natuꝛa‖y, ⁊ ſo let him go, foꝛ ð po̥ꝛ Limo̬ſin had tota‖y bewꝛay̭d ⁊ ðoꝛo̬ghly conſhit his bꝛ̭̭ch̭s, Ⱳich wer̭ not ḓ̭p ⁊ larg̭ eno̬gh, but ro̬ͫ ſtra͞ght çnɸ̳ gregs, havi̫ in ð ſeat a pi̭c̭ lik̭ a k̭̭li̫’s ta͞l, ⁊ ðrfoꝛ̭ in French ca‖̳, ḓ cha̬ſſ̭s a q̭̬̭̇ ḓ merlus. ðn, ſa͞d Pãagrṷl, ſt. Alipãin, Ⱳt civet? Fi̭! to ð devil WITH ðis tuꝛnip-eater, as h̭ ſtḭs! ⁊ ſo let him go. But ðis hug of Pãagrṷl’s was ſuch a terroꝛ to him a‖ ð days of his lif̭, ⁊ to̥k ſuch ḓ̭p impꝛ̭ſſɸ in his fancy, ðt very often, diſtraɥ̳ WITH ſudden affrightm̭̃s, h̭ wo̬ld ſtartḽ ⁊ ſay ðt Pãagrṷl held him by ð neck. B̭ſiḓs ðt, it pꝛocuꝛ̳ him a cõinual dꝛo̬ght ⁊ ḓſir̭ to dꝛḭ, ſo ðt after ſom̭ few y̭ars h̭ di̭d of ð deað Rolaͫ, in pla͞n ̭̫liſh ca‖̳ ðirſt, a woꝛk of diviṋ v̭̫eanc̭, ſhowi̫ us ðt Ⱳich ſa͞ð ð philoſopher ⁊ A̬lus Ge‖i̬s, ðt it becomeð us to ſpeak accoꝛdi̫ to ð common la̫uag̭; ⁊ ðt w̃ ſho̬ld, as ſa͞d Oɥavian A̬guſtus, ſtriv̭ to ſhu̲ a‖ ſtra̫̭ ⁊ ṵnown terms WITH as much h̭̭dfulṋſs ⁊ circumſp̭ɥɸ as pilots of ſhips uſ̭ to avo͞d ð rocks ⁊ ba̰s in ð ſeaa͞d Pãagrṷl, Ⱳt doð ðis fo̥l mean to ſay? I ðḭ h̭ is upon ð foꝛgi̫ of ſom̭ diabolical to̫ṷ, ⁊ ðt enchãer-lik̭ h̭ wo̬ld charm us. To Ⱳom oṋ of his men ſa͞d, Wiðo̬t do̬bt, ſir, ðis fe‖ow wo̬ld cõ̬erf̭͞t ð la̫uag̭ of ð Pariſians, but h̭ doð only flay ð Latin, imagini̫ by ſo do̫͞ ðt h̭ doð highly Piͫariz̭ it in moſt eloq̭̇̃ terms, ⁊ ſtro̫ly conc̭͞teð himſelf to b̭ ðrfoꝛ̭ a great oꝛatoꝛ in ð French, beca̬ſ̭ h̭ diſda͞neð ð common manner of ſpeaki̫. To Ⱳich Pãagrṷl ſa͞d, Is it trṷ? ð ſcholar anſwer̳, My woꝛſhipful loꝛd, my geni̭ is not apt naṱ to ðt Ⱳich ðis flagitio̬s nebulon ſa͞ð, to excoꝛiaṱ ð cut(ic)uḽ of o̬r vernacular Ga‖ic, but vic̭-verſa‖y I gnav̭ oper̭, ⁊ by veḽs ⁊ ram̭s eniṱ to locupletaṱ it WITH ð Latinicom̭ reduͫanc̭. By G—, ſa͞d Pãagrṷl, I wi‖ teach ỿ to ſpeak. But firſt com̭ hiðer, ⁊ te‖ m̃ Ⱳenc̭ ðo̬ art. To ðis ð ſcholar anſwer̳, ð pꝛimeval oꝛigin of my av̭s ⁊ atav̭s was iͫigenary of ð Lemovic regɸs, Ⱳr r̭q̇i̭ſceð ð coꝛpoꝛ of ð hagiotat ſt. Martial. I uͫerſtaͫ ð̭̭ very we‖, ſa͞d Pãagrṷl. Ⱳn a‖ com̭s to a‖, ðo̬ art a Limo̬ſin, ⁊ ðo̬ wilt her̭ by ðy aff̭ɥ̳ ſp̭̭ch cõ̬erf̭͞t ð Pariſians. We‖ now, com̭ hiðer, I muſt ſhow ð̭̭ a new trick, ⁊ haͫſomely giv̭ ð̭̭ ð combfeat. WITH ðis h̭ to̥k him by ð ðꝛoat, ſay̫͞ to him, ðo̬ flay̭ſt ð Latin; by ſt. John, I wi‖ mak̭ ð̭̭ flay ð fox, foꝛ I wi‖ now flay ð̭̭ aliv̭. ðn began ð po̥ꝛ Limo̬ſin to cry, Haw, gwid maaſter! haw, Laoꝛd, my halp, ⁊ ſt. Marſhaw! haw, I’m woꝛri̭d. Haw, my ðꝛoppḽ, ð bean of my cragg is bꝛuck! Haw, foꝛ ga̬ad’s ſeck lawt my lean, mawſter; waw, waw, waw. Now, ſa͞d Pãagrṷl, ðo̬ ſpeak̭ſt natuꝛa‖y, ⁊ ſo let him go, foꝛ ð po̥ꝛ Limo̬ſin had tota‖y bewꝛay̭d ⁊ ðoꝛo̬ghly conſhit his bꝛ̭̭ch̭s, Ⱳich wer̭ not ḓ̭p ⁊ larg̭ eno̬gh, but ro̬ͫ ſtra͞ght çnɸ̳ gregs, havi̫ in ð ſeat a pi̭c̭ lik̭ a k̭̭li̫’s ta͞l, ⁊ ðrfoꝛ̭ in French ca‖̳, ḓ cha̬ſſ̭s a q̭̬̭̇ ḓ merlus. ðn, ſa͞d Pãagrṷl, ſt. Alipãin, Ⱳt civet? Fi̭! to ð devil WITH ðis tuꝛnip-eater, as h̭ ſtḭs! ⁊ ſo let him go. But ðis hug of Pãagrṷl’s was ſuch a terroꝛ to him a‖ ð days of his lif̭, ⁊ to̥k ſuch ḓ̭p impꝛ̭ſſɸ in his fancy, ðt very often, diſtraɥ̳ WITH ſudden affrightm̭̃s, h̭ wo̬ld ſtartḽ ⁊ ſay ðt Pãagrṷl held him by ð neck. B̭ſiḓs ðt, it pꝛocuꝛ̳ him a cõinual dꝛo̬ght ⁊ ḓſir̭ to dꝛḭ, ſo ðt after ſom̭ few y̭ars h̭ di̭d of ð deað Rolaͫ, in pla͞n ̭̫liſh ca‖̳ ðirſt, a woꝛk of diviṋ v̭̫eanc̭, ſhowi̫ us ðt Ⱳich ſa͞ð ð philoſopher ⁊ A̬lus Ge‖i̬s, ðt it becomeð us to ſpeak accoꝛdi̫ to ð common la̫uag̭; ⁊ ðt w̃ ſho̬ld, as ſa͞d Oɥavian A̬guſtus, ſtriv̭ to ſhu̲ a‖ ſtra̫̭ ⁊ ṵnown terms WITH as much h̭̭dfulṋſs ⁊ circumſp̭ɥɸ as pilots of ſhips uſ̭ to avo͞d ð rocks ⁊ ba̰s in ð ſea.</p>
</blockquote>
</content>
</entry>


</feed>
